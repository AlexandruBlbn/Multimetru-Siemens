
MultimetruSiemens.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b8  00800200  00002072  00002106  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002072  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000367  008002b8  008002b8  000021be  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000021be  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000221c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  0000225c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002993  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000f54  00000000  00000000  00004cbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000112d  00000000  00000000  00005c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000250  00000000  00000000  00006d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000988  00000000  00000000  00006f90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000187a  00000000  00000000  00007918  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00009192  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	5c c2       	rjmp	.+1208   	; 0x4fe <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e2 e7       	ldi	r30, 0x72	; 114
      fc:	f0 e2       	ldi	r31, 0x20	; 32
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	a8 3b       	cpi	r26, 0xB8	; 184
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	a8 eb       	ldi	r26, 0xB8	; 184
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	af 31       	cpi	r26, 0x1F	; 31
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	03 d0       	rcall	.+6      	; 0x126 <main>
     120:	0c 94 37 10 	jmp	0x206e	; 0x206e <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <main>:
#include <avr/interrupt.h>
#include <stdint.h>
#include <stdio.h>

static inline void uart_init(void){
	UBRR0H = (UBRR >> 8);
     126:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (UBRR & 0xFF);
     12a:	80 e1       	ldi	r24, 0x10	; 16
     12c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	UCSR0A = (1 << U2X0);
     130:	82 e0       	ldi	r24, 0x02	; 2
     132:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     136:	88 e1       	ldi	r24, 0x18	; 24
     138:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     13c:	86 e0       	ldi	r24, 0x06	; 6
     13e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
#define F_CPU 16000000UL
#define SCL 100000L


static inline void i2c_init(void) {
	TWBR = ((F_CPU / SCL) - 16) / 2;
     142:	88 e4       	ldi	r24, 0x48	; 72
     144:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
	TWSR = (0 << TWPS0) | (0 << TWPS1);
     148:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
	TWCR = (1 << TWEN);
     14c:	84 e0       	ldi	r24, 0x04	; 4
     14e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
#include "MAX30102/max30102.h"

int main(void) {
	uart_init();
	i2c_init();
	timer_init();
     152:	be d1       	rcall	.+892    	; 0x4d0 <timer_init>


    while(1) {
    MAX30102_Start();
     154:	a8 d3       	rcall	.+1872   	; 0x8a6 <MAX30102_Start>
     156:	fe cf       	rjmp	.-4      	; 0x154 <main+0x2e>

00000158 <max30102_write_reg>:
     158:	94 ea       	ldi	r25, 0xA4	; 164
    
    uint32_t ir = ((uint32_t)buffer[3] << 16) | ((uint32_t)buffer[4] << 8) | buffer[5];
    ir &= 0x3FFFF;
    
    return ir;
}
     15a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     15e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     162:	99 23       	and	r25, r25
     164:	e4 f7       	brge	.-8      	; 0x15e <max30102_write_reg+0x6>
     166:	9e ea       	ldi	r25, 0xAE	; 174
     168:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     16c:	94 e8       	ldi	r25, 0x84	; 132
     16e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     172:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     176:	99 23       	and	r25, r25
     178:	e4 f7       	brge	.-8      	; 0x172 <max30102_write_reg+0x1a>
     17a:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     17e:	98 7f       	andi	r25, 0xF8	; 248
     180:	98 31       	cpi	r25, 0x18	; 24
     182:	21 f0       	breq	.+8      	; 0x18c <max30102_write_reg+0x34>
     184:	84 e9       	ldi	r24, 0x94	; 148
     186:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     18a:	08 95       	ret
     18c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     190:	84 e8       	ldi	r24, 0x84	; 132
     192:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     196:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     19a:	88 23       	and	r24, r24
     19c:	e4 f7       	brge	.-8      	; 0x196 <max30102_write_reg+0x3e>
     19e:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     1a2:	88 7f       	andi	r24, 0xF8	; 248
     1a4:	88 32       	cpi	r24, 0x28	; 40
     1a6:	21 f0       	breq	.+8      	; 0x1b0 <max30102_write_reg+0x58>
     1a8:	84 e9       	ldi	r24, 0x94	; 148
     1aa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     1ae:	08 95       	ret
     1b0:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     1b4:	84 e8       	ldi	r24, 0x84	; 132
     1b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     1ba:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     1be:	88 23       	and	r24, r24
     1c0:	e4 f7       	brge	.-8      	; 0x1ba <max30102_write_reg+0x62>
     1c2:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     1c6:	88 7f       	andi	r24, 0xF8	; 248
     1c8:	88 32       	cpi	r24, 0x28	; 40
     1ca:	21 f0       	breq	.+8      	; 0x1d4 <max30102_write_reg+0x7c>
     1cc:	84 e9       	ldi	r24, 0x94	; 148
     1ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     1d2:	08 95       	ret
     1d4:	84 e9       	ldi	r24, 0x94	; 148
     1d6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     1da:	08 95       	ret

000001dc <max30102_read_reg>:
     1dc:	94 ea       	ldi	r25, 0xA4	; 164
     1de:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     1e2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     1e6:	99 23       	and	r25, r25
     1e8:	e4 f7       	brge	.-8      	; 0x1e2 <max30102_read_reg+0x6>
     1ea:	9e ea       	ldi	r25, 0xAE	; 174
     1ec:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     1f0:	94 e8       	ldi	r25, 0x84	; 132
     1f2:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     1f6:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     1fa:	99 23       	and	r25, r25
     1fc:	e4 f7       	brge	.-8      	; 0x1f6 <max30102_read_reg+0x1a>
     1fe:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     202:	98 7f       	andi	r25, 0xF8	; 248
     204:	98 31       	cpi	r25, 0x18	; 24
     206:	29 f0       	breq	.+10     	; 0x212 <max30102_read_reg+0x36>
     208:	84 e9       	ldi	r24, 0x94	; 148
     20a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     20e:	8f ef       	ldi	r24, 0xFF	; 255
     210:	08 95       	ret
     212:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     216:	84 e8       	ldi	r24, 0x84	; 132
     218:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     21c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     220:	88 23       	and	r24, r24
     222:	e4 f7       	brge	.-8      	; 0x21c <max30102_read_reg+0x40>
     224:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     228:	88 7f       	andi	r24, 0xF8	; 248
     22a:	88 32       	cpi	r24, 0x28	; 40
     22c:	29 f0       	breq	.+10     	; 0x238 <max30102_read_reg+0x5c>
     22e:	84 e9       	ldi	r24, 0x94	; 148
     230:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     234:	8f ef       	ldi	r24, 0xFF	; 255
     236:	08 95       	ret
     238:	84 ea       	ldi	r24, 0xA4	; 164
     23a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     23e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     242:	88 23       	and	r24, r24
     244:	e4 f7       	brge	.-8      	; 0x23e <max30102_read_reg+0x62>
     246:	8f ea       	ldi	r24, 0xAF	; 175
     248:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     24c:	84 e8       	ldi	r24, 0x84	; 132
     24e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     252:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     256:	88 23       	and	r24, r24
     258:	e4 f7       	brge	.-8      	; 0x252 <max30102_read_reg+0x76>
     25a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     25e:	88 7f       	andi	r24, 0xF8	; 248
     260:	80 34       	cpi	r24, 0x40	; 64
     262:	29 f0       	breq	.+10     	; 0x26e <max30102_read_reg+0x92>
     264:	84 e9       	ldi	r24, 0x94	; 148
     266:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     26a:	8f ef       	ldi	r24, 0xFF	; 255
     26c:	08 95       	ret
     26e:	84 e8       	ldi	r24, 0x84	; 132
     270:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     274:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     278:	88 23       	and	r24, r24
     27a:	e4 f7       	brge	.-8      	; 0x274 <max30102_read_reg+0x98>
     27c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     280:	94 e9       	ldi	r25, 0x94	; 148
     282:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     286:	08 95       	ret

00000288 <max30102_read_fifo>:
     288:	dc 01       	movw	r26, r24
     28a:	84 ea       	ldi	r24, 0xA4	; 164
     28c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     290:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     294:	88 23       	and	r24, r24
     296:	e4 f7       	brge	.-8      	; 0x290 <max30102_read_fifo+0x8>
     298:	8e ea       	ldi	r24, 0xAE	; 174
     29a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     29e:	84 e8       	ldi	r24, 0x84	; 132
     2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     2a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     2a8:	88 23       	and	r24, r24
     2aa:	e4 f7       	brge	.-8      	; 0x2a4 <max30102_read_fifo+0x1c>
     2ac:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     2b0:	87 e0       	ldi	r24, 0x07	; 7
     2b2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     2b6:	84 e8       	ldi	r24, 0x84	; 132
     2b8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     2bc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     2c0:	99 23       	and	r25, r25
     2c2:	e4 f7       	brge	.-8      	; 0x2bc <max30102_read_fifo+0x34>
     2c4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     2c8:	84 ea       	ldi	r24, 0xA4	; 164
     2ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     2ce:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     2d2:	99 23       	and	r25, r25
     2d4:	e4 f7       	brge	.-8      	; 0x2ce <max30102_read_fifo+0x46>
     2d6:	8f ea       	ldi	r24, 0xAF	; 175
     2d8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     2dc:	84 e8       	ldi	r24, 0x84	; 132
     2de:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     2e2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     2e6:	99 23       	and	r25, r25
     2e8:	e4 f7       	brge	.-8      	; 0x2e2 <max30102_read_fifo+0x5a>
     2ea:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     2ee:	20 e0       	ldi	r18, 0x00	; 0
     2f0:	25 c0       	rjmp	.+74     	; 0x33c <max30102_read_fifo+0xb4>
     2f2:	e2 2f       	mov	r30, r18
     2f4:	f0 e0       	ldi	r31, 0x00	; 0
     2f6:	46 2f       	mov	r20, r22
     2f8:	50 e0       	ldi	r21, 0x00	; 0
     2fa:	41 50       	subi	r20, 0x01	; 1
     2fc:	51 09       	sbc	r21, r1
     2fe:	e4 17       	cp	r30, r20
     300:	f5 07       	cpc	r31, r21
     302:	74 f4       	brge	.+28     	; 0x320 <max30102_read_fifo+0x98>
     304:	fd 01       	movw	r30, r26
     306:	e2 0f       	add	r30, r18
     308:	f1 1d       	adc	r31, r1
     30a:	84 ec       	ldi	r24, 0xC4	; 196
     30c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     310:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     314:	99 23       	and	r25, r25
     316:	e4 f7       	brge	.-8      	; 0x310 <max30102_read_fifo+0x88>
     318:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     31c:	80 83       	st	Z, r24
     31e:	0d c0       	rjmp	.+26     	; 0x33a <max30102_read_fifo+0xb2>
     320:	fd 01       	movw	r30, r26
     322:	e2 0f       	add	r30, r18
     324:	f1 1d       	adc	r31, r1
     326:	84 e8       	ldi	r24, 0x84	; 132
     328:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     32c:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     330:	99 23       	and	r25, r25
     332:	e4 f7       	brge	.-8      	; 0x32c <max30102_read_fifo+0xa4>
     334:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     338:	80 83       	st	Z, r24
     33a:	2f 5f       	subi	r18, 0xFF	; 255
     33c:	26 17       	cp	r18, r22
     33e:	c8 f2       	brcs	.-78     	; 0x2f2 <max30102_read_fifo+0x6a>
     340:	84 e9       	ldi	r24, 0x94	; 148
     342:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     346:	08 95       	ret

00000348 <max30102_init>:
     348:	8f ef       	ldi	r24, 0xFF	; 255
     34a:	48 df       	rcall	.-368    	; 0x1dc <max30102_read_reg>
     34c:	91 e0       	ldi	r25, 0x01	; 1
     34e:	85 31       	cpi	r24, 0x15	; 21
     350:	09 f0       	breq	.+2      	; 0x354 <max30102_init+0xc>
     352:	90 e0       	ldi	r25, 0x00	; 0
     354:	89 2f       	mov	r24, r25
     356:	08 95       	ret

00000358 <max30102_reset>:
     358:	60 e4       	ldi	r22, 0x40	; 64
     35a:	89 e0       	ldi	r24, 0x09	; 9
     35c:	fd de       	rcall	.-518    	; 0x158 <max30102_write_reg>
     35e:	2f ef       	ldi	r18, 0xFF	; 255
     360:	81 ee       	ldi	r24, 0xE1	; 225
     362:	94 e0       	ldi	r25, 0x04	; 4
     364:	21 50       	subi	r18, 0x01	; 1
     366:	80 40       	sbci	r24, 0x00	; 0
     368:	90 40       	sbci	r25, 0x00	; 0
     36a:	e1 f7       	brne	.-8      	; 0x364 <max30102_reset+0xc>
     36c:	00 c0       	rjmp	.+0      	; 0x36e <max30102_reset+0x16>
     36e:	00 00       	nop
     370:	08 95       	ret

00000372 <max30102_check>:
     372:	ea df       	rcall	.-44     	; 0x348 <max30102_init>
     374:	81 11       	cpse	r24, r1
     376:	16 c0       	rjmp	.+44     	; 0x3a4 <max30102_check+0x32>
     378:	e0 e0       	ldi	r30, 0x00	; 0
     37a:	f2 e0       	ldi	r31, 0x02	; 2
     37c:	07 c0       	rjmp	.+14     	; 0x38c <max30102_check+0x1a>
     37e:	31 96       	adiw	r30, 0x01	; 1
     380:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     384:	85 ff       	sbrs	r24, 5
     386:	fc cf       	rjmp	.-8      	; 0x380 <max30102_check+0xe>
     388:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     38c:	90 81       	ld	r25, Z
     38e:	91 11       	cpse	r25, r1
     390:	f6 cf       	rjmp	.-20     	; 0x37e <max30102_check+0xc>
     392:	ff cf       	rjmp	.-2      	; 0x392 <max30102_check+0x20>
     394:	31 96       	adiw	r30, 0x01	; 1
     396:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     39a:	85 ff       	sbrs	r24, 5
     39c:	fc cf       	rjmp	.-8      	; 0x396 <max30102_check+0x24>
     39e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <max30102_check+0x36>
     3a4:	e4 e1       	ldi	r30, 0x14	; 20
     3a6:	f2 e0       	ldi	r31, 0x02	; 2
     3a8:	90 81       	ld	r25, Z
     3aa:	91 11       	cpse	r25, r1
     3ac:	f3 cf       	rjmp	.-26     	; 0x394 <max30102_check+0x22>
     3ae:	08 95       	ret

000003b0 <max30102_clear_fifo>:
     3b0:	60 e0       	ldi	r22, 0x00	; 0
     3b2:	84 e0       	ldi	r24, 0x04	; 4
     3b4:	d1 de       	rcall	.-606    	; 0x158 <max30102_write_reg>
     3b6:	60 e0       	ldi	r22, 0x00	; 0
     3b8:	85 e0       	ldi	r24, 0x05	; 5
     3ba:	ce de       	rcall	.-612    	; 0x158 <max30102_write_reg>
     3bc:	60 e0       	ldi	r22, 0x00	; 0
     3be:	86 e0       	ldi	r24, 0x06	; 6
     3c0:	cb ce       	rjmp	.-618    	; 0x158 <max30102_write_reg>
     3c2:	08 95       	ret

000003c4 <max30102_setup>:
     3c4:	ff 92       	push	r15
     3c6:	0f 93       	push	r16
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	f8 2e       	mov	r15, r24
     3d0:	16 2f       	mov	r17, r22
     3d2:	d4 2f       	mov	r29, r20
     3d4:	c2 2f       	mov	r28, r18
     3d6:	c0 df       	rcall	.-128    	; 0x358 <max30102_reset>
     3d8:	61 2f       	mov	r22, r17
     3da:	60 61       	ori	r22, 0x10	; 16
     3dc:	88 e0       	ldi	r24, 0x08	; 8
     3de:	bc de       	rcall	.-648    	; 0x158 <max30102_write_reg>
     3e0:	63 e0       	ldi	r22, 0x03	; 3
     3e2:	89 e0       	ldi	r24, 0x09	; 9
     3e4:	b9 de       	rcall	.-654    	; 0x158 <max30102_write_reg>
     3e6:	60 2f       	mov	r22, r16
     3e8:	6d 2b       	or	r22, r29
     3ea:	6c 2b       	or	r22, r28
     3ec:	8a e0       	ldi	r24, 0x0A	; 10
     3ee:	b4 de       	rcall	.-664    	; 0x158 <max30102_write_reg>
     3f0:	6f 2d       	mov	r22, r15
     3f2:	8c e0       	ldi	r24, 0x0C	; 12
     3f4:	b1 de       	rcall	.-670    	; 0x158 <max30102_write_reg>
     3f6:	6f 2d       	mov	r22, r15
     3f8:	8d e0       	ldi	r24, 0x0D	; 13
     3fa:	ae de       	rcall	.-676    	; 0x158 <max30102_write_reg>
     3fc:	61 e2       	ldi	r22, 0x21	; 33
     3fe:	81 e1       	ldi	r24, 0x11	; 17
     400:	ab de       	rcall	.-682    	; 0x158 <max30102_write_reg>
     402:	60 e0       	ldi	r22, 0x00	; 0
     404:	82 e1       	ldi	r24, 0x12	; 18
     406:	a8 de       	rcall	.-688    	; 0x158 <max30102_write_reg>
     408:	d3 df       	rcall	.-90     	; 0x3b0 <max30102_clear_fifo>
     40a:	df 91       	pop	r29
     40c:	cf 91       	pop	r28
     40e:	1f 91       	pop	r17
     410:	0f 91       	pop	r16
     412:	ff 90       	pop	r15
     414:	08 95       	ret

00000416 <max30102_get_read_ptr>:
     416:	86 e0       	ldi	r24, 0x06	; 6
     418:	e1 ce       	rjmp	.-574    	; 0x1dc <max30102_read_reg>
     41a:	08 95       	ret

0000041c <max30102_get_write_ptr>:
     41c:	84 e0       	ldi	r24, 0x04	; 4
     41e:	de ce       	rjmp	.-580    	; 0x1dc <max30102_read_reg>
     420:	08 95       	ret

00000422 <max30102_read_sample>:
     422:	ef 92       	push	r14
     424:	ff 92       	push	r15
     426:	0f 93       	push	r16
     428:	1f 93       	push	r17
     42a:	cf 93       	push	r28
     42c:	df 93       	push	r29
     42e:	00 d0       	rcall	.+0      	; 0x430 <max30102_read_sample+0xe>
     430:	00 d0       	rcall	.+0      	; 0x432 <max30102_read_sample+0x10>
     432:	cd b7       	in	r28, 0x3d	; 61
     434:	de b7       	in	r29, 0x3e	; 62
     436:	7c 01       	movw	r14, r24
     438:	8b 01       	movw	r16, r22
     43a:	66 e0       	ldi	r22, 0x06	; 6
     43c:	ce 01       	movw	r24, r28
     43e:	01 96       	adiw	r24, 0x01	; 1
     440:	23 df       	rcall	.-442    	; 0x288 <max30102_read_fifo>
     442:	89 81       	ldd	r24, Y+1	; 0x01
     444:	90 e0       	ldi	r25, 0x00	; 0
     446:	a0 e0       	ldi	r26, 0x00	; 0
     448:	b0 e0       	ldi	r27, 0x00	; 0
     44a:	bc 01       	movw	r22, r24
     44c:	55 27       	eor	r21, r21
     44e:	44 27       	eor	r20, r20
     450:	9a 81       	ldd	r25, Y+2	; 0x02
     452:	89 2f       	mov	r24, r25
     454:	90 e0       	ldi	r25, 0x00	; 0
     456:	a0 e0       	ldi	r26, 0x00	; 0
     458:	b0 e0       	ldi	r27, 0x00	; 0
     45a:	ba 2f       	mov	r27, r26
     45c:	a9 2f       	mov	r26, r25
     45e:	98 2f       	mov	r25, r24
     460:	88 27       	eor	r24, r24
     462:	84 2b       	or	r24, r20
     464:	95 2b       	or	r25, r21
     466:	a6 2b       	or	r26, r22
     468:	b7 2b       	or	r27, r23
     46a:	2b 81       	ldd	r18, Y+3	; 0x03
     46c:	82 2b       	or	r24, r18
     46e:	a3 70       	andi	r26, 0x03	; 3
     470:	bb 27       	eor	r27, r27
     472:	f7 01       	movw	r30, r14
     474:	80 83       	st	Z, r24
     476:	91 83       	std	Z+1, r25	; 0x01
     478:	a2 83       	std	Z+2, r26	; 0x02
     47a:	b3 83       	std	Z+3, r27	; 0x03
     47c:	8c 81       	ldd	r24, Y+4	; 0x04
     47e:	90 e0       	ldi	r25, 0x00	; 0
     480:	a0 e0       	ldi	r26, 0x00	; 0
     482:	b0 e0       	ldi	r27, 0x00	; 0
     484:	bc 01       	movw	r22, r24
     486:	55 27       	eor	r21, r21
     488:	44 27       	eor	r20, r20
     48a:	9d 81       	ldd	r25, Y+5	; 0x05
     48c:	89 2f       	mov	r24, r25
     48e:	90 e0       	ldi	r25, 0x00	; 0
     490:	a0 e0       	ldi	r26, 0x00	; 0
     492:	b0 e0       	ldi	r27, 0x00	; 0
     494:	ba 2f       	mov	r27, r26
     496:	a9 2f       	mov	r26, r25
     498:	98 2f       	mov	r25, r24
     49a:	88 27       	eor	r24, r24
     49c:	84 2b       	or	r24, r20
     49e:	95 2b       	or	r25, r21
     4a0:	a6 2b       	or	r26, r22
     4a2:	b7 2b       	or	r27, r23
     4a4:	2e 81       	ldd	r18, Y+6	; 0x06
     4a6:	82 2b       	or	r24, r18
     4a8:	a3 70       	andi	r26, 0x03	; 3
     4aa:	bb 27       	eor	r27, r27
     4ac:	f8 01       	movw	r30, r16
     4ae:	80 83       	st	Z, r24
     4b0:	91 83       	std	Z+1, r25	; 0x01
     4b2:	a2 83       	std	Z+2, r26	; 0x02
     4b4:	b3 83       	std	Z+3, r27	; 0x03
     4b6:	26 96       	adiw	r28, 0x06	; 6
     4b8:	0f b6       	in	r0, 0x3f	; 63
     4ba:	f8 94       	cli
     4bc:	de bf       	out	0x3e, r29	; 62
     4be:	0f be       	out	0x3f, r0	; 63
     4c0:	cd bf       	out	0x3d, r28	; 61
     4c2:	df 91       	pop	r29
     4c4:	cf 91       	pop	r28
     4c6:	1f 91       	pop	r17
     4c8:	0f 91       	pop	r16
     4ca:	ff 90       	pop	r15
     4cc:	ef 90       	pop	r14
     4ce:	08 95       	ret

000004d0 <timer_init>:

//-----------------------------
//functii de timer cu incrementare la fiecare 1ms.
//prescaler folosit 64 - 16mhz/64 - 250khz, 250khz/250 = 1ms - perioada de 1ms
void timer_init(void) {
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
     4d0:	8b e0       	ldi	r24, 0x0B	; 11
     4d2:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
	OCR1A = 249;
     4d6:	89 ef       	ldi	r24, 0xF9	; 249
     4d8:	90 e0       	ldi	r25, 0x00	; 0
     4da:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     4de:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
	TIMSK1 = (1 << OCIE1A);
     4e2:	82 e0       	ldi	r24, 0x02	; 2
     4e4:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
	sei();
     4e8:	78 94       	sei
     4ea:	08 95       	ret

000004ec <millis>:
}

unsigned long millis(void) {
	return millisCounter;
     4ec:	60 91 b9 02 	lds	r22, 0x02B9	; 0x8002b9 <millisCounter>
     4f0:	70 91 ba 02 	lds	r23, 0x02BA	; 0x8002ba <millisCounter+0x1>
     4f4:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <millisCounter+0x2>
     4f8:	90 91 bc 02 	lds	r25, 0x02BC	; 0x8002bc <millisCounter+0x3>
}
     4fc:	08 95       	ret

000004fe <__vector_17>:

ISR(TIMER1_COMPA_vect) {
     4fe:	1f 92       	push	r1
     500:	0f 92       	push	r0
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	0f 92       	push	r0
     506:	11 24       	eor	r1, r1
     508:	8f 93       	push	r24
     50a:	9f 93       	push	r25
     50c:	af 93       	push	r26
     50e:	bf 93       	push	r27
	millisCounter++;
     510:	80 91 b9 02 	lds	r24, 0x02B9	; 0x8002b9 <millisCounter>
     514:	90 91 ba 02 	lds	r25, 0x02BA	; 0x8002ba <millisCounter+0x1>
     518:	a0 91 bb 02 	lds	r26, 0x02BB	; 0x8002bb <millisCounter+0x2>
     51c:	b0 91 bc 02 	lds	r27, 0x02BC	; 0x8002bc <millisCounter+0x3>
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	a1 1d       	adc	r26, r1
     524:	b1 1d       	adc	r27, r1
     526:	80 93 b9 02 	sts	0x02B9, r24	; 0x8002b9 <millisCounter>
     52a:	90 93 ba 02 	sts	0x02BA, r25	; 0x8002ba <millisCounter+0x1>
     52e:	a0 93 bb 02 	sts	0x02BB, r26	; 0x8002bb <millisCounter+0x2>
     532:	b0 93 bc 02 	sts	0x02BC, r27	; 0x8002bc <millisCounter+0x3>
}
     536:	bf 91       	pop	r27
     538:	af 91       	pop	r26
     53a:	9f 91       	pop	r25
     53c:	8f 91       	pop	r24
     53e:	0f 90       	pop	r0
     540:	0f be       	out	0x3f, r0	; 63
     542:	0f 90       	pop	r0
     544:	1f 90       	pop	r1
     546:	18 95       	reti

00000548 <calculateSpO2>:
//bpm = 60.000ms / intervalul dintre batai in ms

//-----------------------------

//Calcul Saturatie O2
void calculateSpO2(void) {
     548:	4f 92       	push	r4
     54a:	5f 92       	push	r5
     54c:	6f 92       	push	r6
     54e:	7f 92       	push	r7
     550:	8f 92       	push	r8
     552:	9f 92       	push	r9
     554:	af 92       	push	r10
     556:	bf 92       	push	r11
     558:	cf 92       	push	r12
     55a:	df 92       	push	r13
     55c:	ef 92       	push	r14
     55e:	ff 92       	push	r15
     560:	0f 93       	push	r16
     562:	1f 93       	push	r17
     564:	cf 93       	push	r28
     566:	df 93       	push	r29
     568:	cd b7       	in	r28, 0x3d	; 61
     56a:	de b7       	in	r29, 0x3e	; 62
     56c:	2c 97       	sbiw	r28, 0x0c	; 12
     56e:	0f b6       	in	r0, 0x3f	; 63
     570:	f8 94       	cli
     572:	de bf       	out	0x3e, r29	; 62
     574:	0f be       	out	0x3f, r0	; 63
     576:	cd bf       	out	0x3d, r28	; 61
    uint32_t irMax = 0, irMin = 999999;
    uint32_t redMax = 0, redMin = 999999;
    unsigned long irSum = 0, redSum = 0;
    
    for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
     578:	80 e0       	ldi	r24, 0x00	; 0
     57a:	90 e0       	ldi	r25, 0x00	; 0

//Calcul Saturatie O2
void calculateSpO2(void) {
    uint32_t irMax = 0, irMin = 999999;
    uint32_t redMax = 0, redMin = 999999;
    unsigned long irSum = 0, redSum = 0;
     57c:	c1 2c       	mov	r12, r1
     57e:	d1 2c       	mov	r13, r1
     580:	76 01       	movw	r14, r12
     582:	81 2c       	mov	r8, r1
     584:	91 2c       	mov	r9, r1
     586:	54 01       	movw	r10, r8
//-----------------------------

//Calcul Saturatie O2
void calculateSpO2(void) {
    uint32_t irMax = 0, irMin = 999999;
    uint32_t redMax = 0, redMin = 999999;
     588:	0f 2e       	mov	r0, r31
     58a:	ff e3       	ldi	r31, 0x3F	; 63
     58c:	4f 2e       	mov	r4, r31
     58e:	f2 e4       	ldi	r31, 0x42	; 66
     590:	5f 2e       	mov	r5, r31
     592:	ff e0       	ldi	r31, 0x0F	; 15
     594:	6f 2e       	mov	r6, r31
     596:	71 2c       	mov	r7, r1
     598:	f0 2d       	mov	r31, r0
     59a:	1d 82       	std	Y+5, r1	; 0x05
     59c:	1e 82       	std	Y+6, r1	; 0x06
     59e:	1f 82       	std	Y+7, r1	; 0x07
     5a0:	18 86       	std	Y+8, r1	; 0x08

//-----------------------------

//Calcul Saturatie O2
void calculateSpO2(void) {
    uint32_t irMax = 0, irMin = 999999;
     5a2:	2f e3       	ldi	r18, 0x3F	; 63
     5a4:	32 e4       	ldi	r19, 0x42	; 66
     5a6:	4f e0       	ldi	r20, 0x0F	; 15
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	29 87       	std	Y+9, r18	; 0x09
     5ac:	3a 87       	std	Y+10, r19	; 0x0a
     5ae:	4b 87       	std	Y+11, r20	; 0x0b
     5b0:	5c 87       	std	Y+12, r21	; 0x0c
     5b2:	19 82       	std	Y+1, r1	; 0x01
     5b4:	1a 82       	std	Y+2, r1	; 0x02
     5b6:	1b 82       	std	Y+3, r1	; 0x03
     5b8:	1c 82       	std	Y+4, r1	; 0x04
    uint32_t redMax = 0, redMin = 999999;
    unsigned long irSum = 0, redSum = 0;
    
    for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
     5ba:	4d c0       	rjmp	.+154    	; 0x656 <calculateSpO2+0x10e>
        if (irBuffer[i] > irMax) irMax = irBuffer[i];
     5bc:	fc 01       	movw	r30, r24
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	e1 50       	subi	r30, 0x01	; 1
     5c8:	fd 4f       	sbci	r31, 0xFD	; 253
     5ca:	00 81       	ld	r16, Z
     5cc:	11 81       	ldd	r17, Z+1	; 0x01
     5ce:	22 81       	ldd	r18, Z+2	; 0x02
     5d0:	33 81       	ldd	r19, Z+3	; 0x03
     5d2:	49 81       	ldd	r20, Y+1	; 0x01
     5d4:	5a 81       	ldd	r21, Y+2	; 0x02
     5d6:	6b 81       	ldd	r22, Y+3	; 0x03
     5d8:	7c 81       	ldd	r23, Y+4	; 0x04
     5da:	40 17       	cp	r20, r16
     5dc:	51 07       	cpc	r21, r17
     5de:	62 07       	cpc	r22, r18
     5e0:	73 07       	cpc	r23, r19
     5e2:	20 f4       	brcc	.+8      	; 0x5ec <calculateSpO2+0xa4>
     5e4:	09 83       	std	Y+1, r16	; 0x01
     5e6:	1a 83       	std	Y+2, r17	; 0x02
     5e8:	2b 83       	std	Y+3, r18	; 0x03
     5ea:	3c 83       	std	Y+4, r19	; 0x04
        if (irBuffer[i] < irMin) irMin = irBuffer[i];
     5ec:	49 85       	ldd	r20, Y+9	; 0x09
     5ee:	5a 85       	ldd	r21, Y+10	; 0x0a
     5f0:	6b 85       	ldd	r22, Y+11	; 0x0b
     5f2:	7c 85       	ldd	r23, Y+12	; 0x0c
     5f4:	04 17       	cp	r16, r20
     5f6:	15 07       	cpc	r17, r21
     5f8:	26 07       	cpc	r18, r22
     5fa:	37 07       	cpc	r19, r23
     5fc:	20 f4       	brcc	.+8      	; 0x606 <calculateSpO2+0xbe>
     5fe:	09 87       	std	Y+9, r16	; 0x09
     600:	1a 87       	std	Y+10, r17	; 0x0a
     602:	2b 87       	std	Y+11, r18	; 0x0b
     604:	3c 87       	std	Y+12, r19	; 0x0c
        irSum += irBuffer[i];
     606:	80 0e       	add	r8, r16
     608:	91 1e       	adc	r9, r17
     60a:	a2 1e       	adc	r10, r18
     60c:	b3 1e       	adc	r11, r19
        
        if (redBuffer[i] > redMax) redMax = redBuffer[i];
     60e:	fc 01       	movw	r30, r24
     610:	ee 0f       	add	r30, r30
     612:	ff 1f       	adc	r31, r31
     614:	ee 0f       	add	r30, r30
     616:	ff 1f       	adc	r31, r31
     618:	e1 57       	subi	r30, 0x71	; 113
     61a:	fb 4f       	sbci	r31, 0xFB	; 251
     61c:	00 81       	ld	r16, Z
     61e:	11 81       	ldd	r17, Z+1	; 0x01
     620:	22 81       	ldd	r18, Z+2	; 0x02
     622:	33 81       	ldd	r19, Z+3	; 0x03
     624:	4d 81       	ldd	r20, Y+5	; 0x05
     626:	5e 81       	ldd	r21, Y+6	; 0x06
     628:	6f 81       	ldd	r22, Y+7	; 0x07
     62a:	78 85       	ldd	r23, Y+8	; 0x08
     62c:	40 17       	cp	r20, r16
     62e:	51 07       	cpc	r21, r17
     630:	62 07       	cpc	r22, r18
     632:	73 07       	cpc	r23, r19
     634:	20 f4       	brcc	.+8      	; 0x63e <calculateSpO2+0xf6>
     636:	0d 83       	std	Y+5, r16	; 0x05
     638:	1e 83       	std	Y+6, r17	; 0x06
     63a:	2f 83       	std	Y+7, r18	; 0x07
     63c:	38 87       	std	Y+8, r19	; 0x08
        if (redBuffer[i] < redMin) redMin = redBuffer[i];
     63e:	04 15       	cp	r16, r4
     640:	15 05       	cpc	r17, r5
     642:	26 05       	cpc	r18, r6
     644:	37 05       	cpc	r19, r7
     646:	10 f4       	brcc	.+4      	; 0x64c <calculateSpO2+0x104>
     648:	28 01       	movw	r4, r16
     64a:	39 01       	movw	r6, r18
        redSum += redBuffer[i];
     64c:	c0 0e       	add	r12, r16
     64e:	d1 1e       	adc	r13, r17
     650:	e2 1e       	adc	r14, r18
     652:	f3 1e       	adc	r15, r19
void calculateSpO2(void) {
    uint32_t irMax = 0, irMin = 999999;
    uint32_t redMax = 0, redMin = 999999;
    unsigned long irSum = 0, redSum = 0;
    
    for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	84 36       	cpi	r24, 0x64	; 100
     658:	91 05       	cpc	r25, r1
     65a:	0c f4       	brge	.+2      	; 0x65e <calculateSpO2+0x116>
     65c:	af cf       	rjmp	.-162    	; 0x5bc <calculateSpO2+0x74>
        if (redBuffer[i] > redMax) redMax = redBuffer[i];
        if (redBuffer[i] < redMin) redMin = redBuffer[i];
        redSum += redBuffer[i];
    }
    
    float irAC = (float)(irMax - irMin);
     65e:	69 81       	ldd	r22, Y+1	; 0x01
     660:	7a 81       	ldd	r23, Y+2	; 0x02
     662:	8b 81       	ldd	r24, Y+3	; 0x03
     664:	9c 81       	ldd	r25, Y+4	; 0x04
     666:	29 85       	ldd	r18, Y+9	; 0x09
     668:	3a 85       	ldd	r19, Y+10	; 0x0a
     66a:	4b 85       	ldd	r20, Y+11	; 0x0b
     66c:	5c 85       	ldd	r21, Y+12	; 0x0c
     66e:	62 1b       	sub	r22, r18
     670:	73 0b       	sbc	r23, r19
     672:	84 0b       	sbc	r24, r20
     674:	95 0b       	sbc	r25, r21
     676:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatunsisf>
     67a:	69 83       	std	Y+1, r22	; 0x01
     67c:	7a 83       	std	Y+2, r23	; 0x02
     67e:	8b 83       	std	Y+3, r24	; 0x03
     680:	9c 83       	std	Y+4, r25	; 0x04
    float redAC = (float)(redMax - redMin);
     682:	6d 81       	ldd	r22, Y+5	; 0x05
     684:	7e 81       	ldd	r23, Y+6	; 0x06
     686:	8f 81       	ldd	r24, Y+7	; 0x07
     688:	98 85       	ldd	r25, Y+8	; 0x08
     68a:	64 19       	sub	r22, r4
     68c:	75 09       	sbc	r23, r5
     68e:	86 09       	sbc	r24, r6
     690:	97 09       	sbc	r25, r7
     692:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatunsisf>
     696:	2b 01       	movw	r4, r22
     698:	3c 01       	movw	r6, r24
    float irDC = (float)irSum / (float)SPO2_BUFFER_SIZE;
     69a:	c5 01       	movw	r24, r10
     69c:	b4 01       	movw	r22, r8
     69e:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatunsisf>
     6a2:	20 e0       	ldi	r18, 0x00	; 0
     6a4:	30 e0       	ldi	r19, 0x00	; 0
     6a6:	48 ec       	ldi	r20, 0xC8	; 200
     6a8:	52 e4       	ldi	r21, 0x42	; 66
     6aa:	e1 d7       	rcall	.+4034   	; 0x166e <__divsf3>
     6ac:	4b 01       	movw	r8, r22
     6ae:	5c 01       	movw	r10, r24
    float redDC = (float)redSum / (float)SPO2_BUFFER_SIZE;
     6b0:	c7 01       	movw	r24, r14
     6b2:	b6 01       	movw	r22, r12
     6b4:	0e 94 d0 0b 	call	0x17a0	; 0x17a0 <__floatunsisf>
     6b8:	20 e0       	ldi	r18, 0x00	; 0
     6ba:	30 e0       	ldi	r19, 0x00	; 0
     6bc:	48 ec       	ldi	r20, 0xC8	; 200
     6be:	52 e4       	ldi	r21, 0x42	; 66
     6c0:	d6 d7       	rcall	.+4012   	; 0x166e <__divsf3>
     6c2:	6b 01       	movw	r12, r22
     6c4:	7c 01       	movw	r14, r24
    
    if (irDC != 0 && redDC != 0 && irAC != 0) {
     6c6:	20 e0       	ldi	r18, 0x00	; 0
     6c8:	30 e0       	ldi	r19, 0x00	; 0
     6ca:	a9 01       	movw	r20, r18
     6cc:	c5 01       	movw	r24, r10
     6ce:	b4 01       	movw	r22, r8
     6d0:	ca d7       	rcall	.+3988   	; 0x1666 <__cmpsf2>
     6d2:	88 23       	and	r24, r24
     6d4:	09 f4       	brne	.+2      	; 0x6d8 <calculateSpO2+0x190>
     6d6:	70 c0       	rjmp	.+224    	; 0x7b8 <calculateSpO2+0x270>
     6d8:	20 e0       	ldi	r18, 0x00	; 0
     6da:	30 e0       	ldi	r19, 0x00	; 0
     6dc:	a9 01       	movw	r20, r18
     6de:	c7 01       	movw	r24, r14
     6e0:	b6 01       	movw	r22, r12
     6e2:	c1 d7       	rcall	.+3970   	; 0x1666 <__cmpsf2>
     6e4:	88 23       	and	r24, r24
     6e6:	09 f4       	brne	.+2      	; 0x6ea <calculateSpO2+0x1a2>
     6e8:	67 c0       	rjmp	.+206    	; 0x7b8 <calculateSpO2+0x270>
     6ea:	20 e0       	ldi	r18, 0x00	; 0
     6ec:	30 e0       	ldi	r19, 0x00	; 0
     6ee:	a9 01       	movw	r20, r18
     6f0:	69 81       	ldd	r22, Y+1	; 0x01
     6f2:	7a 81       	ldd	r23, Y+2	; 0x02
     6f4:	8b 81       	ldd	r24, Y+3	; 0x03
     6f6:	9c 81       	ldd	r25, Y+4	; 0x04
     6f8:	b6 d7       	rcall	.+3948   	; 0x1666 <__cmpsf2>
     6fa:	88 23       	and	r24, r24
     6fc:	09 f4       	brne	.+2      	; 0x700 <calculateSpO2+0x1b8>
     6fe:	5c c0       	rjmp	.+184    	; 0x7b8 <calculateSpO2+0x270>
        float redRatio = redAC / redDC;
     700:	a7 01       	movw	r20, r14
     702:	96 01       	movw	r18, r12
     704:	c3 01       	movw	r24, r6
     706:	b2 01       	movw	r22, r4
     708:	b2 d7       	rcall	.+3940   	; 0x166e <__divsf3>
     70a:	6b 01       	movw	r12, r22
     70c:	7c 01       	movw	r14, r24
        float irRatio = irAC / irDC;
     70e:	a5 01       	movw	r20, r10
     710:	94 01       	movw	r18, r8
     712:	69 81       	ldd	r22, Y+1	; 0x01
     714:	7a 81       	ldd	r23, Y+2	; 0x02
     716:	8b 81       	ldd	r24, Y+3	; 0x03
     718:	9c 81       	ldd	r25, Y+4	; 0x04
     71a:	a9 d7       	rcall	.+3922   	; 0x166e <__divsf3>
     71c:	4b 01       	movw	r8, r22
     71e:	5c 01       	movw	r10, r24
        
        if (irRatio != 0) {
     720:	20 e0       	ldi	r18, 0x00	; 0
     722:	30 e0       	ldi	r19, 0x00	; 0
     724:	a9 01       	movw	r20, r18
     726:	9f d7       	rcall	.+3902   	; 0x1666 <__cmpsf2>
     728:	88 23       	and	r24, r24
     72a:	09 f4       	brne	.+2      	; 0x72e <calculateSpO2+0x1e6>
     72c:	45 c0       	rjmp	.+138    	; 0x7b8 <calculateSpO2+0x270>
            float ratio = redRatio / irRatio;
     72e:	a5 01       	movw	r20, r10
     730:	94 01       	movw	r18, r8
     732:	c7 01       	movw	r24, r14
     734:	b6 01       	movw	r22, r12
     736:	9b d7       	rcall	.+3894   	; 0x166e <__divsf3>
            SpO2 = 104.0 - 17.0 * ratio;
     738:	20 e0       	ldi	r18, 0x00	; 0
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	48 e8       	ldi	r20, 0x88	; 136
     73e:	51 e4       	ldi	r21, 0x41	; 65
     740:	0e 94 86 0c 	call	0x190c	; 0x190c <__mulsf3>
     744:	9b 01       	movw	r18, r22
     746:	ac 01       	movw	r20, r24
     748:	60 e0       	ldi	r22, 0x00	; 0
     74a:	70 e0       	ldi	r23, 0x00	; 0
     74c:	80 ed       	ldi	r24, 0xD0	; 208
     74e:	92 e4       	ldi	r25, 0x42	; 66
     750:	25 d7       	rcall	.+3658   	; 0x159c <__subsf3>
     752:	60 93 bd 02 	sts	0x02BD, r22	; 0x8002bd <SpO2>
     756:	70 93 be 02 	sts	0x02BE, r23	; 0x8002be <SpO2+0x1>
     75a:	80 93 bf 02 	sts	0x02BF, r24	; 0x8002bf <SpO2+0x2>
     75e:	90 93 c0 02 	sts	0x02C0, r25	; 0x8002c0 <SpO2+0x3>
            
            if (SpO2 > 100) SpO2 = 100;
     762:	20 e0       	ldi	r18, 0x00	; 0
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	48 ec       	ldi	r20, 0xC8	; 200
     768:	52 e4       	ldi	r21, 0x42	; 66
     76a:	0e 94 82 0c 	call	0x1904	; 0x1904 <__gesf2>
     76e:	18 16       	cp	r1, r24
     770:	64 f4       	brge	.+24     	; 0x78a <calculateSpO2+0x242>
     772:	80 e0       	ldi	r24, 0x00	; 0
     774:	90 e0       	ldi	r25, 0x00	; 0
     776:	a8 ec       	ldi	r26, 0xC8	; 200
     778:	b2 e4       	ldi	r27, 0x42	; 66
     77a:	80 93 bd 02 	sts	0x02BD, r24	; 0x8002bd <SpO2>
     77e:	90 93 be 02 	sts	0x02BE, r25	; 0x8002be <SpO2+0x1>
     782:	a0 93 bf 02 	sts	0x02BF, r26	; 0x8002bf <SpO2+0x2>
     786:	b0 93 c0 02 	sts	0x02C0, r27	; 0x8002c0 <SpO2+0x3>
            if (SpO2 < 70) SpO2 = 0;
     78a:	60 91 bd 02 	lds	r22, 0x02BD	; 0x8002bd <SpO2>
     78e:	70 91 be 02 	lds	r23, 0x02BE	; 0x8002be <SpO2+0x1>
     792:	80 91 bf 02 	lds	r24, 0x02BF	; 0x8002bf <SpO2+0x2>
     796:	90 91 c0 02 	lds	r25, 0x02C0	; 0x8002c0 <SpO2+0x3>
     79a:	20 e0       	ldi	r18, 0x00	; 0
     79c:	30 e0       	ldi	r19, 0x00	; 0
     79e:	4c e8       	ldi	r20, 0x8C	; 140
     7a0:	52 e4       	ldi	r21, 0x42	; 66
     7a2:	61 d7       	rcall	.+3778   	; 0x1666 <__cmpsf2>
     7a4:	88 23       	and	r24, r24
     7a6:	44 f4       	brge	.+16     	; 0x7b8 <calculateSpO2+0x270>
     7a8:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <SpO2>
     7ac:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <SpO2+0x1>
     7b0:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <SpO2+0x2>
     7b4:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <SpO2+0x3>
        }
    }
}
     7b8:	2c 96       	adiw	r28, 0x0c	; 12
     7ba:	0f b6       	in	r0, 0x3f	; 63
     7bc:	f8 94       	cli
     7be:	de bf       	out	0x3e, r29	; 62
     7c0:	0f be       	out	0x3f, r0	; 63
     7c2:	cd bf       	out	0x3d, r28	; 61
     7c4:	df 91       	pop	r29
     7c6:	cf 91       	pop	r28
     7c8:	1f 91       	pop	r17
     7ca:	0f 91       	pop	r16
     7cc:	ff 90       	pop	r15
     7ce:	ef 90       	pop	r14
     7d0:	df 90       	pop	r13
     7d2:	cf 90       	pop	r12
     7d4:	bf 90       	pop	r11
     7d6:	af 90       	pop	r10
     7d8:	9f 90       	pop	r9
     7da:	8f 90       	pop	r8
     7dc:	7f 90       	pop	r7
     7de:	6f 90       	pop	r6
     7e0:	5f 90       	pop	r5
     7e2:	4f 90       	pop	r4
     7e4:	08 95       	ret

000007e6 <resetStats>:

//-----------------------------
//reset bufferi pentru O2 si BPM
void resetStats(void) {
    beatsPerMinute = 0;
     7e6:	10 92 e2 02 	sts	0x02E2, r1	; 0x8002e2 <beatsPerMinute>
     7ea:	10 92 e3 02 	sts	0x02E3, r1	; 0x8002e3 <beatsPerMinute+0x1>
     7ee:	10 92 e4 02 	sts	0x02E4, r1	; 0x8002e4 <beatsPerMinute+0x2>
     7f2:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <beatsPerMinute+0x3>
    beatAvg = 0;
     7f6:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <beatAvg+0x1>
     7fa:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <beatAvg>
    beatCount = 0;
     7fe:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <beatCount+0x1>
     802:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <beatCount>
    lastBeatTime = 0;
     806:	10 92 da 02 	sts	0x02DA, r1	; 0x8002da <lastBeatTime>
     80a:	10 92 db 02 	sts	0x02DB, r1	; 0x8002db <lastBeatTime+0x1>
     80e:	10 92 dc 02 	sts	0x02DC, r1	; 0x8002dc <lastBeatTime+0x2>
     812:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <lastBeatTime+0x3>
    rateSpot = 0;
     816:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <rateSpot>
    SpO2 = 0;
     81a:	10 92 bd 02 	sts	0x02BD, r1	; 0x8002bd <SpO2>
     81e:	10 92 be 02 	sts	0x02BE, r1	; 0x8002be <SpO2+0x1>
     822:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <SpO2+0x2>
     826:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <SpO2+0x3>
    bufferIndex = 0;
     82a:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <bufferIndex+0x1>
     82e:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <bufferIndex>
    bufferReady = 0;
     832:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <bufferReady>
    
    for (uint8_t x = 0; x < RATE_SIZE; x++) {
     836:	80 e0       	ldi	r24, 0x00	; 0
     838:	06 c0       	rjmp	.+12     	; 0x846 <resetStats+0x60>
        rates[x] = 0;
     83a:	e8 2f       	mov	r30, r24
     83c:	f0 e0       	ldi	r31, 0x00	; 0
     83e:	e9 51       	subi	r30, 0x19	; 25
     840:	fd 4f       	sbci	r31, 0xFD	; 253
     842:	10 82       	st	Z, r1
    rateSpot = 0;
    SpO2 = 0;
    bufferIndex = 0;
    bufferReady = 0;
    
    for (uint8_t x = 0; x < RATE_SIZE; x++) {
     844:	8f 5f       	subi	r24, 0xFF	; 255
     846:	84 30       	cpi	r24, 0x04	; 4
     848:	c0 f3       	brcs	.-16     	; 0x83a <resetStats+0x54>
     84a:	20 e0       	ldi	r18, 0x00	; 0
     84c:	30 e0       	ldi	r19, 0x00	; 0
     84e:	15 c0       	rjmp	.+42     	; 0x87a <resetStats+0x94>
        rates[x] = 0;
    }
    for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
        irBuffer[i] = 0;
     850:	c9 01       	movw	r24, r18
     852:	88 0f       	add	r24, r24
     854:	99 1f       	adc	r25, r25
     856:	88 0f       	add	r24, r24
     858:	99 1f       	adc	r25, r25
     85a:	fc 01       	movw	r30, r24
     85c:	e1 50       	subi	r30, 0x01	; 1
     85e:	fd 4f       	sbci	r31, 0xFD	; 253
     860:	10 82       	st	Z, r1
     862:	11 82       	std	Z+1, r1	; 0x01
     864:	12 82       	std	Z+2, r1	; 0x02
     866:	13 82       	std	Z+3, r1	; 0x03
        redBuffer[i] = 0;
     868:	fc 01       	movw	r30, r24
     86a:	e1 57       	subi	r30, 0x71	; 113
     86c:	fb 4f       	sbci	r31, 0xFB	; 251
     86e:	10 82       	st	Z, r1
     870:	11 82       	std	Z+1, r1	; 0x01
     872:	12 82       	std	Z+2, r1	; 0x02
     874:	13 82       	std	Z+3, r1	; 0x03
    bufferReady = 0;
    
    for (uint8_t x = 0; x < RATE_SIZE; x++) {
        rates[x] = 0;
    }
    for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
     876:	2f 5f       	subi	r18, 0xFF	; 255
     878:	3f 4f       	sbci	r19, 0xFF	; 255
     87a:	24 36       	cpi	r18, 0x64	; 100
     87c:	31 05       	cpc	r19, r1
     87e:	44 f3       	brlt	.-48     	; 0x850 <resetStats+0x6a>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	90 e0       	ldi	r25, 0x00	; 0
     884:	0c c0       	rjmp	.+24     	; 0x89e <resetStats+0xb8>
        irBuffer[i] = 0;
        redBuffer[i] = 0;
    }
    for (int i = 0; i < AVG_SIZE; i++) {
        irAvgBuffer[i] = 0;
     886:	fc 01       	movw	r30, r24
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	e5 51       	subi	r30, 0x15	; 21
     892:	fd 4f       	sbci	r31, 0xFD	; 253
     894:	10 82       	st	Z, r1
     896:	11 82       	std	Z+1, r1	; 0x01
     898:	12 82       	std	Z+2, r1	; 0x02
     89a:	13 82       	std	Z+3, r1	; 0x03
    }
    for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
        irBuffer[i] = 0;
        redBuffer[i] = 0;
    }
    for (int i = 0; i < AVG_SIZE; i++) {
     89c:	01 96       	adiw	r24, 0x01	; 1
     89e:	85 30       	cpi	r24, 0x05	; 5
     8a0:	91 05       	cpc	r25, r1
     8a2:	8c f3       	brlt	.-30     	; 0x886 <resetStats+0xa0>
        irAvgBuffer[i] = 0;
    }
}
     8a4:	08 95       	ret

000008a6 <MAX30102_Start>:
//-----------------------------

//Logica implementare functie senzor.

void MAX30102_Start(void){
     8a6:	cf 93       	push	r28
     8a8:	df 93       	push	r29
     8aa:	cd b7       	in	r28, 0x3d	; 61
     8ac:	de b7       	in	r29, 0x3e	; 62
     8ae:	e2 97       	sbiw	r28, 0x32	; 50
     8b0:	0f b6       	in	r0, 0x3f	; 63
     8b2:	f8 94       	cli
     8b4:	de bf       	out	0x3e, r29	; 62
     8b6:	0f be       	out	0x3f, r0	; 63
     8b8:	cd bf       	out	0x3d, r28	; 61
    max30102_check();
     8ba:	5b dd       	rcall	.-1354   	; 0x372 <max30102_check>

    //setup senzor
    max30102_setup(40, SAMPLEAVG_4, SAMPLERATE_100, PULSEWIDTH_411, ADCRANGE_4096);
     8bc:	00 e2       	ldi	r16, 0x20	; 32
     8be:	23 e0       	ldi	r18, 0x03	; 3
     8c0:	44 e0       	ldi	r20, 0x04	; 4
     8c2:	60 e4       	ldi	r22, 0x40	; 64
     8c4:	88 e2       	ldi	r24, 0x28	; 40
     8c6:	7e dd       	rcall	.-1284   	; 0x3c4 <max30102_setup>
    
    max30102_write_reg(MAX30102_LED1_PULSEAMP, 0x1F);
     8c8:	6f e1       	ldi	r22, 0x1F	; 31
     8ca:	8c e0       	ldi	r24, 0x0C	; 12
     8cc:	45 dc       	rcall	.-1910   	; 0x158 <max30102_write_reg>
    max30102_write_reg(MAX30102_LED2_PULSEAMP, 40);
     8ce:	68 e2       	ldi	r22, 0x28	; 40
     8d0:	8d e0       	ldi	r24, 0x0D	; 13
     8d2:	42 dc       	rcall	.-1916   	; 0x158 <max30102_write_reg>
     8d4:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8d6:	37 ea       	ldi	r19, 0xA7	; 167
     8d8:	41 e6       	ldi	r20, 0x61	; 97
     8da:	21 50       	subi	r18, 0x01	; 1
     8dc:	30 40       	sbci	r19, 0x00	; 0
     8de:	40 40       	sbci	r20, 0x00	; 0
     8e0:	e1 f7       	brne	.-8      	; 0x8da <MAX30102_Start+0x34>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <MAX30102_Start+0x3e>
     8e4:	00 00       	nop
     8e6:	e0 e2       	ldi	r30, 0x20	; 32
     8e8:	f2 e0       	ldi	r31, 0x02	; 2
     8ea:	07 c0       	rjmp	.+14     	; 0x8fa <MAX30102_Start+0x54>
     8ec:	31 96       	adiw	r30, 0x01	; 1
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
     8ee:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     8f2:	95 ff       	sbrs	r25, 5
     8f4:	fc cf       	rjmp	.-8      	; 0x8ee <MAX30102_Start+0x48>
     8f6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     8fa:	80 81       	ld	r24, Z
     8fc:	81 11       	cpse	r24, r1
    _delay_ms(2000);

    uart_puts("Astept deget\r\n");
    
    resetStats();
     8fe:	f6 cf       	rjmp	.-20     	; 0x8ec <MAX30102_Start+0x46>
     900:	72 df       	rcall	.-284    	; 0x7e6 <resetStats>
    while(1) {
        uint8_t readPtr = max30102_get_read_ptr();
     902:	89 dd       	rcall	.-1262   	; 0x416 <max30102_get_read_ptr>
     904:	18 2f       	mov	r17, r24
     906:	8a dd       	rcall	.-1260   	; 0x41c <max30102_get_write_ptr>
        uint8_t writePtr = max30102_get_write_ptr();
     908:	18 13       	cpse	r17, r24
     90a:	07 c0       	rjmp	.+14     	; 0x91a <MAX30102_Start+0x74>
        
        if (readPtr == writePtr) {
     90c:	8f e9       	ldi	r24, 0x9F	; 159
     90e:	9f e0       	ldi	r25, 0x0F	; 15
     910:	01 97       	sbiw	r24, 0x01	; 1
     912:	f1 f7       	brne	.-4      	; 0x910 <MAX30102_Start+0x6a>
     914:	00 c0       	rjmp	.+0      	; 0x916 <MAX30102_Start+0x70>
     916:	00 00       	nop
     918:	f4 cf       	rjmp	.-24     	; 0x902 <MAX30102_Start+0x5c>
            _delay_ms(1);
            continue;
     91a:	be 01       	movw	r22, r28
        }
        
        uint32_t redValue, irValue32;
        max30102_read_sample(&redValue, &irValue32);
     91c:	6b 5e       	subi	r22, 0xEB	; 235
     91e:	7f 4f       	sbci	r23, 0xFF	; 255
     920:	ce 01       	movw	r24, r28
     922:	49 96       	adiw	r24, 0x19	; 25
     924:	7e dd       	rcall	.-1284   	; 0x422 <max30102_read_sample>
     926:	4d 89       	ldd	r20, Y+21	; 0x15
     928:	5e 89       	ldd	r21, Y+22	; 0x16
        irValue = (long)irValue32;
     92a:	6f 89       	ldd	r22, Y+23	; 0x17
     92c:	78 8d       	ldd	r23, Y+24	; 0x18
     92e:	40 93 d6 02 	sts	0x02D6, r20	; 0x8002d6 <irValue>
     932:	50 93 d7 02 	sts	0x02D7, r21	; 0x8002d7 <irValue+0x1>
     936:	60 93 d8 02 	sts	0x02D8, r22	; 0x8002d8 <irValue+0x2>
     93a:	70 93 d9 02 	sts	0x02D9, r23	; 0x8002d9 <irValue+0x3>
     93e:	49 8c       	ldd	r4, Y+25	; 0x19
     940:	49 a6       	std	Y+41, r4	; 0x29
        long redVal = (long)redValue;
     942:	5a 8c       	ldd	r5, Y+26	; 0x1a
     944:	5a a6       	std	Y+42, r5	; 0x2a
     946:	2b 8c       	ldd	r2, Y+27	; 0x1b
     948:	3c 8c       	ldd	r3, Y+28	; 0x1c
     94a:	40 35       	cpi	r20, 0x50	; 80
     94c:	23 ec       	ldi	r18, 0xC3	; 195
        
        if (irValue < 50000) {
     94e:	52 07       	cpc	r21, r18
     950:	61 05       	cpc	r22, r1
     952:	71 05       	cpc	r23, r1
     954:	4c f0       	brlt	.+18     	; 0x968 <MAX30102_Start+0xc2>
     956:	18 c0       	rjmp	.+48     	; 0x988 <MAX30102_Start+0xe2>
     958:	31 96       	adiw	r30, 0x01	; 1
     95a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     95e:	85 ff       	sbrs	r24, 5
     960:	fc cf       	rjmp	.-8      	; 0x95a <MAX30102_Start+0xb4>
     962:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     966:	02 c0       	rjmp	.+4      	; 0x96c <MAX30102_Start+0xc6>
     968:	ef e2       	ldi	r30, 0x2F	; 47
     96a:	f2 e0       	ldi	r31, 0x02	; 2
     96c:	90 81       	ld	r25, Z
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     96e:	91 11       	cpse	r25, r1
     970:	f3 cf       	rjmp	.-26     	; 0x958 <MAX30102_Start+0xb2>
     972:	39 df       	rcall	.-398    	; 0x7e6 <resetStats>
            uart_puts("Fara deget!\r\n");
            resetStats();
     974:	3f ef       	ldi	r19, 0xFF	; 255
     976:	49 e6       	ldi	r20, 0x69	; 105
     978:	58 e1       	ldi	r21, 0x18	; 24
     97a:	31 50       	subi	r19, 0x01	; 1
     97c:	40 40       	sbci	r20, 0x00	; 0
     97e:	50 40       	sbci	r21, 0x00	; 0
     980:	e1 f7       	brne	.-8      	; 0x97a <MAX30102_Start+0xd4>
     982:	00 c0       	rjmp	.+0      	; 0x984 <MAX30102_Start+0xde>
     984:	00 00       	nop
     986:	bd cf       	rjmp	.-134    	; 0x902 <MAX30102_Start+0x5c>
     988:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <avgIndex>
            _delay_ms(500);
            continue;
        }
        
        irAvgBuffer[avgIndex] = irValue;
     98c:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <avgIndex+0x1>
     990:	fc 01       	movw	r30, r24
     992:	ee 0f       	add	r30, r30
     994:	ff 1f       	adc	r31, r31
     996:	ee 0f       	add	r30, r30
     998:	ff 1f       	adc	r31, r31
     99a:	e5 51       	subi	r30, 0x15	; 21
     99c:	fd 4f       	sbci	r31, 0xFD	; 253
     99e:	40 83       	st	Z, r20
     9a0:	51 83       	std	Z+1, r21	; 0x01
     9a2:	62 83       	std	Z+2, r22	; 0x02
     9a4:	73 83       	std	Z+3, r23	; 0x03
     9a6:	01 96       	adiw	r24, 0x01	; 1
     9a8:	65 e0       	ldi	r22, 0x05	; 5
        avgIndex = (avgIndex + 1) % AVG_SIZE;
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <__divmodhi4>
     9b0:	90 93 c9 02 	sts	0x02C9, r25	; 0x8002c9 <avgIndex+0x1>
     9b4:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <avgIndex>
     9b8:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <irSmooth>
        
        irSmooth = 0;
     9bc:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <irSmooth+0x1>
     9c0:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <irSmooth+0x2>
     9c4:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <irSmooth+0x3>
     9c8:	20 e0       	ldi	r18, 0x00	; 0
     9ca:	30 e0       	ldi	r19, 0x00	; 0
        for (int i = 0; i < AVG_SIZE; i++) {
     9cc:	21 c0       	rjmp	.+66     	; 0xa10 <MAX30102_Start+0x16a>
     9ce:	f9 01       	movw	r30, r18
     9d0:	ee 0f       	add	r30, r30
            irSmooth += irAvgBuffer[i];
     9d2:	ff 1f       	adc	r31, r31
     9d4:	ee 0f       	add	r30, r30
     9d6:	ff 1f       	adc	r31, r31
     9d8:	e5 51       	subi	r30, 0x15	; 21
     9da:	fd 4f       	sbci	r31, 0xFD	; 253
     9dc:	80 81       	ld	r24, Z
     9de:	91 81       	ldd	r25, Z+1	; 0x01
     9e0:	a2 81       	ldd	r26, Z+2	; 0x02
     9e2:	b3 81       	ldd	r27, Z+3	; 0x03
     9e4:	40 91 c4 02 	lds	r20, 0x02C4	; 0x8002c4 <irSmooth>
     9e8:	50 91 c5 02 	lds	r21, 0x02C5	; 0x8002c5 <irSmooth+0x1>
     9ec:	60 91 c6 02 	lds	r22, 0x02C6	; 0x8002c6 <irSmooth+0x2>
     9f0:	70 91 c7 02 	lds	r23, 0x02C7	; 0x8002c7 <irSmooth+0x3>
     9f4:	84 0f       	add	r24, r20
     9f6:	95 1f       	adc	r25, r21
     9f8:	a6 1f       	adc	r26, r22
     9fa:	b7 1f       	adc	r27, r23
     9fc:	80 93 c4 02 	sts	0x02C4, r24	; 0x8002c4 <irSmooth>
     a00:	90 93 c5 02 	sts	0x02C5, r25	; 0x8002c5 <irSmooth+0x1>
     a04:	a0 93 c6 02 	sts	0x02C6, r26	; 0x8002c6 <irSmooth+0x2>
     a08:	b0 93 c7 02 	sts	0x02C7, r27	; 0x8002c7 <irSmooth+0x3>
     a0c:	2f 5f       	subi	r18, 0xFF	; 255
     a0e:	3f 4f       	sbci	r19, 0xFF	; 255
        
        irAvgBuffer[avgIndex] = irValue;
        avgIndex = (avgIndex + 1) % AVG_SIZE;
        
        irSmooth = 0;
        for (int i = 0; i < AVG_SIZE; i++) {
     a10:	25 30       	cpi	r18, 0x05	; 5
     a12:	31 05       	cpc	r19, r1
     a14:	e4 f2       	brlt	.-72     	; 0x9ce <MAX30102_Start+0x128>
     a16:	60 91 c4 02 	lds	r22, 0x02C4	; 0x8002c4 <irSmooth>
            irSmooth += irAvgBuffer[i];
        }
        irSmooth /= AVG_SIZE;
     a1a:	70 91 c5 02 	lds	r23, 0x02C5	; 0x8002c5 <irSmooth+0x1>
     a1e:	80 91 c6 02 	lds	r24, 0x02C6	; 0x8002c6 <irSmooth+0x2>
     a22:	90 91 c7 02 	lds	r25, 0x02C7	; 0x8002c7 <irSmooth+0x3>
     a26:	25 e0       	ldi	r18, 0x05	; 5
     a28:	30 e0       	ldi	r19, 0x00	; 0
     a2a:	40 e0       	ldi	r20, 0x00	; 0
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <__divmodsi4>
     a32:	69 01       	movw	r12, r18
     a34:	7a 01       	movw	r14, r20
     a36:	20 93 c4 02 	sts	0x02C4, r18	; 0x8002c4 <irSmooth>
     a3a:	30 93 c5 02 	sts	0x02C5, r19	; 0x8002c5 <irSmooth+0x1>
     a3e:	40 93 c6 02 	sts	0x02C6, r20	; 0x8002c6 <irSmooth+0x2>
     a42:	50 93 c7 02 	sts	0x02C7, r21	; 0x8002c7 <irSmooth+0x3>
     a46:	80 91 d2 02 	lds	r24, 0x02D2	; 0x8002d2 <lastIR>
        
        derivative = irSmooth - lastIR;
     a4a:	90 91 d3 02 	lds	r25, 0x02D3	; 0x8002d3 <lastIR+0x1>
     a4e:	a0 91 d4 02 	lds	r26, 0x02D4	; 0x8002d4 <lastIR+0x2>
     a52:	b0 91 d5 02 	lds	r27, 0x02D5	; 0x8002d5 <lastIR+0x3>
     a56:	ba 01       	movw	r22, r20
     a58:	a9 01       	movw	r20, r18
     a5a:	48 1b       	sub	r20, r24
     a5c:	59 0b       	sbc	r21, r25
     a5e:	6a 0b       	sbc	r22, r26
     a60:	7b 0b       	sbc	r23, r27
     a62:	40 93 ce 02 	sts	0x02CE, r20	; 0x8002ce <derivative>
     a66:	50 93 cf 02 	sts	0x02CF, r21	; 0x8002cf <derivative+0x1>
     a6a:	60 93 d0 02 	sts	0x02D0, r22	; 0x8002d0 <derivative+0x2>
     a6e:	70 93 d1 02 	sts	0x02D1, r23	; 0x8002d1 <derivative+0x3>
     a72:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <lastDerivative>

        if (lastDerivative > 20 && derivative < -20 && irSmooth > 100000) {
     a76:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <lastDerivative+0x1>
     a7a:	a0 91 cc 02 	lds	r26, 0x02CC	; 0x8002cc <lastDerivative+0x2>
     a7e:	b0 91 cd 02 	lds	r27, 0x02CD	; 0x8002cd <lastDerivative+0x3>
     a82:	45 97       	sbiw	r24, 0x15	; 21
     a84:	a1 05       	cpc	r26, r1
     a86:	b1 05       	cpc	r27, r1
     a88:	0c f4       	brge	.+2      	; 0xa8c <MAX30102_Start+0x1e6>
     a8a:	a3 c0       	rjmp	.+326    	; 0xbd2 <MAX30102_Start+0x32c>
     a8c:	4c 3e       	cpi	r20, 0xEC	; 236
     a8e:	5f 4f       	sbci	r21, 0xFF	; 255
     a90:	6f 4f       	sbci	r22, 0xFF	; 255
     a92:	7f 4f       	sbci	r23, 0xFF	; 255
     a94:	0c f0       	brlt	.+2      	; 0xa98 <MAX30102_Start+0x1f2>
     a96:	9d c0       	rjmp	.+314    	; 0xbd2 <MAX30102_Start+0x32c>
     a98:	91 ea       	ldi	r25, 0xA1	; 161
     a9a:	c9 16       	cp	r12, r25
     a9c:	96 e8       	ldi	r25, 0x86	; 134
     a9e:	d9 06       	cpc	r13, r25
     aa0:	91 e0       	ldi	r25, 0x01	; 1
     aa2:	e9 06       	cpc	r14, r25
     aa4:	f1 04       	cpc	r15, r1
     aa6:	0c f4       	brge	.+2      	; 0xaaa <MAX30102_Start+0x204>
     aa8:	94 c0       	rjmp	.+296    	; 0xbd2 <MAX30102_Start+0x32c>
     aaa:	20 dd       	rcall	.-1472   	; 0x4ec <millis>
            unsigned long currentTime = millis();
     aac:	6b 01       	movw	r12, r22
     aae:	7c 01       	movw	r14, r24
     ab0:	00 91 da 02 	lds	r16, 0x02DA	; 0x8002da <lastBeatTime>
            unsigned long timeDiff = currentTime - lastBeatTime;
     ab4:	10 91 db 02 	lds	r17, 0x02DB	; 0x8002db <lastBeatTime+0x1>
     ab8:	20 91 dc 02 	lds	r18, 0x02DC	; 0x8002dc <lastBeatTime+0x2>
     abc:	30 91 dd 02 	lds	r19, 0x02DD	; 0x8002dd <lastBeatTime+0x3>
     ac0:	60 1b       	sub	r22, r16
     ac2:	71 0b       	sbc	r23, r17
     ac4:	82 0b       	sbc	r24, r18
     ac6:	93 0b       	sbc	r25, r19
     ac8:	4b 01       	movw	r8, r22
     aca:	5c 01       	movw	r10, r24
            
            if (timeDiff > 350 && timeDiff < 2500 && lastBeatTime > 0) {
     acc:	af e5       	ldi	r26, 0x5F	; 95
     ace:	8a 1a       	sub	r8, r26
     ad0:	a1 e0       	ldi	r26, 0x01	; 1
     ad2:	9a 0a       	sbc	r9, r26
     ad4:	a1 08       	sbc	r10, r1
     ad6:	b1 08       	sbc	r11, r1
     ad8:	b5 e6       	ldi	r27, 0x65	; 101
     ada:	8b 16       	cp	r8, r27
     adc:	b8 e0       	ldi	r27, 0x08	; 8
     ade:	9b 06       	cpc	r9, r27
     ae0:	a1 04       	cpc	r10, r1
     ae2:	b1 04       	cpc	r11, r1
     ae4:	08 f0       	brcs	.+2      	; 0xae8 <MAX30102_Start+0x242>
     ae6:	6d c0       	rjmp	.+218    	; 0xbc2 <MAX30102_Start+0x31c>
     ae8:	01 2b       	or	r16, r17
     aea:	02 2b       	or	r16, r18
     aec:	03 2b       	or	r16, r19
     aee:	09 f4       	brne	.+2      	; 0xaf2 <MAX30102_Start+0x24c>
     af0:	68 c0       	rjmp	.+208    	; 0xbc2 <MAX30102_Start+0x31c>
                beatsPerMinute = 60000.0 / (float)timeDiff;
     af2:	56 d6       	rcall	.+3244   	; 0x17a0 <__floatunsisf>
     af4:	9b 01       	movw	r18, r22
     af6:	ac 01       	movw	r20, r24
     af8:	60 e0       	ldi	r22, 0x00	; 0
     afa:	70 e6       	ldi	r23, 0x60	; 96
     afc:	8a e6       	ldi	r24, 0x6A	; 106
     afe:	97 e4       	ldi	r25, 0x47	; 71
     b00:	b6 d5       	rcall	.+2924   	; 0x166e <__divsf3>
     b02:	4b 01       	movw	r8, r22
     b04:	5c 01       	movw	r10, r24
     b06:	60 93 e2 02 	sts	0x02E2, r22	; 0x8002e2 <beatsPerMinute>
     b0a:	70 93 e3 02 	sts	0x02E3, r23	; 0x8002e3 <beatsPerMinute+0x1>
     b0e:	80 93 e4 02 	sts	0x02E4, r24	; 0x8002e4 <beatsPerMinute+0x2>
     b12:	90 93 e5 02 	sts	0x02E5, r25	; 0x8002e5 <beatsPerMinute+0x3>
     b16:	20 e0       	ldi	r18, 0x00	; 0
                
                if (beatsPerMinute >= 40 && beatsPerMinute <= 180) {
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e2       	ldi	r20, 0x20	; 32
     b1c:	52 e4       	ldi	r21, 0x42	; 66
     b1e:	f2 d6       	rcall	.+3556   	; 0x1904 <__gesf2>
     b20:	88 23       	and	r24, r24
     b22:	0c f4       	brge	.+2      	; 0xb26 <MAX30102_Start+0x280>
     b24:	4e c0       	rjmp	.+156    	; 0xbc2 <MAX30102_Start+0x31c>
     b26:	20 e0       	ldi	r18, 0x00	; 0
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	44 e3       	ldi	r20, 0x34	; 52
     b2c:	53 e4       	ldi	r21, 0x43	; 67
     b2e:	c5 01       	movw	r24, r10
     b30:	b4 01       	movw	r22, r8
     b32:	99 d5       	rcall	.+2866   	; 0x1666 <__cmpsf2>
     b34:	18 16       	cp	r1, r24
     b36:	0c f4       	brge	.+2      	; 0xb3a <MAX30102_Start+0x294>
     b38:	44 c0       	rjmp	.+136    	; 0xbc2 <MAX30102_Start+0x31c>
     b3a:	00 91 e6 02 	lds	r16, 0x02E6	; 0x8002e6 <rateSpot>
                    rates[rateSpot++] = (uint8_t)beatsPerMinute;
     b3e:	77 24       	eor	r7, r7
     b40:	73 94       	inc	r7
     b42:	70 0e       	add	r7, r16
     b44:	10 e0       	ldi	r17, 0x00	; 0
     b46:	c5 01       	movw	r24, r10
     b48:	b4 01       	movw	r22, r8
     b4a:	fe d5       	rcall	.+3068   	; 0x1748 <__fixunssfsi>
     b4c:	f8 01       	movw	r30, r16
     b4e:	e9 51       	subi	r30, 0x19	; 25
     b50:	fd 4f       	sbci	r31, 0xFD	; 253
     b52:	60 83       	st	Z, r22
     b54:	87 2d       	mov	r24, r7
     b56:	83 70       	andi	r24, 0x03	; 3
                    rateSpot %= RATE_SIZE;
     b58:	80 93 e6 02 	sts	0x02E6, r24	; 0x8002e6 <rateSpot>
     b5c:	10 92 e1 02 	sts	0x02E1, r1	; 0x8002e1 <beatAvg+0x1>
                    
                    beatAvg = 0;
     b60:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <beatAvg>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	60 e0       	ldi	r22, 0x00	; 0
                    int validBeats = 0;
                    for (uint8_t x = 0; x < RATE_SIZE; x++) {
     b68:	70 e0       	ldi	r23, 0x00	; 0
                if (beatsPerMinute >= 40 && beatsPerMinute <= 180) {
                    rates[rateSpot++] = (uint8_t)beatsPerMinute;
                    rateSpot %= RATE_SIZE;
                    
                    beatAvg = 0;
                    int validBeats = 0;
     b6a:	14 c0       	rjmp	.+40     	; 0xb94 <MAX30102_Start+0x2ee>
     b6c:	e8 2f       	mov	r30, r24
                    for (uint8_t x = 0; x < RATE_SIZE; x++) {
     b6e:	f0 e0       	ldi	r31, 0x00	; 0
                        if (rates[x] > 0) {
     b70:	e9 51       	subi	r30, 0x19	; 25
     b72:	fd 4f       	sbci	r31, 0xFD	; 253
     b74:	90 81       	ld	r25, Z
     b76:	99 23       	and	r25, r25
     b78:	61 f0       	breq	.+24     	; 0xb92 <MAX30102_Start+0x2ec>
     b7a:	20 91 e0 02 	lds	r18, 0x02E0	; 0x8002e0 <beatAvg>
                            beatAvg += rates[x];
     b7e:	30 91 e1 02 	lds	r19, 0x02E1	; 0x8002e1 <beatAvg+0x1>
     b82:	29 0f       	add	r18, r25
     b84:	31 1d       	adc	r19, r1
     b86:	30 93 e1 02 	sts	0x02E1, r19	; 0x8002e1 <beatAvg+0x1>
     b8a:	20 93 e0 02 	sts	0x02E0, r18	; 0x8002e0 <beatAvg>
     b8e:	6f 5f       	subi	r22, 0xFF	; 255
                            validBeats++;
     b90:	7f 4f       	sbci	r23, 0xFF	; 255
     b92:	8f 5f       	subi	r24, 0xFF	; 255
                    rates[rateSpot++] = (uint8_t)beatsPerMinute;
                    rateSpot %= RATE_SIZE;
                    
                    beatAvg = 0;
                    int validBeats = 0;
                    for (uint8_t x = 0; x < RATE_SIZE; x++) {
     b94:	84 30       	cpi	r24, 0x04	; 4
     b96:	50 f3       	brcs	.-44     	; 0xb6c <MAX30102_Start+0x2c6>
     b98:	16 16       	cp	r1, r22
                        if (rates[x] > 0) {
                            beatAvg += rates[x];
                            validBeats++;
                        }
                    }
                    if (validBeats > 0) {
     b9a:	17 06       	cpc	r1, r23
     b9c:	4c f4       	brge	.+18     	; 0xbb0 <MAX30102_Start+0x30a>
     b9e:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <beatAvg>
                        beatAvg /= validBeats;
     ba2:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <beatAvg+0x1>
     ba6:	15 d7       	rcall	.+3626   	; 0x19d2 <__divmodhi4>
     ba8:	70 93 e1 02 	sts	0x02E1, r23	; 0x8002e1 <beatAvg+0x1>
     bac:	60 93 e0 02 	sts	0x02E0, r22	; 0x8002e0 <beatAvg>
     bb0:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <beatCount>
                    }
                    
                    beatCount++;
     bb4:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <beatCount+0x1>
     bb8:	01 96       	adiw	r24, 0x01	; 1
     bba:	90 93 df 02 	sts	0x02DF, r25	; 0x8002df <beatCount+0x1>
     bbe:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <beatCount>
     bc2:	c0 92 da 02 	sts	0x02DA, r12	; 0x8002da <lastBeatTime>
                }
            }
            
            lastBeatTime = currentTime;
     bc6:	d0 92 db 02 	sts	0x02DB, r13	; 0x8002db <lastBeatTime+0x1>
     bca:	e0 92 dc 02 	sts	0x02DC, r14	; 0x8002dc <lastBeatTime+0x2>
     bce:	f0 92 dd 02 	sts	0x02DD, r15	; 0x8002dd <lastBeatTime+0x3>
     bd2:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <derivative>
        }
        
        lastDerivative = derivative;
     bd6:	90 91 cf 02 	lds	r25, 0x02CF	; 0x8002cf <derivative+0x1>
     bda:	a0 91 d0 02 	lds	r26, 0x02D0	; 0x8002d0 <derivative+0x2>
     bde:	b0 91 d1 02 	lds	r27, 0x02D1	; 0x8002d1 <derivative+0x3>
     be2:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <lastDerivative>
     be6:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <lastDerivative+0x1>
     bea:	a0 93 cc 02 	sts	0x02CC, r26	; 0x8002cc <lastDerivative+0x2>
     bee:	b0 93 cd 02 	sts	0x02CD, r27	; 0x8002cd <lastDerivative+0x3>
     bf2:	80 91 c4 02 	lds	r24, 0x02C4	; 0x8002c4 <irSmooth>
        lastIR = irSmooth;
     bf6:	90 91 c5 02 	lds	r25, 0x02C5	; 0x8002c5 <irSmooth+0x1>
     bfa:	a0 91 c6 02 	lds	r26, 0x02C6	; 0x8002c6 <irSmooth+0x2>
     bfe:	b0 91 c7 02 	lds	r27, 0x02C7	; 0x8002c7 <irSmooth+0x3>
     c02:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <lastIR>
     c06:	90 93 d3 02 	sts	0x02D3, r25	; 0x8002d3 <lastIR+0x1>
     c0a:	a0 93 d4 02 	sts	0x02D4, r26	; 0x8002d4 <lastIR+0x2>
     c0e:	b0 93 d5 02 	sts	0x02D5, r27	; 0x8002d5 <lastIR+0x3>
     c12:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bufferIndex>
        
        irBuffer[bufferIndex] = irValue32;
     c16:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <bufferIndex+0x1>
     c1a:	9c 01       	movw	r18, r24
     c1c:	22 0f       	add	r18, r18
     c1e:	33 1f       	adc	r19, r19
     c20:	22 0f       	add	r18, r18
     c22:	33 1f       	adc	r19, r19
     c24:	f9 01       	movw	r30, r18
     c26:	e1 50       	subi	r30, 0x01	; 1
     c28:	fd 4f       	sbci	r31, 0xFD	; 253
     c2a:	4d 89       	ldd	r20, Y+21	; 0x15
     c2c:	5e 89       	ldd	r21, Y+22	; 0x16
     c2e:	6f 89       	ldd	r22, Y+23	; 0x17
     c30:	78 8d       	ldd	r23, Y+24	; 0x18
     c32:	40 83       	st	Z, r20
     c34:	51 83       	std	Z+1, r21	; 0x01
     c36:	62 83       	std	Z+2, r22	; 0x02
     c38:	73 83       	std	Z+3, r23	; 0x03
     c3a:	f9 01       	movw	r30, r18
     c3c:	e1 57       	subi	r30, 0x71	; 113
        redBuffer[bufferIndex] = redValue;
     c3e:	fb 4f       	sbci	r31, 0xFB	; 251
     c40:	49 8d       	ldd	r20, Y+25	; 0x19
     c42:	5a 8d       	ldd	r21, Y+26	; 0x1a
     c44:	6b 8d       	ldd	r22, Y+27	; 0x1b
     c46:	7c 8d       	ldd	r23, Y+28	; 0x1c
     c48:	40 83       	st	Z, r20
     c4a:	51 83       	std	Z+1, r21	; 0x01
     c4c:	62 83       	std	Z+2, r22	; 0x02
     c4e:	73 83       	std	Z+3, r23	; 0x03
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	90 93 c3 02 	sts	0x02C3, r25	; 0x8002c3 <bufferIndex+0x1>
        bufferIndex++;
     c56:	80 93 c2 02 	sts	0x02C2, r24	; 0x8002c2 <bufferIndex>
     c5a:	84 36       	cpi	r24, 0x64	; 100
     c5c:	91 05       	cpc	r25, r1
        
        if (bufferIndex >= SPO2_BUFFER_SIZE) {
     c5e:	3c f0       	brlt	.+14     	; 0xc6e <MAX30102_Start+0x3c8>
     c60:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <bufferIndex+0x1>
            bufferIndex = 0;
     c64:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <bufferIndex>
     c68:	81 e0       	ldi	r24, 0x01	; 1
     c6a:	80 93 c1 02 	sts	0x02C1, r24	; 0x8002c1 <bufferReady>
            bufferReady = 1;
     c6e:	80 91 c1 02 	lds	r24, 0x02C1	; 0x8002c1 <bufferReady>
        }
        
        if (bufferReady && beatCount >= 3) {
     c72:	88 23       	and	r24, r24
     c74:	31 f0       	breq	.+12     	; 0xc82 <MAX30102_Start+0x3dc>
     c76:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <beatCount>
     c7a:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <beatCount+0x1>
     c7e:	03 97       	sbiw	r24, 0x03	; 3
     c80:	1c f4       	brge	.+6      	; 0xc88 <MAX30102_Start+0x3e2>
     c82:	e6 e8       	ldi	r30, 0x86	; 134
     c84:	f2 e0       	ldi	r31, 0x02	; 2
     c86:	92 c2       	rjmp	.+1316   	; 0x11ac <__EEPROM_REGION_LENGTH__+0x1ac>
     c88:	5f dc       	rcall	.-1858   	; 0x548 <calculateSpO2>
            calculateSpO2();
     c8a:	80 91 b8 02 	lds	r24, 0x02B8	; 0x8002b8 <__data_end>
            

            static uint8_t dbgCnt = 0;
            if (++dbgCnt >= 100) {
     c8e:	8f 5f       	subi	r24, 0xFF	; 255
     c90:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <__data_end>
     c94:	84 36       	cpi	r24, 0x64	; 100
     c96:	a8 f3       	brcs	.-22     	; 0xc82 <MAX30102_Start+0x3dc>
     c98:	10 92 b8 02 	sts	0x02B8, r1	; 0x8002b8 <__data_end>
                dbgCnt = 0;
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	90 e0       	ldi	r25, 0x00	; 0
                uint32_t irMax = 0, irMin = 999999, redMax = 0, redMin = 999999;
                uint32_t irSum = 0, redSum = 0;
                for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
     ca0:	81 2c       	mov	r8, r1
     ca2:	91 2c       	mov	r9, r1

            static uint8_t dbgCnt = 0;
            if (++dbgCnt >= 100) {
                dbgCnt = 0;
                uint32_t irMax = 0, irMin = 999999, redMax = 0, redMin = 999999;
                uint32_t irSum = 0, redSum = 0;
     ca4:	54 01       	movw	r10, r8
     ca6:	c1 2c       	mov	r12, r1
     ca8:	d1 2c       	mov	r13, r1
     caa:	76 01       	movw	r14, r12
     cac:	0f 2e       	mov	r0, r31
     cae:	ff e3       	ldi	r31, 0x3F	; 63
            

            static uint8_t dbgCnt = 0;
            if (++dbgCnt >= 100) {
                dbgCnt = 0;
                uint32_t irMax = 0, irMin = 999999, redMax = 0, redMin = 999999;
     cb0:	4f 2e       	mov	r4, r31
     cb2:	f2 e4       	ldi	r31, 0x42	; 66
     cb4:	5f 2e       	mov	r5, r31
     cb6:	ff e0       	ldi	r31, 0x0F	; 15
     cb8:	6f 2e       	mov	r6, r31
     cba:	71 2c       	mov	r7, r1
     cbc:	f0 2d       	mov	r31, r0
     cbe:	1d a2       	std	Y+37, r1	; 0x25
     cc0:	1e a2       	std	Y+38, r1	; 0x26
     cc2:	1f a2       	std	Y+39, r1	; 0x27
     cc4:	18 a6       	std	Y+40, r1	; 0x28
     cc6:	2f e3       	ldi	r18, 0x3F	; 63
     cc8:	32 e4       	ldi	r19, 0x42	; 66
     cca:	4f e0       	ldi	r20, 0x0F	; 15
     ccc:	50 e0       	ldi	r21, 0x00	; 0
     cce:	29 a3       	std	Y+33, r18	; 0x21
     cd0:	3a a3       	std	Y+34, r19	; 0x22
     cd2:	4b a3       	std	Y+35, r20	; 0x23
     cd4:	5c a3       	std	Y+36, r21	; 0x24
     cd6:	1d 8e       	std	Y+29, r1	; 0x1d
     cd8:	1e 8e       	std	Y+30, r1	; 0x1e
     cda:	1f 8e       	std	Y+31, r1	; 0x1f
     cdc:	18 a2       	std	Y+32, r1	; 0x20
     cde:	4b a6       	std	Y+43, r4	; 0x2b
     ce0:	5c a6       	std	Y+44, r5	; 0x2c
     ce2:	6d a6       	std	Y+45, r6	; 0x2d
     ce4:	7e a6       	std	Y+46, r7	; 0x2e
     ce6:	53 c0       	rjmp	.+166    	; 0xd8e <MAX30102_Start+0x4e8>
     ce8:	fc 01       	movw	r30, r24
                uint32_t irSum = 0, redSum = 0;
                for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
     cea:	ee 0f       	add	r30, r30
                    if (irBuffer[i] > irMax) irMax = irBuffer[i];
     cec:	ff 1f       	adc	r31, r31
     cee:	ee 0f       	add	r30, r30
     cf0:	ff 1f       	adc	r31, r31
     cf2:	e1 50       	subi	r30, 0x01	; 1
     cf4:	fd 4f       	sbci	r31, 0xFD	; 253
     cf6:	00 81       	ld	r16, Z
     cf8:	11 81       	ldd	r17, Z+1	; 0x01
     cfa:	22 81       	ldd	r18, Z+2	; 0x02
     cfc:	33 81       	ldd	r19, Z+3	; 0x03
     cfe:	4d 8c       	ldd	r4, Y+29	; 0x1d
     d00:	5e 8c       	ldd	r5, Y+30	; 0x1e
     d02:	6f 8c       	ldd	r6, Y+31	; 0x1f
     d04:	78 a0       	ldd	r7, Y+32	; 0x20
     d06:	40 16       	cp	r4, r16
     d08:	51 06       	cpc	r5, r17
     d0a:	62 06       	cpc	r6, r18
     d0c:	73 06       	cpc	r7, r19
     d0e:	20 f4       	brcc	.+8      	; 0xd18 <MAX30102_Start+0x472>
     d10:	0d 8f       	std	Y+29, r16	; 0x1d
     d12:	1e 8f       	std	Y+30, r17	; 0x1e
     d14:	2f 8f       	std	Y+31, r18	; 0x1f
     d16:	38 a3       	std	Y+32, r19	; 0x20
     d18:	49 a0       	ldd	r4, Y+33	; 0x21
     d1a:	5a a0       	ldd	r5, Y+34	; 0x22
                    if (irBuffer[i] < irMin) irMin = irBuffer[i];
     d1c:	6b a0       	ldd	r6, Y+35	; 0x23
     d1e:	7c a0       	ldd	r7, Y+36	; 0x24
     d20:	04 15       	cp	r16, r4
     d22:	15 05       	cpc	r17, r5
     d24:	26 05       	cpc	r18, r6
     d26:	37 05       	cpc	r19, r7
     d28:	20 f4       	brcc	.+8      	; 0xd32 <MAX30102_Start+0x48c>
     d2a:	09 a3       	std	Y+33, r16	; 0x21
     d2c:	1a a3       	std	Y+34, r17	; 0x22
     d2e:	2b a3       	std	Y+35, r18	; 0x23
     d30:	3c a3       	std	Y+36, r19	; 0x24
     d32:	fc 01       	movw	r30, r24
     d34:	ee 0f       	add	r30, r30
                    if (redBuffer[i] > redMax) redMax = redBuffer[i];
     d36:	ff 1f       	adc	r31, r31
     d38:	ee 0f       	add	r30, r30
     d3a:	ff 1f       	adc	r31, r31
     d3c:	e1 57       	subi	r30, 0x71	; 113
     d3e:	fb 4f       	sbci	r31, 0xFB	; 251
     d40:	40 81       	ld	r20, Z
     d42:	51 81       	ldd	r21, Z+1	; 0x01
     d44:	62 81       	ldd	r22, Z+2	; 0x02
     d46:	73 81       	ldd	r23, Z+3	; 0x03
     d48:	4d a0       	ldd	r4, Y+37	; 0x25
     d4a:	5e a0       	ldd	r5, Y+38	; 0x26
     d4c:	6f a0       	ldd	r6, Y+39	; 0x27
     d4e:	78 a4       	ldd	r7, Y+40	; 0x28
     d50:	44 16       	cp	r4, r20
     d52:	55 06       	cpc	r5, r21
     d54:	66 06       	cpc	r6, r22
     d56:	77 06       	cpc	r7, r23
     d58:	20 f4       	brcc	.+8      	; 0xd62 <MAX30102_Start+0x4bc>
     d5a:	4d a3       	std	Y+37, r20	; 0x25
     d5c:	5e a3       	std	Y+38, r21	; 0x26
     d5e:	6f a3       	std	Y+39, r22	; 0x27
     d60:	78 a7       	std	Y+40, r23	; 0x28
     d62:	4b a4       	ldd	r4, Y+43	; 0x2b
     d64:	5c a4       	ldd	r5, Y+44	; 0x2c
                    if (redBuffer[i] < redMin) redMin = redBuffer[i];
     d66:	6d a4       	ldd	r6, Y+45	; 0x2d
     d68:	7e a4       	ldd	r7, Y+46	; 0x2e
     d6a:	44 15       	cp	r20, r4
     d6c:	55 05       	cpc	r21, r5
     d6e:	66 05       	cpc	r22, r6
     d70:	77 05       	cpc	r23, r7
     d72:	20 f4       	brcc	.+8      	; 0xd7c <MAX30102_Start+0x4d6>
     d74:	4b a7       	std	Y+43, r20	; 0x2b
     d76:	5c a7       	std	Y+44, r21	; 0x2c
     d78:	6d a7       	std	Y+45, r22	; 0x2d
     d7a:	7e a7       	std	Y+46, r23	; 0x2e
     d7c:	c0 0e       	add	r12, r16
     d7e:	d1 1e       	adc	r13, r17
                    irSum += irBuffer[i];
     d80:	e2 1e       	adc	r14, r18
     d82:	f3 1e       	adc	r15, r19
     d84:	84 0e       	add	r8, r20
     d86:	95 1e       	adc	r9, r21
                    redSum += redBuffer[i];
     d88:	a6 1e       	adc	r10, r22
     d8a:	b7 1e       	adc	r11, r23
     d8c:	01 96       	adiw	r24, 0x01	; 1
     d8e:	84 36       	cpi	r24, 0x64	; 100
            static uint8_t dbgCnt = 0;
            if (++dbgCnt >= 100) {
                dbgCnt = 0;
                uint32_t irMax = 0, irMin = 999999, redMax = 0, redMin = 999999;
                uint32_t irSum = 0, redSum = 0;
                for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
     d90:	91 05       	cpc	r25, r1
     d92:	0c f4       	brge	.+2      	; 0xd96 <MAX30102_Start+0x4f0>
     d94:	a9 cf       	rjmp	.-174    	; 0xce8 <MAX30102_Start+0x442>
     d96:	4b a4       	ldd	r4, Y+43	; 0x2b
     d98:	5c a4       	ldd	r5, Y+44	; 0x2c
     d9a:	6d a4       	ldd	r6, Y+45	; 0x2d
     d9c:	7e a4       	ldd	r7, Y+46	; 0x2e
     d9e:	ed e3       	ldi	r30, 0x3D	; 61
     da0:	f2 e0       	ldi	r31, 0x02	; 2
     da2:	07 c0       	rjmp	.+14     	; 0xdb2 <MAX30102_Start+0x50c>
     da4:	31 96       	adiw	r30, 0x01	; 1
     da6:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     daa:	85 ff       	sbrs	r24, 5
     dac:	fc cf       	rjmp	.-8      	; 0xda6 <MAX30102_Start+0x500>
     dae:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     db2:	90 81       	ld	r25, Z
     db4:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     db6:	f6 cf       	rjmp	.-20     	; 0xda4 <MAX30102_Start+0x4fe>
     db8:	80 91 bd 02 	lds	r24, 0x02BD	; 0x8002bd <SpO2>
                    if (redBuffer[i] < redMin) redMin = redBuffer[i];
                    irSum += irBuffer[i];
                    redSum += redBuffer[i];
                }
                uart_puts("\r\n>>> SpO2=");
                uart_putFloat(SpO2, 2);
     dbc:	90 91 be 02 	lds	r25, 0x02BE	; 0x8002be <SpO2+0x1>
     dc0:	20 91 bf 02 	lds	r18, 0x02BF	; 0x8002bf <SpO2+0x2>
     dc4:	30 91 c0 02 	lds	r19, 0x02C0	; 0x8002c0 <SpO2+0x3>
     dc8:	3f 93       	push	r19
     dca:	2f 93       	push	r18
	uart_puts(buffer);
}

static inline void uart_putFloat(float val, uint8_t decimals) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%.*f", decimals, val);
     dcc:	9f 93       	push	r25
     dce:	8f 93       	push	r24
     dd0:	1f 92       	push	r1
     dd2:	82 e0       	ldi	r24, 0x02	; 2
     dd4:	8f 93       	push	r24
     dd6:	8b ea       	ldi	r24, 0xAB	; 171
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	9f 93       	push	r25
     ddc:	8f 93       	push	r24
     dde:	1f 92       	push	r1
     de0:	84 e1       	ldi	r24, 0x14	; 20
     de2:	8f 93       	push	r24
     de4:	8e 01       	movw	r16, r28
     de6:	0f 5f       	subi	r16, 0xFF	; 255
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	1f 93       	push	r17
     dec:	0f 93       	push	r16
     dee:	56 d6       	rcall	.+3244   	; 0x1a9c <snprintf>
     df0:	0f b6       	in	r0, 0x3f	; 63
     df2:	f8 94       	cli
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	0f be       	out	0x3f, r0	; 63
     df8:	cd bf       	out	0x3d, r28	; 61
     dfa:	f8 01       	movw	r30, r16
     dfc:	07 c0       	rjmp	.+14     	; 0xe0c <MAX30102_Start+0x566>
     dfe:	31 96       	adiw	r30, 0x01	; 1
     e00:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     e04:	85 ff       	sbrs	r24, 5
     e06:	fc cf       	rjmp	.-8      	; 0xe00 <MAX30102_Start+0x55a>
     e08:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     e0c:	90 81       	ld	r25, Z
     e0e:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     e10:	f6 cf       	rjmp	.-20     	; 0xdfe <MAX30102_Start+0x558>
     e12:	e9 e4       	ldi	r30, 0x49	; 73
     e14:	f2 e0       	ldi	r31, 0x02	; 2
     e16:	07 c0       	rjmp	.+14     	; 0xe26 <MAX30102_Start+0x580>
     e18:	31 96       	adiw	r30, 0x01	; 1
     e1a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     e1e:	85 ff       	sbrs	r24, 5
     e20:	fc cf       	rjmp	.-8      	; 0xe1a <MAX30102_Start+0x574>
     e22:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     e26:	90 81       	ld	r25, Z
     e28:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     e2a:	f6 cf       	rjmp	.-20     	; 0xe18 <MAX30102_Start+0x572>
     e2c:	4d 8d       	ldd	r20, Y+29	; 0x1d
     e2e:	5e 8d       	ldd	r21, Y+30	; 0x1e
                uart_puts(" IR_AC=");
                uart_putUInt32(irMax - irMin);
     e30:	6f 8d       	ldd	r22, Y+31	; 0x1f
     e32:	78 a1       	ldd	r23, Y+32	; 0x20
     e34:	89 a1       	ldd	r24, Y+33	; 0x21
     e36:	9a a1       	ldd	r25, Y+34	; 0x22
     e38:	ab a1       	ldd	r26, Y+35	; 0x23
     e3a:	bc a1       	ldd	r27, Y+36	; 0x24
     e3c:	48 1b       	sub	r20, r24
     e3e:	59 0b       	sbc	r21, r25
     e40:	6a 0b       	sbc	r22, r26
     e42:	7b 0b       	sbc	r23, r27
     e44:	4b a7       	std	Y+43, r20	; 0x2b
     e46:	5c a7       	std	Y+44, r21	; 0x2c
     e48:	6d a7       	std	Y+45, r22	; 0x2d
     e4a:	7e a7       	std	Y+46, r23	; 0x2e
     e4c:	7f 93       	push	r23
	uart_puts(buffer);
}

static inline void uart_putUInt32(uint32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%lu", val);
     e4e:	6f 93       	push	r22
     e50:	5f 93       	push	r21
     e52:	4f 93       	push	r20
     e54:	80 eb       	ldi	r24, 0xB0	; 176
     e56:	92 e0       	ldi	r25, 0x02	; 2
     e58:	9f 93       	push	r25
     e5a:	8f 93       	push	r24
     e5c:	1f 92       	push	r1
     e5e:	84 e1       	ldi	r24, 0x14	; 20
     e60:	8f 93       	push	r24
     e62:	8e 01       	movw	r16, r28
     e64:	0f 5f       	subi	r16, 0xFF	; 255
     e66:	1f 4f       	sbci	r17, 0xFF	; 255
     e68:	1f 93       	push	r17
     e6a:	0f 93       	push	r16
     e6c:	17 d6       	rcall	.+3118   	; 0x1a9c <snprintf>
     e6e:	0f b6       	in	r0, 0x3f	; 63
     e70:	f8 94       	cli
     e72:	de bf       	out	0x3e, r29	; 62
     e74:	0f be       	out	0x3f, r0	; 63
     e76:	cd bf       	out	0x3d, r28	; 61
     e78:	f8 01       	movw	r30, r16
     e7a:	07 c0       	rjmp	.+14     	; 0xe8a <MAX30102_Start+0x5e4>
     e7c:	31 96       	adiw	r30, 0x01	; 1
     e7e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     e82:	85 ff       	sbrs	r24, 5
     e84:	fc cf       	rjmp	.-8      	; 0xe7e <MAX30102_Start+0x5d8>
     e86:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     e8a:	90 81       	ld	r25, Z
     e8c:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     e8e:	f6 cf       	rjmp	.-20     	; 0xe7c <MAX30102_Start+0x5d6>
     e90:	e1 e5       	ldi	r30, 0x51	; 81
     e92:	f2 e0       	ldi	r31, 0x02	; 2
     e94:	07 c0       	rjmp	.+14     	; 0xea4 <MAX30102_Start+0x5fe>
     e96:	31 96       	adiw	r30, 0x01	; 1
		uart_putc(*str++);
     e98:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     e9c:	85 ff       	sbrs	r24, 5
     e9e:	fc cf       	rjmp	.-8      	; 0xe98 <MAX30102_Start+0x5f2>
     ea0:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     ea4:	90 81       	ld	r25, Z
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     ea6:	91 11       	cpse	r25, r1
     ea8:	f6 cf       	rjmp	.-20     	; 0xe96 <MAX30102_Start+0x5f0>
     eaa:	c7 01       	movw	r24, r14
                uart_puts(" IR_DC=");
                uart_putUInt32(irSum / SPO2_BUFFER_SIZE);
     eac:	b6 01       	movw	r22, r12
     eae:	24 e6       	ldi	r18, 0x64	; 100
     eb0:	30 e0       	ldi	r19, 0x00	; 0
     eb2:	40 e0       	ldi	r20, 0x00	; 0
     eb4:	50 e0       	ldi	r21, 0x00	; 0
     eb6:	a0 d5       	rcall	.+2880   	; 0x19f8 <__udivmodsi4>
     eb8:	5f 93       	push	r21
	uart_puts(buffer);
}

static inline void uart_putUInt32(uint32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%lu", val);
     eba:	4f 93       	push	r20
     ebc:	3f 93       	push	r19
     ebe:	2f 93       	push	r18
     ec0:	80 eb       	ldi	r24, 0xB0	; 176
     ec2:	92 e0       	ldi	r25, 0x02	; 2
     ec4:	9f 93       	push	r25
     ec6:	8f 93       	push	r24
     ec8:	1f 92       	push	r1
     eca:	84 e1       	ldi	r24, 0x14	; 20
     ecc:	8f 93       	push	r24
     ece:	8e 01       	movw	r16, r28
     ed0:	0f 5f       	subi	r16, 0xFF	; 255
     ed2:	1f 4f       	sbci	r17, 0xFF	; 255
     ed4:	1f 93       	push	r17
     ed6:	0f 93       	push	r16
     ed8:	e1 d5       	rcall	.+3010   	; 0x1a9c <snprintf>
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	f8 94       	cli
     ede:	de bf       	out	0x3e, r29	; 62
     ee0:	0f be       	out	0x3f, r0	; 63
     ee2:	cd bf       	out	0x3d, r28	; 61
     ee4:	f8 01       	movw	r30, r16
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <MAX30102_Start+0x650>
     ee8:	31 96       	adiw	r30, 0x01	; 1
     eea:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     eee:	85 ff       	sbrs	r24, 5
     ef0:	fc cf       	rjmp	.-8      	; 0xeea <MAX30102_Start+0x644>
     ef2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     ef6:	90 81       	ld	r25, Z
     ef8:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     efa:	f6 cf       	rjmp	.-20     	; 0xee8 <MAX30102_Start+0x642>
     efc:	e9 e5       	ldi	r30, 0x59	; 89
     efe:	f2 e0       	ldi	r31, 0x02	; 2
     f00:	07 c0       	rjmp	.+14     	; 0xf10 <MAX30102_Start+0x66a>
     f02:	31 96       	adiw	r30, 0x01	; 1
     f04:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     f08:	85 ff       	sbrs	r24, 5
     f0a:	fc cf       	rjmp	.-8      	; 0xf04 <MAX30102_Start+0x65e>
     f0c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     f10:	90 81       	ld	r25, Z
     f12:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     f14:	f6 cf       	rjmp	.-20     	; 0xf02 <MAX30102_Start+0x65c>
     f16:	4d a1       	ldd	r20, Y+37	; 0x25
     f18:	5e a1       	ldd	r21, Y+38	; 0x26
                uart_puts(" RED_AC=");
                uart_putUInt32(redMax - redMin);
     f1a:	6f a1       	ldd	r22, Y+39	; 0x27
     f1c:	78 a5       	ldd	r23, Y+40	; 0x28
     f1e:	44 19       	sub	r20, r4
     f20:	55 09       	sbc	r21, r5
     f22:	66 09       	sbc	r22, r6
     f24:	77 09       	sbc	r23, r7
     f26:	4f a7       	std	Y+47, r20	; 0x2f
     f28:	58 ab       	std	Y+48, r21	; 0x30
     f2a:	69 ab       	std	Y+49, r22	; 0x31
     f2c:	7a ab       	std	Y+50, r23	; 0x32
     f2e:	7f 93       	push	r23
	uart_puts(buffer);
}

static inline void uart_putUInt32(uint32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%lu", val);
     f30:	6f 93       	push	r22
     f32:	5f 93       	push	r21
     f34:	4f 93       	push	r20
     f36:	80 eb       	ldi	r24, 0xB0	; 176
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	9f 93       	push	r25
     f3c:	8f 93       	push	r24
     f3e:	1f 92       	push	r1
     f40:	84 e1       	ldi	r24, 0x14	; 20
     f42:	8f 93       	push	r24
     f44:	8e 01       	movw	r16, r28
     f46:	0f 5f       	subi	r16, 0xFF	; 255
     f48:	1f 4f       	sbci	r17, 0xFF	; 255
     f4a:	1f 93       	push	r17
     f4c:	0f 93       	push	r16
     f4e:	a6 d5       	rcall	.+2892   	; 0x1a9c <snprintf>
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	f8 94       	cli
     f54:	de bf       	out	0x3e, r29	; 62
     f56:	0f be       	out	0x3f, r0	; 63
     f58:	cd bf       	out	0x3d, r28	; 61
     f5a:	f8 01       	movw	r30, r16
     f5c:	07 c0       	rjmp	.+14     	; 0xf6c <MAX30102_Start+0x6c6>
     f5e:	31 96       	adiw	r30, 0x01	; 1
     f60:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     f64:	85 ff       	sbrs	r24, 5
     f66:	fc cf       	rjmp	.-8      	; 0xf60 <MAX30102_Start+0x6ba>
     f68:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     f6c:	90 81       	ld	r25, Z
     f6e:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     f70:	f6 cf       	rjmp	.-20     	; 0xf5e <MAX30102_Start+0x6b8>
     f72:	e2 e6       	ldi	r30, 0x62	; 98
     f74:	f2 e0       	ldi	r31, 0x02	; 2
     f76:	07 c0       	rjmp	.+14     	; 0xf86 <MAX30102_Start+0x6e0>
     f78:	31 96       	adiw	r30, 0x01	; 1
		uart_putc(*str++);
     f7a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     f7e:	85 ff       	sbrs	r24, 5
     f80:	fc cf       	rjmp	.-8      	; 0xf7a <MAX30102_Start+0x6d4>
     f82:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     f86:	90 81       	ld	r25, Z
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     f88:	91 11       	cpse	r25, r1
     f8a:	f6 cf       	rjmp	.-20     	; 0xf78 <MAX30102_Start+0x6d2>
     f8c:	c5 01       	movw	r24, r10
                uart_puts(" RED_DC=");
                uart_putUInt32(redSum / SPO2_BUFFER_SIZE);
     f8e:	b4 01       	movw	r22, r8
     f90:	24 e6       	ldi	r18, 0x64	; 100
     f92:	30 e0       	ldi	r19, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	50 e0       	ldi	r21, 0x00	; 0
     f98:	2f d5       	rcall	.+2654   	; 0x19f8 <__udivmodsi4>
     f9a:	5f 93       	push	r21
	uart_puts(buffer);
}

static inline void uart_putUInt32(uint32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%lu", val);
     f9c:	4f 93       	push	r20
     f9e:	3f 93       	push	r19
     fa0:	2f 93       	push	r18
     fa2:	80 eb       	ldi	r24, 0xB0	; 176
     fa4:	92 e0       	ldi	r25, 0x02	; 2
     fa6:	9f 93       	push	r25
     fa8:	8f 93       	push	r24
     faa:	1f 92       	push	r1
     fac:	84 e1       	ldi	r24, 0x14	; 20
     fae:	8f 93       	push	r24
     fb0:	8e 01       	movw	r16, r28
     fb2:	0f 5f       	subi	r16, 0xFF	; 255
     fb4:	1f 4f       	sbci	r17, 0xFF	; 255
     fb6:	1f 93       	push	r17
     fb8:	0f 93       	push	r16
     fba:	70 d5       	rcall	.+2784   	; 0x1a9c <snprintf>
     fbc:	0f b6       	in	r0, 0x3f	; 63
     fbe:	f8 94       	cli
     fc0:	de bf       	out	0x3e, r29	; 62
     fc2:	0f be       	out	0x3f, r0	; 63
     fc4:	cd bf       	out	0x3d, r28	; 61
     fc6:	f8 01       	movw	r30, r16
     fc8:	07 c0       	rjmp	.+14     	; 0xfd8 <MAX30102_Start+0x732>
     fca:	31 96       	adiw	r30, 0x01	; 1
     fcc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     fd0:	85 ff       	sbrs	r24, 5
     fd2:	fc cf       	rjmp	.-8      	; 0xfcc <MAX30102_Start+0x726>
     fd4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     fd8:	90 81       	ld	r25, Z
     fda:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     fdc:	f6 cf       	rjmp	.-20     	; 0xfca <MAX30102_Start+0x724>
     fde:	2d 8d       	ldd	r18, Y+29	; 0x1d
     fe0:	3e 8d       	ldd	r19, Y+30	; 0x1e
                float ratio = 0;
                if (irMax > irMin && redMax > redMin) {
     fe2:	4f 8d       	ldd	r20, Y+31	; 0x1f
     fe4:	58 a1       	ldd	r21, Y+32	; 0x20
     fe6:	69 a1       	ldd	r22, Y+33	; 0x21
     fe8:	7a a1       	ldd	r23, Y+34	; 0x22
     fea:	8b a1       	ldd	r24, Y+35	; 0x23
     fec:	9c a1       	ldd	r25, Y+36	; 0x24
     fee:	62 17       	cp	r22, r18
     ff0:	73 07       	cpc	r23, r19
     ff2:	84 07       	cpc	r24, r20
     ff4:	95 07       	cpc	r25, r21
     ff6:	08 f0       	brcs	.+2      	; 0xffa <MAX30102_Start+0x754>
     ff8:	42 c0       	rjmp	.+132    	; 0x107e <__EEPROM_REGION_LENGTH__+0x7e>
     ffa:	8d a1       	ldd	r24, Y+37	; 0x25
     ffc:	9e a1       	ldd	r25, Y+38	; 0x26
     ffe:	af a1       	ldd	r26, Y+39	; 0x27
    1000:	b8 a5       	ldd	r27, Y+40	; 0x28
    1002:	48 16       	cp	r4, r24
    1004:	59 06       	cpc	r5, r25
    1006:	6a 06       	cpc	r6, r26
    1008:	7b 06       	cpc	r7, r27
    100a:	08 f0       	brcs	.+2      	; 0x100e <__EEPROM_REGION_LENGTH__+0xe>
    100c:	3c c0       	rjmp	.+120    	; 0x1086 <__EEPROM_REGION_LENGTH__+0x86>
                    float irAC = irMax - irMin;
    100e:	6b a5       	ldd	r22, Y+43	; 0x2b
    1010:	7c a5       	ldd	r23, Y+44	; 0x2c
    1012:	8d a5       	ldd	r24, Y+45	; 0x2d
    1014:	9e a5       	ldd	r25, Y+46	; 0x2e
    1016:	c4 d3       	rcall	.+1928   	; 0x17a0 <__floatunsisf>
    1018:	6d 8f       	std	Y+29, r22	; 0x1d
    101a:	7e 8f       	std	Y+30, r23	; 0x1e
    101c:	8f 8f       	std	Y+31, r24	; 0x1f
    101e:	98 a3       	std	Y+32, r25	; 0x20
                    float redAC = redMax - redMin;
    1020:	6f a5       	ldd	r22, Y+47	; 0x2f
    1022:	78 a9       	ldd	r23, Y+48	; 0x30
    1024:	89 a9       	ldd	r24, Y+49	; 0x31
    1026:	9a a9       	ldd	r25, Y+50	; 0x32
    1028:	bb d3       	rcall	.+1910   	; 0x17a0 <__floatunsisf>
    102a:	2b 01       	movw	r4, r22
    102c:	3c 01       	movw	r6, r24
                    float irDC = irSum / (float)SPO2_BUFFER_SIZE;
    102e:	c7 01       	movw	r24, r14
    1030:	b6 01       	movw	r22, r12
    1032:	b6 d3       	rcall	.+1900   	; 0x17a0 <__floatunsisf>
    1034:	20 e0       	ldi	r18, 0x00	; 0
    1036:	30 e0       	ldi	r19, 0x00	; 0
    1038:	48 ec       	ldi	r20, 0xC8	; 200
    103a:	52 e4       	ldi	r21, 0x42	; 66
    103c:	18 d3       	rcall	.+1584   	; 0x166e <__divsf3>
    103e:	6b 01       	movw	r12, r22
    1040:	7c 01       	movw	r14, r24
                    float redDC = redSum / (float)SPO2_BUFFER_SIZE;
    1042:	c5 01       	movw	r24, r10
    1044:	b4 01       	movw	r22, r8
    1046:	ac d3       	rcall	.+1880   	; 0x17a0 <__floatunsisf>
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	48 ec       	ldi	r20, 0xC8	; 200
    104e:	52 e4       	ldi	r21, 0x42	; 66
    1050:	0e d3       	rcall	.+1564   	; 0x166e <__divsf3>
    1052:	9b 01       	movw	r18, r22
    1054:	ac 01       	movw	r20, r24
    1056:	c3 01       	movw	r24, r6
    1058:	b2 01       	movw	r22, r4
                    ratio = (redAC / redDC) / (irAC / irDC);
    105a:	09 d3       	rcall	.+1554   	; 0x166e <__divsf3>
    105c:	2b 01       	movw	r4, r22
    105e:	3c 01       	movw	r6, r24
    1060:	a7 01       	movw	r20, r14
    1062:	96 01       	movw	r18, r12
    1064:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1066:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1068:	8f 8d       	ldd	r24, Y+31	; 0x1f
    106a:	98 a1       	ldd	r25, Y+32	; 0x20
    106c:	00 d3       	rcall	.+1536   	; 0x166e <__divsf3>
    106e:	9b 01       	movw	r18, r22
    1070:	ac 01       	movw	r20, r24
    1072:	c3 01       	movw	r24, r6
    1074:	b2 01       	movw	r22, r4
    1076:	fb d2       	rcall	.+1526   	; 0x166e <__divsf3>
    1078:	6b 01       	movw	r12, r22
    107a:	7c 01       	movw	r14, r24
    107c:	07 c0       	rjmp	.+14     	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    107e:	c1 2c       	mov	r12, r1
    1080:	d1 2c       	mov	r13, r1
    1082:	76 01       	movw	r14, r12
                uart_putUInt32(irSum / SPO2_BUFFER_SIZE);
                uart_puts(" RED_AC=");
                uart_putUInt32(redMax - redMin);
                uart_puts(" RED_DC=");
                uart_putUInt32(redSum / SPO2_BUFFER_SIZE);
                float ratio = 0;
    1084:	03 c0       	rjmp	.+6      	; 0x108c <__EEPROM_REGION_LENGTH__+0x8c>
    1086:	c1 2c       	mov	r12, r1
    1088:	d1 2c       	mov	r13, r1
    108a:	76 01       	movw	r14, r12
    108c:	eb e6       	ldi	r30, 0x6B	; 107
    108e:	f2 e0       	ldi	r31, 0x02	; 2
    1090:	07 c0       	rjmp	.+14     	; 0x10a0 <__EEPROM_REGION_LENGTH__+0xa0>
    1092:	31 96       	adiw	r30, 0x01	; 1
    1094:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
		uart_putc(*str++);
    1098:	85 ff       	sbrs	r24, 5
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    109a:	fc cf       	rjmp	.-8      	; 0x1094 <__EEPROM_REGION_LENGTH__+0x94>
    109c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    10a0:	90 81       	ld	r25, Z
	UDR0 = c;
    10a2:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    10a4:	f6 cf       	rjmp	.-20     	; 0x1092 <__EEPROM_REGION_LENGTH__+0x92>
    10a6:	20 e0       	ldi	r18, 0x00	; 0
    10a8:	30 e0       	ldi	r19, 0x00	; 0
                    float irDC = irSum / (float)SPO2_BUFFER_SIZE;
                    float redDC = redSum / (float)SPO2_BUFFER_SIZE;
                    ratio = (redAC / redDC) / (irAC / irDC);
                }
                uart_puts(" Ratio=");
                uart_putInt((int)(ratio * 1000));
    10aa:	4a e7       	ldi	r20, 0x7A	; 122
    10ac:	54 e4       	ldi	r21, 0x44	; 68
    10ae:	c7 01       	movw	r24, r14
    10b0:	b6 01       	movw	r22, r12
    10b2:	2c d4       	rcall	.+2136   	; 0x190c <__mulsf3>
    10b4:	44 d3       	rcall	.+1672   	; 0x173e <__fixsfsi>
    10b6:	cb 01       	movw	r24, r22
    10b8:	77 0f       	add	r23, r23
    10ba:	aa 0b       	sbc	r26, r26
    10bc:	bb 0b       	sbc	r27, r27
    10be:	bf 93       	push	r27
    10c0:	af 93       	push	r26
    10c2:	9f 93       	push	r25
    10c4:	8f 93       	push	r24
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
    10c6:	84 eb       	ldi	r24, 0xB4	; 180
    10c8:	92 e0       	ldi	r25, 0x02	; 2
    10ca:	9f 93       	push	r25
    10cc:	8f 93       	push	r24
    10ce:	1f 92       	push	r1
    10d0:	84 e1       	ldi	r24, 0x14	; 20
    10d2:	8f 93       	push	r24
    10d4:	8e 01       	movw	r16, r28
    10d6:	0f 5f       	subi	r16, 0xFF	; 255
    10d8:	1f 4f       	sbci	r17, 0xFF	; 255
    10da:	1f 93       	push	r17
    10dc:	0f 93       	push	r16
    10de:	de d4       	rcall	.+2492   	; 0x1a9c <snprintf>
    10e0:	0f b6       	in	r0, 0x3f	; 63
    10e2:	f8 94       	cli
    10e4:	de bf       	out	0x3e, r29	; 62
    10e6:	0f be       	out	0x3f, r0	; 63
    10e8:	cd bf       	out	0x3d, r28	; 61
    10ea:	f8 01       	movw	r30, r16
    10ec:	07 c0       	rjmp	.+14     	; 0x10fc <__EEPROM_REGION_LENGTH__+0xfc>
    10ee:	31 96       	adiw	r30, 0x01	; 1
    10f0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    10f4:	85 ff       	sbrs	r24, 5
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    10f6:	fc cf       	rjmp	.-8      	; 0x10f0 <__EEPROM_REGION_LENGTH__+0xf0>
    10f8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    10fc:	90 81       	ld	r25, Z
	UDR0 = c;
    10fe:	91 11       	cpse	r25, r1
    1100:	f6 cf       	rjmp	.-20     	; 0x10ee <__EEPROM_REGION_LENGTH__+0xee>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1102:	e3 e7       	ldi	r30, 0x73	; 115
    1104:	f2 e0       	ldi	r31, 0x02	; 2
    1106:	07 c0       	rjmp	.+14     	; 0x1116 <__EEPROM_REGION_LENGTH__+0x116>
    1108:	31 96       	adiw	r30, 0x01	; 1
    110a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
		uart_putc(*str++);
    110e:	85 ff       	sbrs	r24, 5
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1110:	fc cf       	rjmp	.-8      	; 0x110a <__EEPROM_REGION_LENGTH__+0x10a>
    1112:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    1116:	90 81       	ld	r25, Z
	UDR0 = c;
    1118:	91 11       	cpse	r25, r1
    111a:	f6 cf       	rjmp	.-20     	; 0x1108 <__EEPROM_REGION_LENGTH__+0x108>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    111c:	20 e0       	ldi	r18, 0x00	; 0
    111e:	30 e0       	ldi	r19, 0x00	; 0
                uart_puts(" SpO2_calc=");
                uart_putFloat(104.0 - 17.0 * ratio, 1);
    1120:	48 e8       	ldi	r20, 0x88	; 136
    1122:	51 e4       	ldi	r21, 0x41	; 65
    1124:	c7 01       	movw	r24, r14
    1126:	b6 01       	movw	r22, r12
    1128:	f1 d3       	rcall	.+2018   	; 0x190c <__mulsf3>
    112a:	9b 01       	movw	r18, r22
    112c:	ac 01       	movw	r20, r24
    112e:	60 e0       	ldi	r22, 0x00	; 0
    1130:	70 e0       	ldi	r23, 0x00	; 0
    1132:	80 ed       	ldi	r24, 0xD0	; 208
    1134:	92 e4       	ldi	r25, 0x42	; 66
    1136:	32 d2       	rcall	.+1124   	; 0x159c <__subsf3>
    1138:	9f 93       	push	r25
    113a:	8f 93       	push	r24
    113c:	7f 93       	push	r23
    113e:	6f 93       	push	r22
	uart_puts(buffer);
}

static inline void uart_putFloat(float val, uint8_t decimals) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%.*f", decimals, val);
    1140:	1f 92       	push	r1
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	8f 93       	push	r24
    1146:	8b ea       	ldi	r24, 0xAB	; 171
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	9f 93       	push	r25
    114c:	8f 93       	push	r24
    114e:	1f 92       	push	r1
    1150:	84 e1       	ldi	r24, 0x14	; 20
    1152:	8f 93       	push	r24
    1154:	8e 01       	movw	r16, r28
    1156:	0f 5f       	subi	r16, 0xFF	; 255
    1158:	1f 4f       	sbci	r17, 0xFF	; 255
    115a:	1f 93       	push	r17
    115c:	0f 93       	push	r16
    115e:	9e d4       	rcall	.+2364   	; 0x1a9c <snprintf>
    1160:	0f b6       	in	r0, 0x3f	; 63
    1162:	f8 94       	cli
    1164:	de bf       	out	0x3e, r29	; 62
    1166:	0f be       	out	0x3f, r0	; 63
    1168:	cd bf       	out	0x3d, r28	; 61
    116a:	f8 01       	movw	r30, r16
    116c:	07 c0       	rjmp	.+14     	; 0x117c <__EEPROM_REGION_LENGTH__+0x17c>
    116e:	31 96       	adiw	r30, 0x01	; 1
    1170:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1174:	85 ff       	sbrs	r24, 5
    1176:	fc cf       	rjmp	.-8      	; 0x1170 <__EEPROM_REGION_LENGTH__+0x170>
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    1178:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    117c:	90 81       	ld	r25, Z
    117e:	91 11       	cpse	r25, r1
    1180:	f6 cf       	rjmp	.-20     	; 0x116e <__EEPROM_REGION_LENGTH__+0x16e>
	UDR0 = c;
    1182:	ef e7       	ldi	r30, 0x7F	; 127
    1184:	f2 e0       	ldi	r31, 0x02	; 2
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1186:	07 c0       	rjmp	.+14     	; 0x1196 <__EEPROM_REGION_LENGTH__+0x196>
    1188:	31 96       	adiw	r30, 0x01	; 1
    118a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    118e:	85 ff       	sbrs	r24, 5
    1190:	fc cf       	rjmp	.-8      	; 0x118a <__EEPROM_REGION_LENGTH__+0x18a>
		uart_putc(*str++);
    1192:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1196:	90 81       	ld	r25, Z
    1198:	91 11       	cpse	r25, r1
    119a:	f6 cf       	rjmp	.-20     	; 0x1188 <__EEPROM_REGION_LENGTH__+0x188>
	UDR0 = c;
    119c:	72 cd       	rjmp	.-1308   	; 0xc82 <MAX30102_Start+0x3dc>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    119e:	31 96       	adiw	r30, 0x01	; 1
    11a0:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    11a4:	85 ff       	sbrs	r24, 5
		uart_putc(*str++);
    11a6:	fc cf       	rjmp	.-8      	; 0x11a0 <__EEPROM_REGION_LENGTH__+0x1a0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    11a8:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    11ac:	90 81       	ld	r25, Z
    11ae:	91 11       	cpse	r25, r1
	UDR0 = c;
    11b0:	f6 cf       	rjmp	.-20     	; 0x119e <__EEPROM_REGION_LENGTH__+0x19e>
    11b2:	80 91 d6 02 	lds	r24, 0x02D6	; 0x8002d6 <irValue>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    11b6:	90 91 d7 02 	lds	r25, 0x02D7	; 0x8002d7 <irValue+0x1>
                uart_puts(" <<<\r\n");
            }
        }
        
        uart_puts("IR=");
        uart_putUInt32(irValue);
    11ba:	20 91 d8 02 	lds	r18, 0x02D8	; 0x8002d8 <irValue+0x2>
    11be:	30 91 d9 02 	lds	r19, 0x02D9	; 0x8002d9 <irValue+0x3>
    11c2:	3f 93       	push	r19
    11c4:	2f 93       	push	r18
    11c6:	9f 93       	push	r25
    11c8:	8f 93       	push	r24
	uart_puts(buffer);
}

static inline void uart_putUInt32(uint32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%lu", val);
    11ca:	80 eb       	ldi	r24, 0xB0	; 176
    11cc:	92 e0       	ldi	r25, 0x02	; 2
    11ce:	9f 93       	push	r25
    11d0:	8f 93       	push	r24
    11d2:	1f 92       	push	r1
    11d4:	84 e1       	ldi	r24, 0x14	; 20
    11d6:	8f 93       	push	r24
    11d8:	8e 01       	movw	r16, r28
    11da:	0f 5f       	subi	r16, 0xFF	; 255
    11dc:	1f 4f       	sbci	r17, 0xFF	; 255
    11de:	1f 93       	push	r17
    11e0:	0f 93       	push	r16
    11e2:	5c d4       	rcall	.+2232   	; 0x1a9c <snprintf>
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	de bf       	out	0x3e, r29	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	cd bf       	out	0x3d, r28	; 61
    11ee:	f8 01       	movw	r30, r16
    11f0:	07 c0       	rjmp	.+14     	; 0x1200 <__EEPROM_REGION_LENGTH__+0x200>
    11f2:	31 96       	adiw	r30, 0x01	; 1
    11f4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    11f8:	85 ff       	sbrs	r24, 5
    11fa:	fc cf       	rjmp	.-8      	; 0x11f4 <__EEPROM_REGION_LENGTH__+0x1f4>
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    11fc:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1200:	90 81       	ld	r25, Z
    1202:	91 11       	cpse	r25, r1
	UDR0 = c;
    1204:	f6 cf       	rjmp	.-20     	; 0x11f2 <__EEPROM_REGION_LENGTH__+0x1f2>
    1206:	ea e8       	ldi	r30, 0x8A	; 138
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1208:	f2 e0       	ldi	r31, 0x02	; 2
    120a:	07 c0       	rjmp	.+14     	; 0x121a <__EEPROM_REGION_LENGTH__+0x21a>
    120c:	31 96       	adiw	r30, 0x01	; 1
    120e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1212:	85 ff       	sbrs	r24, 5
		uart_putc(*str++);
    1214:	fc cf       	rjmp	.-8      	; 0x120e <__EEPROM_REGION_LENGTH__+0x20e>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1216:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    121a:	90 81       	ld	r25, Z
    121c:	91 11       	cpse	r25, r1
	UDR0 = c;
    121e:	f6 cf       	rjmp	.-20     	; 0x120c <__EEPROM_REGION_LENGTH__+0x20c>
    1220:	3f 92       	push	r3
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1222:	2f 92       	push	r2
    1224:	4a a4       	ldd	r4, Y+42	; 0x2a
    1226:	4f 92       	push	r4
	uart_puts(buffer);
}

static inline void uart_putUInt32(uint32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%lu", val);
    1228:	59 a4       	ldd	r5, Y+41	; 0x29
    122a:	5f 92       	push	r5
    122c:	80 eb       	ldi	r24, 0xB0	; 176
    122e:	92 e0       	ldi	r25, 0x02	; 2
    1230:	9f 93       	push	r25
    1232:	8f 93       	push	r24
    1234:	1f 92       	push	r1
    1236:	84 e1       	ldi	r24, 0x14	; 20
    1238:	8f 93       	push	r24
    123a:	8e 01       	movw	r16, r28
    123c:	0f 5f       	subi	r16, 0xFF	; 255
    123e:	1f 4f       	sbci	r17, 0xFF	; 255
    1240:	1f 93       	push	r17
    1242:	0f 93       	push	r16
    1244:	2b d4       	rcall	.+2134   	; 0x1a9c <snprintf>
    1246:	0f b6       	in	r0, 0x3f	; 63
    1248:	f8 94       	cli
    124a:	de bf       	out	0x3e, r29	; 62
    124c:	0f be       	out	0x3f, r0	; 63
    124e:	cd bf       	out	0x3d, r28	; 61
    1250:	f8 01       	movw	r30, r16
    1252:	07 c0       	rjmp	.+14     	; 0x1262 <__EEPROM_REGION_LENGTH__+0x262>
    1254:	31 96       	adiw	r30, 0x01	; 1
    1256:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    125a:	85 ff       	sbrs	r24, 5
    125c:	fc cf       	rjmp	.-8      	; 0x1256 <__EEPROM_REGION_LENGTH__+0x256>
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    125e:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1262:	90 81       	ld	r25, Z
    1264:	91 11       	cpse	r25, r1
    1266:	f6 cf       	rjmp	.-20     	; 0x1254 <__EEPROM_REGION_LENGTH__+0x254>
	UDR0 = c;
    1268:	e0 e9       	ldi	r30, 0x90	; 144
    126a:	f2 e0       	ldi	r31, 0x02	; 2
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    126c:	07 c0       	rjmp	.+14     	; 0x127c <__EEPROM_REGION_LENGTH__+0x27c>
    126e:	31 96       	adiw	r30, 0x01	; 1
    1270:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1274:	85 ff       	sbrs	r24, 5
		uart_putc(*str++);
    1276:	fc cf       	rjmp	.-8      	; 0x1270 <__EEPROM_REGION_LENGTH__+0x270>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1278:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    127c:	90 81       	ld	r25, Z
    127e:	91 11       	cpse	r25, r1
	UDR0 = c;
    1280:	f6 cf       	rjmp	.-20     	; 0x126e <__EEPROM_REGION_LENGTH__+0x26e>
    1282:	80 91 e0 02 	lds	r24, 0x02E0	; 0x8002e0 <beatAvg>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1286:	90 91 e1 02 	lds	r25, 0x02E1	; 0x8002e1 <beatAvg+0x1>
        uart_puts(" RED=");
        uart_putUInt32(redVal);
        uart_puts(" | BPM:");
        if (beatAvg > 0) {
    128a:	18 16       	cp	r1, r24
    128c:	19 06       	cpc	r1, r25
    128e:	8c f5       	brge	.+98     	; 0x12f2 <__EEPROM_REGION_LENGTH__+0x2f2>
    1290:	09 2e       	mov	r0, r25
    1292:	00 0c       	add	r0, r0
    1294:	aa 0b       	sbc	r26, r26
    1296:	bb 0b       	sbc	r27, r27
            uart_putInt(beatAvg);
    1298:	bf 93       	push	r27
    129a:	af 93       	push	r26
    129c:	9f 93       	push	r25
    129e:	8f 93       	push	r24
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
    12a0:	84 eb       	ldi	r24, 0xB4	; 180
    12a2:	92 e0       	ldi	r25, 0x02	; 2
    12a4:	9f 93       	push	r25
    12a6:	8f 93       	push	r24
    12a8:	1f 92       	push	r1
    12aa:	84 e1       	ldi	r24, 0x14	; 20
    12ac:	8f 93       	push	r24
    12ae:	8e 01       	movw	r16, r28
    12b0:	0f 5f       	subi	r16, 0xFF	; 255
    12b2:	1f 4f       	sbci	r17, 0xFF	; 255
    12b4:	1f 93       	push	r17
    12b6:	0f 93       	push	r16
    12b8:	f1 d3       	rcall	.+2018   	; 0x1a9c <snprintf>
    12ba:	0f b6       	in	r0, 0x3f	; 63
    12bc:	f8 94       	cli
    12be:	de bf       	out	0x3e, r29	; 62
    12c0:	0f be       	out	0x3f, r0	; 63
    12c2:	cd bf       	out	0x3d, r28	; 61
    12c4:	f8 01       	movw	r30, r16
    12c6:	07 c0       	rjmp	.+14     	; 0x12d6 <__EEPROM_REGION_LENGTH__+0x2d6>
    12c8:	31 96       	adiw	r30, 0x01	; 1
    12ca:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    12ce:	85 ff       	sbrs	r24, 5
    12d0:	fc cf       	rjmp	.-8      	; 0x12ca <__EEPROM_REGION_LENGTH__+0x2ca>
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    12d2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    12d6:	90 81       	ld	r25, Z
    12d8:	91 11       	cpse	r25, r1
    12da:	f6 cf       	rjmp	.-20     	; 0x12c8 <__EEPROM_REGION_LENGTH__+0x2c8>
	UDR0 = c;
    12dc:	eb e9       	ldi	r30, 0x9B	; 155
    12de:	f2 e0       	ldi	r31, 0x02	; 2
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    12e0:	15 c0       	rjmp	.+42     	; 0x130c <__EEPROM_REGION_LENGTH__+0x30c>
    12e2:	31 96       	adiw	r30, 0x01	; 1
    12e4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    12e8:	85 ff       	sbrs	r24, 5
		uart_putc(*str++);
    12ea:	fc cf       	rjmp	.-8      	; 0x12e4 <__EEPROM_REGION_LENGTH__+0x2e4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    12ec:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    12f0:	02 c0       	rjmp	.+4      	; 0x12f6 <__EEPROM_REGION_LENGTH__+0x2f6>
    12f2:	e8 e9       	ldi	r30, 0x98	; 152
	UDR0 = c;
    12f4:	f2 e0       	ldi	r31, 0x02	; 2
    12f6:	90 81       	ld	r25, Z
    12f8:	91 11       	cpse	r25, r1
    12fa:	f3 cf       	rjmp	.-26     	; 0x12e2 <__EEPROM_REGION_LENGTH__+0x2e2>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    12fc:	ef cf       	rjmp	.-34     	; 0x12dc <__EEPROM_REGION_LENGTH__+0x2dc>
    12fe:	31 96       	adiw	r30, 0x01	; 1
    1300:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1304:	85 ff       	sbrs	r24, 5
    1306:	fc cf       	rjmp	.-8      	; 0x1300 <__EEPROM_REGION_LENGTH__+0x300>
    1308:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
    130c:	90 81       	ld	r25, Z
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    130e:	91 11       	cpse	r25, r1
    1310:	f6 cf       	rjmp	.-20     	; 0x12fe <__EEPROM_REGION_LENGTH__+0x2fe>
    1312:	c0 90 bd 02 	lds	r12, 0x02BD	; 0x8002bd <SpO2>
        } else {
            uart_puts("--");
        }
        uart_puts(" SpO2:");
        if (SpO2 >= 70 && SpO2 <= 100) {
    1316:	d0 90 be 02 	lds	r13, 0x02BE	; 0x8002be <SpO2+0x1>
    131a:	e0 90 bf 02 	lds	r14, 0x02BF	; 0x8002bf <SpO2+0x2>
    131e:	f0 90 c0 02 	lds	r15, 0x02C0	; 0x8002c0 <SpO2+0x3>
    1322:	20 e0       	ldi	r18, 0x00	; 0
    1324:	30 e0       	ldi	r19, 0x00	; 0
    1326:	4c e8       	ldi	r20, 0x8C	; 140
    1328:	52 e4       	ldi	r21, 0x42	; 66
    132a:	c7 01       	movw	r24, r14
    132c:	b6 01       	movw	r22, r12
    132e:	ea d2       	rcall	.+1492   	; 0x1904 <__gesf2>
    1330:	88 23       	and	r24, r24
    1332:	0c f4       	brge	.+2      	; 0x1336 <__EEPROM_REGION_LENGTH__+0x336>
    1334:	73 c0       	rjmp	.+230    	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	48 ec       	ldi	r20, 0xC8	; 200
    133c:	52 e4       	ldi	r21, 0x42	; 66
    133e:	c7 01       	movw	r24, r14
    1340:	b6 01       	movw	r22, r12
    1342:	91 d1       	rcall	.+802    	; 0x1666 <__cmpsf2>
    1344:	18 16       	cp	r1, r24
    1346:	0c f4       	brge	.+2      	; 0x134a <__EEPROM_REGION_LENGTH__+0x34a>
            int spo2Int = (int)SpO2;
    1348:	69 c0       	rjmp	.+210    	; 0x141c <__EEPROM_REGION_LENGTH__+0x41c>
    134a:	c7 01       	movw	r24, r14
    134c:	b6 01       	movw	r22, r12
    134e:	f7 d1       	rcall	.+1006   	; 0x173e <__fixsfsi>
            int spo2Dec = (int)((SpO2 - spo2Int) * 10);
    1350:	4b 01       	movw	r8, r22
    1352:	77 0f       	add	r23, r23
    1354:	aa 08       	sbc	r10, r10
    1356:	bb 08       	sbc	r11, r11
    1358:	c5 01       	movw	r24, r10
    135a:	b4 01       	movw	r22, r8
    135c:	23 d2       	rcall	.+1094   	; 0x17a4 <__floatsisf>
    135e:	9b 01       	movw	r18, r22
    1360:	ac 01       	movw	r20, r24
    1362:	c7 01       	movw	r24, r14
    1364:	b6 01       	movw	r22, r12
    1366:	1a d1       	rcall	.+564    	; 0x159c <__subsf3>
    1368:	20 e0       	ldi	r18, 0x00	; 0
    136a:	30 e0       	ldi	r19, 0x00	; 0
    136c:	40 e2       	ldi	r20, 0x20	; 32
    136e:	51 e4       	ldi	r21, 0x41	; 65
    1370:	cd d2       	rcall	.+1434   	; 0x190c <__mulsf3>
    1372:	e5 d1       	rcall	.+970    	; 0x173e <__fixsfsi>
    1374:	6b 01       	movw	r12, r22
    1376:	7c 01       	movw	r14, r24
    1378:	bf 92       	push	r11
    137a:	af 92       	push	r10
    137c:	9f 92       	push	r9
    137e:	8f 92       	push	r8
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
    1380:	84 eb       	ldi	r24, 0xB4	; 180
    1382:	92 e0       	ldi	r25, 0x02	; 2
    1384:	9f 93       	push	r25
    1386:	8f 93       	push	r24
    1388:	1f 92       	push	r1
    138a:	84 e1       	ldi	r24, 0x14	; 20
    138c:	8f 93       	push	r24
    138e:	8e 01       	movw	r16, r28
    1390:	0f 5f       	subi	r16, 0xFF	; 255
    1392:	1f 4f       	sbci	r17, 0xFF	; 255
    1394:	1f 93       	push	r17
    1396:	0f 93       	push	r16
    1398:	81 d3       	rcall	.+1794   	; 0x1a9c <snprintf>
    139a:	0f b6       	in	r0, 0x3f	; 63
    139c:	f8 94       	cli
    139e:	de bf       	out	0x3e, r29	; 62
    13a0:	0f be       	out	0x3f, r0	; 63
    13a2:	cd bf       	out	0x3d, r28	; 61
    13a4:	f8 01       	movw	r30, r16
    13a6:	07 c0       	rjmp	.+14     	; 0x13b6 <__EEPROM_REGION_LENGTH__+0x3b6>
    13a8:	31 96       	adiw	r30, 0x01	; 1
    13aa:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    13ae:	85 ff       	sbrs	r24, 5
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    13b0:	fc cf       	rjmp	.-8      	; 0x13aa <__EEPROM_REGION_LENGTH__+0x3aa>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    13b2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    13b6:	90 81       	ld	r25, Z
    13b8:	91 11       	cpse	r25, r1
	UDR0 = c;
    13ba:	f6 cf       	rjmp	.-20     	; 0x13a8 <__EEPROM_REGION_LENGTH__+0x3a8>
    13bc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    13c0:	85 ff       	sbrs	r24, 5
    13c2:	fc cf       	rjmp	.-8      	; 0x13bc <__EEPROM_REGION_LENGTH__+0x3bc>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    13c4:	8e e2       	ldi	r24, 0x2E	; 46
    13c6:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
    13ca:	0d 2c       	mov	r0, r13
    13cc:	00 0c       	add	r0, r0
    13ce:	ee 08       	sbc	r14, r14
            uart_putInt(spo2Int);
            uart_putc('.');
            uart_putInt(spo2Dec);
    13d0:	ff 08       	sbc	r15, r15
    13d2:	ff 92       	push	r15
    13d4:	ef 92       	push	r14
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
    13d6:	df 92       	push	r13
    13d8:	cf 92       	push	r12
    13da:	84 eb       	ldi	r24, 0xB4	; 180
    13dc:	92 e0       	ldi	r25, 0x02	; 2
    13de:	9f 93       	push	r25
    13e0:	8f 93       	push	r24
    13e2:	1f 92       	push	r1
    13e4:	84 e1       	ldi	r24, 0x14	; 20
    13e6:	8f 93       	push	r24
    13e8:	8e 01       	movw	r16, r28
    13ea:	0f 5f       	subi	r16, 0xFF	; 255
    13ec:	1f 4f       	sbci	r17, 0xFF	; 255
    13ee:	1f 93       	push	r17
    13f0:	0f 93       	push	r16
    13f2:	54 d3       	rcall	.+1704   	; 0x1a9c <snprintf>
    13f4:	0f b6       	in	r0, 0x3f	; 63
    13f6:	f8 94       	cli
    13f8:	de bf       	out	0x3e, r29	; 62
    13fa:	0f be       	out	0x3f, r0	; 63
    13fc:	cd bf       	out	0x3d, r28	; 61
    13fe:	f8 01       	movw	r30, r16
    1400:	07 c0       	rjmp	.+14     	; 0x1410 <__EEPROM_REGION_LENGTH__+0x410>
    1402:	31 96       	adiw	r30, 0x01	; 1
    1404:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1408:	85 ff       	sbrs	r24, 5
    140a:	fc cf       	rjmp	.-8      	; 0x1404 <__EEPROM_REGION_LENGTH__+0x404>
    140c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
    1410:	90 81       	ld	r25, Z
    1412:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1414:	f6 cf       	rjmp	.-20     	; 0x1402 <__EEPROM_REGION_LENGTH__+0x402>
    1416:	e2 ea       	ldi	r30, 0xA2	; 162
    1418:	f2 e0       	ldi	r31, 0x02	; 2
    141a:	4e c0       	rjmp	.+156    	; 0x14b8 <__EEPROM_REGION_LENGTH__+0x4b8>
    141c:	20 e0       	ldi	r18, 0x00	; 0
    141e:	30 e0       	ldi	r19, 0x00	; 0
        } else if (SpO2 > 0) {
    1420:	a9 01       	movw	r20, r18
    1422:	c7 01       	movw	r24, r14
    1424:	b6 01       	movw	r22, r12
    1426:	6e d2       	rcall	.+1244   	; 0x1904 <__gesf2>
    1428:	18 16       	cp	r1, r24
    142a:	cc f5       	brge	.+114    	; 0x149e <__EEPROM_REGION_LENGTH__+0x49e>
    142c:	c7 01       	movw	r24, r14
    142e:	b6 01       	movw	r22, r12
    1430:	86 d1       	rcall	.+780    	; 0x173e <__fixsfsi>
            int spo2Int = (int)SpO2;
    1432:	cb 01       	movw	r24, r22
    1434:	77 0f       	add	r23, r23
    1436:	aa 0b       	sbc	r26, r26
    1438:	bb 0b       	sbc	r27, r27
            uart_putInt(spo2Int);
    143a:	bf 93       	push	r27
    143c:	af 93       	push	r26
    143e:	9f 93       	push	r25
    1440:	8f 93       	push	r24
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
    1442:	84 eb       	ldi	r24, 0xB4	; 180
    1444:	92 e0       	ldi	r25, 0x02	; 2
    1446:	9f 93       	push	r25
    1448:	8f 93       	push	r24
    144a:	1f 92       	push	r1
    144c:	84 e1       	ldi	r24, 0x14	; 20
    144e:	8f 93       	push	r24
    1450:	8e 01       	movw	r16, r28
    1452:	0f 5f       	subi	r16, 0xFF	; 255
    1454:	1f 4f       	sbci	r17, 0xFF	; 255
    1456:	1f 93       	push	r17
    1458:	0f 93       	push	r16
    145a:	20 d3       	rcall	.+1600   	; 0x1a9c <snprintf>
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	f8 01       	movw	r30, r16
    1468:	07 c0       	rjmp	.+14     	; 0x1478 <__EEPROM_REGION_LENGTH__+0x478>
    146a:	31 96       	adiw	r30, 0x01	; 1
    146c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1470:	85 ff       	sbrs	r24, 5
    1472:	fc cf       	rjmp	.-8      	; 0x146c <__EEPROM_REGION_LENGTH__+0x46c>
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    1474:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1478:	90 81       	ld	r25, Z
    147a:	91 11       	cpse	r25, r1
    147c:	f6 cf       	rjmp	.-20     	; 0x146a <__EEPROM_REGION_LENGTH__+0x46a>
	UDR0 = c;
    147e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1482:	85 ff       	sbrs	r24, 5
    1484:	fc cf       	rjmp	.-8      	; 0x147e <__EEPROM_REGION_LENGTH__+0x47e>
    1486:	81 e2       	ldi	r24, 0x21	; 33
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1488:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    148c:	c4 cf       	rjmp	.-120    	; 0x1416 <__EEPROM_REGION_LENGTH__+0x416>
	UDR0 = c;
    148e:	31 96       	adiw	r30, 0x01	; 1
    1490:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1494:	85 ff       	sbrs	r24, 5
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    1496:	fc cf       	rjmp	.-8      	; 0x1490 <__EEPROM_REGION_LENGTH__+0x490>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1498:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    149c:	02 c0       	rjmp	.+4      	; 0x14a2 <__EEPROM_REGION_LENGTH__+0x4a2>
    149e:	e8 e9       	ldi	r30, 0x98	; 152
	UDR0 = c;
    14a0:	f2 e0       	ldi	r31, 0x02	; 2
    14a2:	90 81       	ld	r25, Z
    14a4:	91 11       	cpse	r25, r1
    14a6:	f3 cf       	rjmp	.-26     	; 0x148e <__EEPROM_REGION_LENGTH__+0x48e>
    14a8:	b6 cf       	rjmp	.-148    	; 0x1416 <__EEPROM_REGION_LENGTH__+0x416>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    14aa:	31 96       	adiw	r30, 0x01	; 1
    14ac:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    14b0:	85 ff       	sbrs	r24, 5
		uart_putc(*str++);
    14b2:	fc cf       	rjmp	.-8      	; 0x14ac <__EEPROM_REGION_LENGTH__+0x4ac>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    14b4:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    14b8:	90 81       	ld	r25, Z
    14ba:	91 11       	cpse	r25, r1
	UDR0 = c;
    14bc:	f6 cf       	rjmp	.-20     	; 0x14aa <__EEPROM_REGION_LENGTH__+0x4aa>
    14be:	80 91 de 02 	lds	r24, 0x02DE	; 0x8002de <beatCount>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    14c2:	90 91 df 02 	lds	r25, 0x02DF	; 0x8002df <beatCount+0x1>
            uart_putc('!');
        } else {
            uart_puts("--");
        }
        uart_puts(" [");
        uart_putInt(beatCount);
    14c6:	09 2e       	mov	r0, r25
    14c8:	00 0c       	add	r0, r0
    14ca:	aa 0b       	sbc	r26, r26
    14cc:	bb 0b       	sbc	r27, r27
    14ce:	bf 93       	push	r27
    14d0:	af 93       	push	r26
    14d2:	9f 93       	push	r25
    14d4:	8f 93       	push	r24
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
    14d6:	84 eb       	ldi	r24, 0xB4	; 180
    14d8:	92 e0       	ldi	r25, 0x02	; 2
    14da:	9f 93       	push	r25
    14dc:	8f 93       	push	r24
    14de:	1f 92       	push	r1
    14e0:	84 e1       	ldi	r24, 0x14	; 20
    14e2:	8f 93       	push	r24
    14e4:	8e 01       	movw	r16, r28
    14e6:	0f 5f       	subi	r16, 0xFF	; 255
    14e8:	1f 4f       	sbci	r17, 0xFF	; 255
    14ea:	1f 93       	push	r17
    14ec:	0f 93       	push	r16
    14ee:	d6 d2       	rcall	.+1452   	; 0x1a9c <snprintf>
    14f0:	0f b6       	in	r0, 0x3f	; 63
    14f2:	f8 94       	cli
    14f4:	de bf       	out	0x3e, r29	; 62
    14f6:	0f be       	out	0x3f, r0	; 63
    14f8:	cd bf       	out	0x3d, r28	; 61
    14fa:	f8 01       	movw	r30, r16
    14fc:	07 c0       	rjmp	.+14     	; 0x150c <__EEPROM_REGION_LENGTH__+0x50c>
    14fe:	31 96       	adiw	r30, 0x01	; 1
    1500:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1504:	85 ff       	sbrs	r24, 5
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    1506:	fc cf       	rjmp	.-8      	; 0x1500 <__EEPROM_REGION_LENGTH__+0x500>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1508:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    150c:	90 81       	ld	r25, Z
    150e:	91 11       	cpse	r25, r1
	UDR0 = c;
    1510:	f6 cf       	rjmp	.-20     	; 0x14fe <__EEPROM_REGION_LENGTH__+0x4fe>
    1512:	e5 ea       	ldi	r30, 0xA5	; 165
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1514:	f2 e0       	ldi	r31, 0x02	; 2
    1516:	07 c0       	rjmp	.+14     	; 0x1526 <__EEPROM_REGION_LENGTH__+0x526>
    1518:	31 96       	adiw	r30, 0x01	; 1
    151a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    151e:	85 ff       	sbrs	r24, 5
		uart_putc(*str++);
    1520:	fc cf       	rjmp	.-8      	; 0x151a <__EEPROM_REGION_LENGTH__+0x51a>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1522:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    1526:	90 81       	ld	r25, Z
    1528:	91 11       	cpse	r25, r1
	UDR0 = c;
    152a:	f6 cf       	rjmp	.-20     	; 0x1518 <__EEPROM_REGION_LENGTH__+0x518>
    152c:	80 91 c2 02 	lds	r24, 0x02C2	; 0x8002c2 <bufferIndex>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1530:	90 91 c3 02 	lds	r25, 0x02C3	; 0x8002c3 <bufferIndex+0x1>
        uart_puts(",");
        uart_putInt(bufferIndex);
    1534:	09 2e       	mov	r0, r25
    1536:	00 0c       	add	r0, r0
    1538:	aa 0b       	sbc	r26, r26
    153a:	bb 0b       	sbc	r27, r27
    153c:	bf 93       	push	r27
    153e:	af 93       	push	r26
    1540:	9f 93       	push	r25
    1542:	8f 93       	push	r24
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
    1544:	84 eb       	ldi	r24, 0xB4	; 180
    1546:	92 e0       	ldi	r25, 0x02	; 2
    1548:	9f 93       	push	r25
    154a:	8f 93       	push	r24
    154c:	1f 92       	push	r1
    154e:	84 e1       	ldi	r24, 0x14	; 20
    1550:	8f 93       	push	r24
    1552:	8e 01       	movw	r16, r28
    1554:	0f 5f       	subi	r16, 0xFF	; 255
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	1f 93       	push	r17
    155a:	0f 93       	push	r16
    155c:	9f d2       	rcall	.+1342   	; 0x1a9c <snprintf>
    155e:	0f b6       	in	r0, 0x3f	; 63
    1560:	f8 94       	cli
    1562:	de bf       	out	0x3e, r29	; 62
    1564:	0f be       	out	0x3f, r0	; 63
    1566:	cd bf       	out	0x3d, r28	; 61
    1568:	f8 01       	movw	r30, r16
    156a:	07 c0       	rjmp	.+14     	; 0x157a <__EEPROM_REGION_LENGTH__+0x57a>
    156c:	31 96       	adiw	r30, 0x01	; 1
    156e:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1572:	85 ff       	sbrs	r24, 5
    1574:	fc cf       	rjmp	.-8      	; 0x156e <__EEPROM_REGION_LENGTH__+0x56e>
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    1576:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    157a:	90 81       	ld	r25, Z
    157c:	91 11       	cpse	r25, r1
    157e:	f6 cf       	rjmp	.-20     	; 0x156c <__EEPROM_REGION_LENGTH__+0x56c>
	UDR0 = c;
    1580:	e7 ea       	ldi	r30, 0xA7	; 167
    1582:	f2 e0       	ldi	r31, 0x02	; 2
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1584:	07 c0       	rjmp	.+14     	; 0x1594 <__EEPROM_REGION_LENGTH__+0x594>
    1586:	31 96       	adiw	r30, 0x01	; 1
    1588:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    158c:	85 ff       	sbrs	r24, 5
    158e:	fc cf       	rjmp	.-8      	; 0x1588 <__EEPROM_REGION_LENGTH__+0x588>
		uart_putc(*str++);
    1590:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1594:	90 81       	ld	r25, Z
    1596:	91 11       	cpse	r25, r1
    1598:	f6 cf       	rjmp	.-20     	; 0x1586 <__EEPROM_REGION_LENGTH__+0x586>
	UDR0 = c;
    159a:	b3 c9       	rjmp	.-3226   	; 0x902 <MAX30102_Start+0x5c>

0000159c <__subsf3>:
    159c:	50 58       	subi	r21, 0x80	; 128

0000159e <__addsf3>:
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    159e:	bb 27       	eor	r27, r27
    15a0:	aa 27       	eor	r26, r26
    15a2:	0e d0       	rcall	.+28     	; 0x15c0 <__addsf3x>
    15a4:	75 c1       	rjmp	.+746    	; 0x1890 <__fp_round>
    15a6:	66 d1       	rcall	.+716    	; 0x1874 <__fp_pscA>
    15a8:	30 f0       	brcs	.+12     	; 0x15b6 <__addsf3+0x18>
    15aa:	6b d1       	rcall	.+726    	; 0x1882 <__fp_pscB>
    15ac:	20 f0       	brcs	.+8      	; 0x15b6 <__addsf3+0x18>
    15ae:	31 f4       	brne	.+12     	; 0x15bc <__addsf3+0x1e>
    15b0:	9f 3f       	cpi	r25, 0xFF	; 255
    15b2:	11 f4       	brne	.+4      	; 0x15b8 <__addsf3+0x1a>
    15b4:	1e f4       	brtc	.+6      	; 0x15bc <__addsf3+0x1e>
    15b6:	5b c1       	rjmp	.+694    	; 0x186e <__fp_nan>
    15b8:	0e f4       	brtc	.+2      	; 0x15bc <__addsf3+0x1e>
    15ba:	e0 95       	com	r30
    15bc:	e7 fb       	bst	r30, 7
    15be:	51 c1       	rjmp	.+674    	; 0x1862 <__fp_inf>

000015c0 <__addsf3x>:
    15c0:	e9 2f       	mov	r30, r25
    15c2:	77 d1       	rcall	.+750    	; 0x18b2 <__fp_split3>
    15c4:	80 f3       	brcs	.-32     	; 0x15a6 <__addsf3+0x8>
    15c6:	ba 17       	cp	r27, r26
    15c8:	62 07       	cpc	r22, r18
    15ca:	73 07       	cpc	r23, r19
    15cc:	84 07       	cpc	r24, r20
    15ce:	95 07       	cpc	r25, r21
    15d0:	18 f0       	brcs	.+6      	; 0x15d8 <__addsf3x+0x18>
    15d2:	71 f4       	brne	.+28     	; 0x15f0 <__addsf3x+0x30>
    15d4:	9e f5       	brtc	.+102    	; 0x163c <__addsf3x+0x7c>
    15d6:	8f c1       	rjmp	.+798    	; 0x18f6 <__fp_zero>
    15d8:	0e f4       	brtc	.+2      	; 0x15dc <__addsf3x+0x1c>
    15da:	e0 95       	com	r30
    15dc:	0b 2e       	mov	r0, r27
    15de:	ba 2f       	mov	r27, r26
    15e0:	a0 2d       	mov	r26, r0
    15e2:	0b 01       	movw	r0, r22
    15e4:	b9 01       	movw	r22, r18
    15e6:	90 01       	movw	r18, r0
    15e8:	0c 01       	movw	r0, r24
    15ea:	ca 01       	movw	r24, r20
    15ec:	a0 01       	movw	r20, r0
    15ee:	11 24       	eor	r1, r1
    15f0:	ff 27       	eor	r31, r31
    15f2:	59 1b       	sub	r21, r25
    15f4:	99 f0       	breq	.+38     	; 0x161c <__addsf3x+0x5c>
    15f6:	59 3f       	cpi	r21, 0xF9	; 249
    15f8:	50 f4       	brcc	.+20     	; 0x160e <__addsf3x+0x4e>
    15fa:	50 3e       	cpi	r21, 0xE0	; 224
    15fc:	68 f1       	brcs	.+90     	; 0x1658 <__addsf3x+0x98>
    15fe:	1a 16       	cp	r1, r26
    1600:	f0 40       	sbci	r31, 0x00	; 0
    1602:	a2 2f       	mov	r26, r18
    1604:	23 2f       	mov	r18, r19
    1606:	34 2f       	mov	r19, r20
    1608:	44 27       	eor	r20, r20
    160a:	58 5f       	subi	r21, 0xF8	; 248
    160c:	f3 cf       	rjmp	.-26     	; 0x15f4 <__addsf3x+0x34>
    160e:	46 95       	lsr	r20
    1610:	37 95       	ror	r19
    1612:	27 95       	ror	r18
    1614:	a7 95       	ror	r26
    1616:	f0 40       	sbci	r31, 0x00	; 0
    1618:	53 95       	inc	r21
    161a:	c9 f7       	brne	.-14     	; 0x160e <__addsf3x+0x4e>
    161c:	7e f4       	brtc	.+30     	; 0x163c <__addsf3x+0x7c>
    161e:	1f 16       	cp	r1, r31
    1620:	ba 0b       	sbc	r27, r26
    1622:	62 0b       	sbc	r22, r18
    1624:	73 0b       	sbc	r23, r19
    1626:	84 0b       	sbc	r24, r20
    1628:	ba f0       	brmi	.+46     	; 0x1658 <__addsf3x+0x98>
    162a:	91 50       	subi	r25, 0x01	; 1
    162c:	a1 f0       	breq	.+40     	; 0x1656 <__addsf3x+0x96>
    162e:	ff 0f       	add	r31, r31
    1630:	bb 1f       	adc	r27, r27
    1632:	66 1f       	adc	r22, r22
    1634:	77 1f       	adc	r23, r23
    1636:	88 1f       	adc	r24, r24
    1638:	c2 f7       	brpl	.-16     	; 0x162a <__addsf3x+0x6a>
    163a:	0e c0       	rjmp	.+28     	; 0x1658 <__addsf3x+0x98>
    163c:	ba 0f       	add	r27, r26
    163e:	62 1f       	adc	r22, r18
    1640:	73 1f       	adc	r23, r19
    1642:	84 1f       	adc	r24, r20
    1644:	48 f4       	brcc	.+18     	; 0x1658 <__addsf3x+0x98>
    1646:	87 95       	ror	r24
    1648:	77 95       	ror	r23
    164a:	67 95       	ror	r22
    164c:	b7 95       	ror	r27
    164e:	f7 95       	ror	r31
    1650:	9e 3f       	cpi	r25, 0xFE	; 254
    1652:	08 f0       	brcs	.+2      	; 0x1656 <__addsf3x+0x96>
    1654:	b3 cf       	rjmp	.-154    	; 0x15bc <__addsf3+0x1e>
    1656:	93 95       	inc	r25
    1658:	88 0f       	add	r24, r24
    165a:	08 f0       	brcs	.+2      	; 0x165e <__addsf3x+0x9e>
    165c:	99 27       	eor	r25, r25
    165e:	ee 0f       	add	r30, r30
    1660:	97 95       	ror	r25
    1662:	87 95       	ror	r24
    1664:	08 95       	ret

00001666 <__cmpsf2>:
    1666:	d9 d0       	rcall	.+434    	; 0x181a <__fp_cmp>
    1668:	08 f4       	brcc	.+2      	; 0x166c <__cmpsf2+0x6>
    166a:	81 e0       	ldi	r24, 0x01	; 1
    166c:	08 95       	ret

0000166e <__divsf3>:
    166e:	0c d0       	rcall	.+24     	; 0x1688 <__divsf3x>
    1670:	0f c1       	rjmp	.+542    	; 0x1890 <__fp_round>
    1672:	07 d1       	rcall	.+526    	; 0x1882 <__fp_pscB>
    1674:	40 f0       	brcs	.+16     	; 0x1686 <__divsf3+0x18>
    1676:	fe d0       	rcall	.+508    	; 0x1874 <__fp_pscA>
    1678:	30 f0       	brcs	.+12     	; 0x1686 <__divsf3+0x18>
    167a:	21 f4       	brne	.+8      	; 0x1684 <__divsf3+0x16>
    167c:	5f 3f       	cpi	r21, 0xFF	; 255
    167e:	19 f0       	breq	.+6      	; 0x1686 <__divsf3+0x18>
    1680:	f0 c0       	rjmp	.+480    	; 0x1862 <__fp_inf>
    1682:	51 11       	cpse	r21, r1
    1684:	39 c1       	rjmp	.+626    	; 0x18f8 <__fp_szero>
    1686:	f3 c0       	rjmp	.+486    	; 0x186e <__fp_nan>

00001688 <__divsf3x>:
    1688:	14 d1       	rcall	.+552    	; 0x18b2 <__fp_split3>
    168a:	98 f3       	brcs	.-26     	; 0x1672 <__divsf3+0x4>

0000168c <__divsf3_pse>:
    168c:	99 23       	and	r25, r25
    168e:	c9 f3       	breq	.-14     	; 0x1682 <__divsf3+0x14>
    1690:	55 23       	and	r21, r21
    1692:	b1 f3       	breq	.-20     	; 0x1680 <__divsf3+0x12>
    1694:	95 1b       	sub	r25, r21
    1696:	55 0b       	sbc	r21, r21
    1698:	bb 27       	eor	r27, r27
    169a:	aa 27       	eor	r26, r26
    169c:	62 17       	cp	r22, r18
    169e:	73 07       	cpc	r23, r19
    16a0:	84 07       	cpc	r24, r20
    16a2:	38 f0       	brcs	.+14     	; 0x16b2 <__divsf3_pse+0x26>
    16a4:	9f 5f       	subi	r25, 0xFF	; 255
    16a6:	5f 4f       	sbci	r21, 0xFF	; 255
    16a8:	22 0f       	add	r18, r18
    16aa:	33 1f       	adc	r19, r19
    16ac:	44 1f       	adc	r20, r20
    16ae:	aa 1f       	adc	r26, r26
    16b0:	a9 f3       	breq	.-22     	; 0x169c <__divsf3_pse+0x10>
    16b2:	33 d0       	rcall	.+102    	; 0x171a <__divsf3_pse+0x8e>
    16b4:	0e 2e       	mov	r0, r30
    16b6:	3a f0       	brmi	.+14     	; 0x16c6 <__divsf3_pse+0x3a>
    16b8:	e0 e8       	ldi	r30, 0x80	; 128
    16ba:	30 d0       	rcall	.+96     	; 0x171c <__divsf3_pse+0x90>
    16bc:	91 50       	subi	r25, 0x01	; 1
    16be:	50 40       	sbci	r21, 0x00	; 0
    16c0:	e6 95       	lsr	r30
    16c2:	00 1c       	adc	r0, r0
    16c4:	ca f7       	brpl	.-14     	; 0x16b8 <__divsf3_pse+0x2c>
    16c6:	29 d0       	rcall	.+82     	; 0x171a <__divsf3_pse+0x8e>
    16c8:	fe 2f       	mov	r31, r30
    16ca:	27 d0       	rcall	.+78     	; 0x171a <__divsf3_pse+0x8e>
    16cc:	66 0f       	add	r22, r22
    16ce:	77 1f       	adc	r23, r23
    16d0:	88 1f       	adc	r24, r24
    16d2:	bb 1f       	adc	r27, r27
    16d4:	26 17       	cp	r18, r22
    16d6:	37 07       	cpc	r19, r23
    16d8:	48 07       	cpc	r20, r24
    16da:	ab 07       	cpc	r26, r27
    16dc:	b0 e8       	ldi	r27, 0x80	; 128
    16de:	09 f0       	breq	.+2      	; 0x16e2 <__divsf3_pse+0x56>
    16e0:	bb 0b       	sbc	r27, r27
    16e2:	80 2d       	mov	r24, r0
    16e4:	bf 01       	movw	r22, r30
    16e6:	ff 27       	eor	r31, r31
    16e8:	93 58       	subi	r25, 0x83	; 131
    16ea:	5f 4f       	sbci	r21, 0xFF	; 255
    16ec:	2a f0       	brmi	.+10     	; 0x16f8 <__divsf3_pse+0x6c>
    16ee:	9e 3f       	cpi	r25, 0xFE	; 254
    16f0:	51 05       	cpc	r21, r1
    16f2:	68 f0       	brcs	.+26     	; 0x170e <__divsf3_pse+0x82>
    16f4:	b6 c0       	rjmp	.+364    	; 0x1862 <__fp_inf>
    16f6:	00 c1       	rjmp	.+512    	; 0x18f8 <__fp_szero>
    16f8:	5f 3f       	cpi	r21, 0xFF	; 255
    16fa:	ec f3       	brlt	.-6      	; 0x16f6 <__divsf3_pse+0x6a>
    16fc:	98 3e       	cpi	r25, 0xE8	; 232
    16fe:	dc f3       	brlt	.-10     	; 0x16f6 <__divsf3_pse+0x6a>
    1700:	86 95       	lsr	r24
    1702:	77 95       	ror	r23
    1704:	67 95       	ror	r22
    1706:	b7 95       	ror	r27
    1708:	f7 95       	ror	r31
    170a:	9f 5f       	subi	r25, 0xFF	; 255
    170c:	c9 f7       	brne	.-14     	; 0x1700 <__divsf3_pse+0x74>
    170e:	88 0f       	add	r24, r24
    1710:	91 1d       	adc	r25, r1
    1712:	96 95       	lsr	r25
    1714:	87 95       	ror	r24
    1716:	97 f9       	bld	r25, 7
    1718:	08 95       	ret
    171a:	e1 e0       	ldi	r30, 0x01	; 1
    171c:	66 0f       	add	r22, r22
    171e:	77 1f       	adc	r23, r23
    1720:	88 1f       	adc	r24, r24
    1722:	bb 1f       	adc	r27, r27
    1724:	62 17       	cp	r22, r18
    1726:	73 07       	cpc	r23, r19
    1728:	84 07       	cpc	r24, r20
    172a:	ba 07       	cpc	r27, r26
    172c:	20 f0       	brcs	.+8      	; 0x1736 <__divsf3_pse+0xaa>
    172e:	62 1b       	sub	r22, r18
    1730:	73 0b       	sbc	r23, r19
    1732:	84 0b       	sbc	r24, r20
    1734:	ba 0b       	sbc	r27, r26
    1736:	ee 1f       	adc	r30, r30
    1738:	88 f7       	brcc	.-30     	; 0x171c <__divsf3_pse+0x90>
    173a:	e0 95       	com	r30
    173c:	08 95       	ret

0000173e <__fixsfsi>:
    173e:	04 d0       	rcall	.+8      	; 0x1748 <__fixunssfsi>
    1740:	68 94       	set
    1742:	b1 11       	cpse	r27, r1
    1744:	d9 c0       	rjmp	.+434    	; 0x18f8 <__fp_szero>
    1746:	08 95       	ret

00001748 <__fixunssfsi>:
    1748:	bc d0       	rcall	.+376    	; 0x18c2 <__fp_splitA>
    174a:	88 f0       	brcs	.+34     	; 0x176e <__fixunssfsi+0x26>
    174c:	9f 57       	subi	r25, 0x7F	; 127
    174e:	90 f0       	brcs	.+36     	; 0x1774 <__fixunssfsi+0x2c>
    1750:	b9 2f       	mov	r27, r25
    1752:	99 27       	eor	r25, r25
    1754:	b7 51       	subi	r27, 0x17	; 23
    1756:	a0 f0       	brcs	.+40     	; 0x1780 <__fixunssfsi+0x38>
    1758:	d1 f0       	breq	.+52     	; 0x178e <__fixunssfsi+0x46>
    175a:	66 0f       	add	r22, r22
    175c:	77 1f       	adc	r23, r23
    175e:	88 1f       	adc	r24, r24
    1760:	99 1f       	adc	r25, r25
    1762:	1a f0       	brmi	.+6      	; 0x176a <__fixunssfsi+0x22>
    1764:	ba 95       	dec	r27
    1766:	c9 f7       	brne	.-14     	; 0x175a <__fixunssfsi+0x12>
    1768:	12 c0       	rjmp	.+36     	; 0x178e <__fixunssfsi+0x46>
    176a:	b1 30       	cpi	r27, 0x01	; 1
    176c:	81 f0       	breq	.+32     	; 0x178e <__fixunssfsi+0x46>
    176e:	c3 d0       	rcall	.+390    	; 0x18f6 <__fp_zero>
    1770:	b1 e0       	ldi	r27, 0x01	; 1
    1772:	08 95       	ret
    1774:	c0 c0       	rjmp	.+384    	; 0x18f6 <__fp_zero>
    1776:	67 2f       	mov	r22, r23
    1778:	78 2f       	mov	r23, r24
    177a:	88 27       	eor	r24, r24
    177c:	b8 5f       	subi	r27, 0xF8	; 248
    177e:	39 f0       	breq	.+14     	; 0x178e <__fixunssfsi+0x46>
    1780:	b9 3f       	cpi	r27, 0xF9	; 249
    1782:	cc f3       	brlt	.-14     	; 0x1776 <__fixunssfsi+0x2e>
    1784:	86 95       	lsr	r24
    1786:	77 95       	ror	r23
    1788:	67 95       	ror	r22
    178a:	b3 95       	inc	r27
    178c:	d9 f7       	brne	.-10     	; 0x1784 <__fixunssfsi+0x3c>
    178e:	3e f4       	brtc	.+14     	; 0x179e <__fixunssfsi+0x56>
    1790:	90 95       	com	r25
    1792:	80 95       	com	r24
    1794:	70 95       	com	r23
    1796:	61 95       	neg	r22
    1798:	7f 4f       	sbci	r23, 0xFF	; 255
    179a:	8f 4f       	sbci	r24, 0xFF	; 255
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	08 95       	ret

000017a0 <__floatunsisf>:
    17a0:	e8 94       	clt
    17a2:	09 c0       	rjmp	.+18     	; 0x17b6 <__floatsisf+0x12>

000017a4 <__floatsisf>:
    17a4:	97 fb       	bst	r25, 7
    17a6:	3e f4       	brtc	.+14     	; 0x17b6 <__floatsisf+0x12>
    17a8:	90 95       	com	r25
    17aa:	80 95       	com	r24
    17ac:	70 95       	com	r23
    17ae:	61 95       	neg	r22
    17b0:	7f 4f       	sbci	r23, 0xFF	; 255
    17b2:	8f 4f       	sbci	r24, 0xFF	; 255
    17b4:	9f 4f       	sbci	r25, 0xFF	; 255
    17b6:	99 23       	and	r25, r25
    17b8:	a9 f0       	breq	.+42     	; 0x17e4 <__floatsisf+0x40>
    17ba:	f9 2f       	mov	r31, r25
    17bc:	96 e9       	ldi	r25, 0x96	; 150
    17be:	bb 27       	eor	r27, r27
    17c0:	93 95       	inc	r25
    17c2:	f6 95       	lsr	r31
    17c4:	87 95       	ror	r24
    17c6:	77 95       	ror	r23
    17c8:	67 95       	ror	r22
    17ca:	b7 95       	ror	r27
    17cc:	f1 11       	cpse	r31, r1
    17ce:	f8 cf       	rjmp	.-16     	; 0x17c0 <__floatsisf+0x1c>
    17d0:	fa f4       	brpl	.+62     	; 0x1810 <__floatsisf+0x6c>
    17d2:	bb 0f       	add	r27, r27
    17d4:	11 f4       	brne	.+4      	; 0x17da <__floatsisf+0x36>
    17d6:	60 ff       	sbrs	r22, 0
    17d8:	1b c0       	rjmp	.+54     	; 0x1810 <__floatsisf+0x6c>
    17da:	6f 5f       	subi	r22, 0xFF	; 255
    17dc:	7f 4f       	sbci	r23, 0xFF	; 255
    17de:	8f 4f       	sbci	r24, 0xFF	; 255
    17e0:	9f 4f       	sbci	r25, 0xFF	; 255
    17e2:	16 c0       	rjmp	.+44     	; 0x1810 <__floatsisf+0x6c>
    17e4:	88 23       	and	r24, r24
    17e6:	11 f0       	breq	.+4      	; 0x17ec <__floatsisf+0x48>
    17e8:	96 e9       	ldi	r25, 0x96	; 150
    17ea:	11 c0       	rjmp	.+34     	; 0x180e <__floatsisf+0x6a>
    17ec:	77 23       	and	r23, r23
    17ee:	21 f0       	breq	.+8      	; 0x17f8 <__floatsisf+0x54>
    17f0:	9e e8       	ldi	r25, 0x8E	; 142
    17f2:	87 2f       	mov	r24, r23
    17f4:	76 2f       	mov	r23, r22
    17f6:	05 c0       	rjmp	.+10     	; 0x1802 <__floatsisf+0x5e>
    17f8:	66 23       	and	r22, r22
    17fa:	71 f0       	breq	.+28     	; 0x1818 <__floatsisf+0x74>
    17fc:	96 e8       	ldi	r25, 0x86	; 134
    17fe:	86 2f       	mov	r24, r22
    1800:	70 e0       	ldi	r23, 0x00	; 0
    1802:	60 e0       	ldi	r22, 0x00	; 0
    1804:	2a f0       	brmi	.+10     	; 0x1810 <__floatsisf+0x6c>
    1806:	9a 95       	dec	r25
    1808:	66 0f       	add	r22, r22
    180a:	77 1f       	adc	r23, r23
    180c:	88 1f       	adc	r24, r24
    180e:	da f7       	brpl	.-10     	; 0x1806 <__floatsisf+0x62>
    1810:	88 0f       	add	r24, r24
    1812:	96 95       	lsr	r25
    1814:	87 95       	ror	r24
    1816:	97 f9       	bld	r25, 7
    1818:	08 95       	ret

0000181a <__fp_cmp>:
    181a:	99 0f       	add	r25, r25
    181c:	00 08       	sbc	r0, r0
    181e:	55 0f       	add	r21, r21
    1820:	aa 0b       	sbc	r26, r26
    1822:	e0 e8       	ldi	r30, 0x80	; 128
    1824:	fe ef       	ldi	r31, 0xFE	; 254
    1826:	16 16       	cp	r1, r22
    1828:	17 06       	cpc	r1, r23
    182a:	e8 07       	cpc	r30, r24
    182c:	f9 07       	cpc	r31, r25
    182e:	c0 f0       	brcs	.+48     	; 0x1860 <__fp_cmp+0x46>
    1830:	12 16       	cp	r1, r18
    1832:	13 06       	cpc	r1, r19
    1834:	e4 07       	cpc	r30, r20
    1836:	f5 07       	cpc	r31, r21
    1838:	98 f0       	brcs	.+38     	; 0x1860 <__fp_cmp+0x46>
    183a:	62 1b       	sub	r22, r18
    183c:	73 0b       	sbc	r23, r19
    183e:	84 0b       	sbc	r24, r20
    1840:	95 0b       	sbc	r25, r21
    1842:	39 f4       	brne	.+14     	; 0x1852 <__fp_cmp+0x38>
    1844:	0a 26       	eor	r0, r26
    1846:	61 f0       	breq	.+24     	; 0x1860 <__fp_cmp+0x46>
    1848:	23 2b       	or	r18, r19
    184a:	24 2b       	or	r18, r20
    184c:	25 2b       	or	r18, r21
    184e:	21 f4       	brne	.+8      	; 0x1858 <__fp_cmp+0x3e>
    1850:	08 95       	ret
    1852:	0a 26       	eor	r0, r26
    1854:	09 f4       	brne	.+2      	; 0x1858 <__fp_cmp+0x3e>
    1856:	a1 40       	sbci	r26, 0x01	; 1
    1858:	a6 95       	lsr	r26
    185a:	8f ef       	ldi	r24, 0xFF	; 255
    185c:	81 1d       	adc	r24, r1
    185e:	81 1d       	adc	r24, r1
    1860:	08 95       	ret

00001862 <__fp_inf>:
    1862:	97 f9       	bld	r25, 7
    1864:	9f 67       	ori	r25, 0x7F	; 127
    1866:	80 e8       	ldi	r24, 0x80	; 128
    1868:	70 e0       	ldi	r23, 0x00	; 0
    186a:	60 e0       	ldi	r22, 0x00	; 0
    186c:	08 95       	ret

0000186e <__fp_nan>:
    186e:	9f ef       	ldi	r25, 0xFF	; 255
    1870:	80 ec       	ldi	r24, 0xC0	; 192
    1872:	08 95       	ret

00001874 <__fp_pscA>:
    1874:	00 24       	eor	r0, r0
    1876:	0a 94       	dec	r0
    1878:	16 16       	cp	r1, r22
    187a:	17 06       	cpc	r1, r23
    187c:	18 06       	cpc	r1, r24
    187e:	09 06       	cpc	r0, r25
    1880:	08 95       	ret

00001882 <__fp_pscB>:
    1882:	00 24       	eor	r0, r0
    1884:	0a 94       	dec	r0
    1886:	12 16       	cp	r1, r18
    1888:	13 06       	cpc	r1, r19
    188a:	14 06       	cpc	r1, r20
    188c:	05 06       	cpc	r0, r21
    188e:	08 95       	ret

00001890 <__fp_round>:
    1890:	09 2e       	mov	r0, r25
    1892:	03 94       	inc	r0
    1894:	00 0c       	add	r0, r0
    1896:	11 f4       	brne	.+4      	; 0x189c <__fp_round+0xc>
    1898:	88 23       	and	r24, r24
    189a:	52 f0       	brmi	.+20     	; 0x18b0 <__fp_round+0x20>
    189c:	bb 0f       	add	r27, r27
    189e:	40 f4       	brcc	.+16     	; 0x18b0 <__fp_round+0x20>
    18a0:	bf 2b       	or	r27, r31
    18a2:	11 f4       	brne	.+4      	; 0x18a8 <__fp_round+0x18>
    18a4:	60 ff       	sbrs	r22, 0
    18a6:	04 c0       	rjmp	.+8      	; 0x18b0 <__fp_round+0x20>
    18a8:	6f 5f       	subi	r22, 0xFF	; 255
    18aa:	7f 4f       	sbci	r23, 0xFF	; 255
    18ac:	8f 4f       	sbci	r24, 0xFF	; 255
    18ae:	9f 4f       	sbci	r25, 0xFF	; 255
    18b0:	08 95       	ret

000018b2 <__fp_split3>:
    18b2:	57 fd       	sbrc	r21, 7
    18b4:	90 58       	subi	r25, 0x80	; 128
    18b6:	44 0f       	add	r20, r20
    18b8:	55 1f       	adc	r21, r21
    18ba:	59 f0       	breq	.+22     	; 0x18d2 <__fp_splitA+0x10>
    18bc:	5f 3f       	cpi	r21, 0xFF	; 255
    18be:	71 f0       	breq	.+28     	; 0x18dc <__fp_splitA+0x1a>
    18c0:	47 95       	ror	r20

000018c2 <__fp_splitA>:
    18c2:	88 0f       	add	r24, r24
    18c4:	97 fb       	bst	r25, 7
    18c6:	99 1f       	adc	r25, r25
    18c8:	61 f0       	breq	.+24     	; 0x18e2 <__fp_splitA+0x20>
    18ca:	9f 3f       	cpi	r25, 0xFF	; 255
    18cc:	79 f0       	breq	.+30     	; 0x18ec <__fp_splitA+0x2a>
    18ce:	87 95       	ror	r24
    18d0:	08 95       	ret
    18d2:	12 16       	cp	r1, r18
    18d4:	13 06       	cpc	r1, r19
    18d6:	14 06       	cpc	r1, r20
    18d8:	55 1f       	adc	r21, r21
    18da:	f2 cf       	rjmp	.-28     	; 0x18c0 <__fp_split3+0xe>
    18dc:	46 95       	lsr	r20
    18de:	f1 df       	rcall	.-30     	; 0x18c2 <__fp_splitA>
    18e0:	08 c0       	rjmp	.+16     	; 0x18f2 <__fp_splitA+0x30>
    18e2:	16 16       	cp	r1, r22
    18e4:	17 06       	cpc	r1, r23
    18e6:	18 06       	cpc	r1, r24
    18e8:	99 1f       	adc	r25, r25
    18ea:	f1 cf       	rjmp	.-30     	; 0x18ce <__fp_splitA+0xc>
    18ec:	86 95       	lsr	r24
    18ee:	71 05       	cpc	r23, r1
    18f0:	61 05       	cpc	r22, r1
    18f2:	08 94       	sec
    18f4:	08 95       	ret

000018f6 <__fp_zero>:
    18f6:	e8 94       	clt

000018f8 <__fp_szero>:
    18f8:	bb 27       	eor	r27, r27
    18fa:	66 27       	eor	r22, r22
    18fc:	77 27       	eor	r23, r23
    18fe:	cb 01       	movw	r24, r22
    1900:	97 f9       	bld	r25, 7
    1902:	08 95       	ret

00001904 <__gesf2>:
    1904:	8a df       	rcall	.-236    	; 0x181a <__fp_cmp>
    1906:	08 f4       	brcc	.+2      	; 0x190a <__gesf2+0x6>
    1908:	8f ef       	ldi	r24, 0xFF	; 255
    190a:	08 95       	ret

0000190c <__mulsf3>:
    190c:	0b d0       	rcall	.+22     	; 0x1924 <__mulsf3x>
    190e:	c0 cf       	rjmp	.-128    	; 0x1890 <__fp_round>
    1910:	b1 df       	rcall	.-158    	; 0x1874 <__fp_pscA>
    1912:	28 f0       	brcs	.+10     	; 0x191e <__mulsf3+0x12>
    1914:	b6 df       	rcall	.-148    	; 0x1882 <__fp_pscB>
    1916:	18 f0       	brcs	.+6      	; 0x191e <__mulsf3+0x12>
    1918:	95 23       	and	r25, r21
    191a:	09 f0       	breq	.+2      	; 0x191e <__mulsf3+0x12>
    191c:	a2 cf       	rjmp	.-188    	; 0x1862 <__fp_inf>
    191e:	a7 cf       	rjmp	.-178    	; 0x186e <__fp_nan>
    1920:	11 24       	eor	r1, r1
    1922:	ea cf       	rjmp	.-44     	; 0x18f8 <__fp_szero>

00001924 <__mulsf3x>:
    1924:	c6 df       	rcall	.-116    	; 0x18b2 <__fp_split3>
    1926:	a0 f3       	brcs	.-24     	; 0x1910 <__mulsf3+0x4>

00001928 <__mulsf3_pse>:
    1928:	95 9f       	mul	r25, r21
    192a:	d1 f3       	breq	.-12     	; 0x1920 <__mulsf3+0x14>
    192c:	95 0f       	add	r25, r21
    192e:	50 e0       	ldi	r21, 0x00	; 0
    1930:	55 1f       	adc	r21, r21
    1932:	62 9f       	mul	r22, r18
    1934:	f0 01       	movw	r30, r0
    1936:	72 9f       	mul	r23, r18
    1938:	bb 27       	eor	r27, r27
    193a:	f0 0d       	add	r31, r0
    193c:	b1 1d       	adc	r27, r1
    193e:	63 9f       	mul	r22, r19
    1940:	aa 27       	eor	r26, r26
    1942:	f0 0d       	add	r31, r0
    1944:	b1 1d       	adc	r27, r1
    1946:	aa 1f       	adc	r26, r26
    1948:	64 9f       	mul	r22, r20
    194a:	66 27       	eor	r22, r22
    194c:	b0 0d       	add	r27, r0
    194e:	a1 1d       	adc	r26, r1
    1950:	66 1f       	adc	r22, r22
    1952:	82 9f       	mul	r24, r18
    1954:	22 27       	eor	r18, r18
    1956:	b0 0d       	add	r27, r0
    1958:	a1 1d       	adc	r26, r1
    195a:	62 1f       	adc	r22, r18
    195c:	73 9f       	mul	r23, r19
    195e:	b0 0d       	add	r27, r0
    1960:	a1 1d       	adc	r26, r1
    1962:	62 1f       	adc	r22, r18
    1964:	83 9f       	mul	r24, r19
    1966:	a0 0d       	add	r26, r0
    1968:	61 1d       	adc	r22, r1
    196a:	22 1f       	adc	r18, r18
    196c:	74 9f       	mul	r23, r20
    196e:	33 27       	eor	r19, r19
    1970:	a0 0d       	add	r26, r0
    1972:	61 1d       	adc	r22, r1
    1974:	23 1f       	adc	r18, r19
    1976:	84 9f       	mul	r24, r20
    1978:	60 0d       	add	r22, r0
    197a:	21 1d       	adc	r18, r1
    197c:	82 2f       	mov	r24, r18
    197e:	76 2f       	mov	r23, r22
    1980:	6a 2f       	mov	r22, r26
    1982:	11 24       	eor	r1, r1
    1984:	9f 57       	subi	r25, 0x7F	; 127
    1986:	50 40       	sbci	r21, 0x00	; 0
    1988:	8a f0       	brmi	.+34     	; 0x19ac <__mulsf3_pse+0x84>
    198a:	e1 f0       	breq	.+56     	; 0x19c4 <__mulsf3_pse+0x9c>
    198c:	88 23       	and	r24, r24
    198e:	4a f0       	brmi	.+18     	; 0x19a2 <__mulsf3_pse+0x7a>
    1990:	ee 0f       	add	r30, r30
    1992:	ff 1f       	adc	r31, r31
    1994:	bb 1f       	adc	r27, r27
    1996:	66 1f       	adc	r22, r22
    1998:	77 1f       	adc	r23, r23
    199a:	88 1f       	adc	r24, r24
    199c:	91 50       	subi	r25, 0x01	; 1
    199e:	50 40       	sbci	r21, 0x00	; 0
    19a0:	a9 f7       	brne	.-22     	; 0x198c <__mulsf3_pse+0x64>
    19a2:	9e 3f       	cpi	r25, 0xFE	; 254
    19a4:	51 05       	cpc	r21, r1
    19a6:	70 f0       	brcs	.+28     	; 0x19c4 <__mulsf3_pse+0x9c>
    19a8:	5c cf       	rjmp	.-328    	; 0x1862 <__fp_inf>
    19aa:	a6 cf       	rjmp	.-180    	; 0x18f8 <__fp_szero>
    19ac:	5f 3f       	cpi	r21, 0xFF	; 255
    19ae:	ec f3       	brlt	.-6      	; 0x19aa <__mulsf3_pse+0x82>
    19b0:	98 3e       	cpi	r25, 0xE8	; 232
    19b2:	dc f3       	brlt	.-10     	; 0x19aa <__mulsf3_pse+0x82>
    19b4:	86 95       	lsr	r24
    19b6:	77 95       	ror	r23
    19b8:	67 95       	ror	r22
    19ba:	b7 95       	ror	r27
    19bc:	f7 95       	ror	r31
    19be:	e7 95       	ror	r30
    19c0:	9f 5f       	subi	r25, 0xFF	; 255
    19c2:	c1 f7       	brne	.-16     	; 0x19b4 <__mulsf3_pse+0x8c>
    19c4:	fe 2b       	or	r31, r30
    19c6:	88 0f       	add	r24, r24
    19c8:	91 1d       	adc	r25, r1
    19ca:	96 95       	lsr	r25
    19cc:	87 95       	ror	r24
    19ce:	97 f9       	bld	r25, 7
    19d0:	08 95       	ret

000019d2 <__divmodhi4>:
    19d2:	97 fb       	bst	r25, 7
    19d4:	07 2e       	mov	r0, r23
    19d6:	16 f4       	brtc	.+4      	; 0x19dc <__divmodhi4+0xa>
    19d8:	00 94       	com	r0
    19da:	06 d0       	rcall	.+12     	; 0x19e8 <__divmodhi4_neg1>
    19dc:	77 fd       	sbrc	r23, 7
    19de:	08 d0       	rcall	.+16     	; 0x19f0 <__divmodhi4_neg2>
    19e0:	49 d0       	rcall	.+146    	; 0x1a74 <__udivmodhi4>
    19e2:	07 fc       	sbrc	r0, 7
    19e4:	05 d0       	rcall	.+10     	; 0x19f0 <__divmodhi4_neg2>
    19e6:	3e f4       	brtc	.+14     	; 0x19f6 <__divmodhi4_exit>

000019e8 <__divmodhi4_neg1>:
    19e8:	90 95       	com	r25
    19ea:	81 95       	neg	r24
    19ec:	9f 4f       	sbci	r25, 0xFF	; 255
    19ee:	08 95       	ret

000019f0 <__divmodhi4_neg2>:
    19f0:	70 95       	com	r23
    19f2:	61 95       	neg	r22
    19f4:	7f 4f       	sbci	r23, 0xFF	; 255

000019f6 <__divmodhi4_exit>:
    19f6:	08 95       	ret

000019f8 <__udivmodsi4>:
    19f8:	a1 e2       	ldi	r26, 0x21	; 33
    19fa:	1a 2e       	mov	r1, r26
    19fc:	aa 1b       	sub	r26, r26
    19fe:	bb 1b       	sub	r27, r27
    1a00:	fd 01       	movw	r30, r26
    1a02:	0d c0       	rjmp	.+26     	; 0x1a1e <__udivmodsi4_ep>

00001a04 <__udivmodsi4_loop>:
    1a04:	aa 1f       	adc	r26, r26
    1a06:	bb 1f       	adc	r27, r27
    1a08:	ee 1f       	adc	r30, r30
    1a0a:	ff 1f       	adc	r31, r31
    1a0c:	a2 17       	cp	r26, r18
    1a0e:	b3 07       	cpc	r27, r19
    1a10:	e4 07       	cpc	r30, r20
    1a12:	f5 07       	cpc	r31, r21
    1a14:	20 f0       	brcs	.+8      	; 0x1a1e <__udivmodsi4_ep>
    1a16:	a2 1b       	sub	r26, r18
    1a18:	b3 0b       	sbc	r27, r19
    1a1a:	e4 0b       	sbc	r30, r20
    1a1c:	f5 0b       	sbc	r31, r21

00001a1e <__udivmodsi4_ep>:
    1a1e:	66 1f       	adc	r22, r22
    1a20:	77 1f       	adc	r23, r23
    1a22:	88 1f       	adc	r24, r24
    1a24:	99 1f       	adc	r25, r25
    1a26:	1a 94       	dec	r1
    1a28:	69 f7       	brne	.-38     	; 0x1a04 <__udivmodsi4_loop>
    1a2a:	60 95       	com	r22
    1a2c:	70 95       	com	r23
    1a2e:	80 95       	com	r24
    1a30:	90 95       	com	r25
    1a32:	9b 01       	movw	r18, r22
    1a34:	ac 01       	movw	r20, r24
    1a36:	bd 01       	movw	r22, r26
    1a38:	cf 01       	movw	r24, r30
    1a3a:	08 95       	ret

00001a3c <__divmodsi4>:
    1a3c:	05 2e       	mov	r0, r21
    1a3e:	97 fb       	bst	r25, 7
    1a40:	16 f4       	brtc	.+4      	; 0x1a46 <__divmodsi4+0xa>
    1a42:	00 94       	com	r0
    1a44:	0f d0       	rcall	.+30     	; 0x1a64 <__negsi2>
    1a46:	57 fd       	sbrc	r21, 7
    1a48:	05 d0       	rcall	.+10     	; 0x1a54 <__divmodsi4_neg2>
    1a4a:	d6 df       	rcall	.-84     	; 0x19f8 <__udivmodsi4>
    1a4c:	07 fc       	sbrc	r0, 7
    1a4e:	02 d0       	rcall	.+4      	; 0x1a54 <__divmodsi4_neg2>
    1a50:	46 f4       	brtc	.+16     	; 0x1a62 <__divmodsi4_exit>
    1a52:	08 c0       	rjmp	.+16     	; 0x1a64 <__negsi2>

00001a54 <__divmodsi4_neg2>:
    1a54:	50 95       	com	r21
    1a56:	40 95       	com	r20
    1a58:	30 95       	com	r19
    1a5a:	21 95       	neg	r18
    1a5c:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5e:	4f 4f       	sbci	r20, 0xFF	; 255
    1a60:	5f 4f       	sbci	r21, 0xFF	; 255

00001a62 <__divmodsi4_exit>:
    1a62:	08 95       	ret

00001a64 <__negsi2>:
    1a64:	90 95       	com	r25
    1a66:	80 95       	com	r24
    1a68:	70 95       	com	r23
    1a6a:	61 95       	neg	r22
    1a6c:	7f 4f       	sbci	r23, 0xFF	; 255
    1a6e:	8f 4f       	sbci	r24, 0xFF	; 255
    1a70:	9f 4f       	sbci	r25, 0xFF	; 255
    1a72:	08 95       	ret

00001a74 <__udivmodhi4>:
    1a74:	aa 1b       	sub	r26, r26
    1a76:	bb 1b       	sub	r27, r27
    1a78:	51 e1       	ldi	r21, 0x11	; 17
    1a7a:	07 c0       	rjmp	.+14     	; 0x1a8a <__udivmodhi4_ep>

00001a7c <__udivmodhi4_loop>:
    1a7c:	aa 1f       	adc	r26, r26
    1a7e:	bb 1f       	adc	r27, r27
    1a80:	a6 17       	cp	r26, r22
    1a82:	b7 07       	cpc	r27, r23
    1a84:	10 f0       	brcs	.+4      	; 0x1a8a <__udivmodhi4_ep>
    1a86:	a6 1b       	sub	r26, r22
    1a88:	b7 0b       	sbc	r27, r23

00001a8a <__udivmodhi4_ep>:
    1a8a:	88 1f       	adc	r24, r24
    1a8c:	99 1f       	adc	r25, r25
    1a8e:	5a 95       	dec	r21
    1a90:	a9 f7       	brne	.-22     	; 0x1a7c <__udivmodhi4_loop>
    1a92:	80 95       	com	r24
    1a94:	90 95       	com	r25
    1a96:	bc 01       	movw	r22, r24
    1a98:	cd 01       	movw	r24, r26
    1a9a:	08 95       	ret

00001a9c <snprintf>:
    1a9c:	0f 93       	push	r16
    1a9e:	1f 93       	push	r17
    1aa0:	cf 93       	push	r28
    1aa2:	df 93       	push	r29
    1aa4:	cd b7       	in	r28, 0x3d	; 61
    1aa6:	de b7       	in	r29, 0x3e	; 62
    1aa8:	2e 97       	sbiw	r28, 0x0e	; 14
    1aaa:	0f b6       	in	r0, 0x3f	; 63
    1aac:	f8 94       	cli
    1aae:	de bf       	out	0x3e, r29	; 62
    1ab0:	0f be       	out	0x3f, r0	; 63
    1ab2:	cd bf       	out	0x3d, r28	; 61
    1ab4:	0e 89       	ldd	r16, Y+22	; 0x16
    1ab6:	1f 89       	ldd	r17, Y+23	; 0x17
    1ab8:	88 8d       	ldd	r24, Y+24	; 0x18
    1aba:	99 8d       	ldd	r25, Y+25	; 0x19
    1abc:	26 e0       	ldi	r18, 0x06	; 6
    1abe:	2c 83       	std	Y+4, r18	; 0x04
    1ac0:	1a 83       	std	Y+2, r17	; 0x02
    1ac2:	09 83       	std	Y+1, r16	; 0x01
    1ac4:	97 ff       	sbrs	r25, 7
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <snprintf+0x30>
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e8       	ldi	r25, 0x80	; 128
    1acc:	01 97       	sbiw	r24, 0x01	; 1
    1ace:	9e 83       	std	Y+6, r25	; 0x06
    1ad0:	8d 83       	std	Y+5, r24	; 0x05
    1ad2:	ae 01       	movw	r20, r28
    1ad4:	44 5e       	subi	r20, 0xE4	; 228
    1ad6:	5f 4f       	sbci	r21, 0xFF	; 255
    1ad8:	6a 8d       	ldd	r22, Y+26	; 0x1a
    1ada:	7b 8d       	ldd	r23, Y+27	; 0x1b
    1adc:	ce 01       	movw	r24, r28
    1ade:	01 96       	adiw	r24, 0x01	; 1
    1ae0:	19 d0       	rcall	.+50     	; 0x1b14 <vfprintf>
    1ae2:	4d 81       	ldd	r20, Y+5	; 0x05
    1ae4:	5e 81       	ldd	r21, Y+6	; 0x06
    1ae6:	57 fd       	sbrc	r21, 7
    1ae8:	0a c0       	rjmp	.+20     	; 0x1afe <snprintf+0x62>
    1aea:	2f 81       	ldd	r18, Y+7	; 0x07
    1aec:	38 85       	ldd	r19, Y+8	; 0x08
    1aee:	42 17       	cp	r20, r18
    1af0:	53 07       	cpc	r21, r19
    1af2:	0c f4       	brge	.+2      	; 0x1af6 <snprintf+0x5a>
    1af4:	9a 01       	movw	r18, r20
    1af6:	f8 01       	movw	r30, r16
    1af8:	e2 0f       	add	r30, r18
    1afa:	f3 1f       	adc	r31, r19
    1afc:	10 82       	st	Z, r1
    1afe:	2e 96       	adiw	r28, 0x0e	; 14
    1b00:	0f b6       	in	r0, 0x3f	; 63
    1b02:	f8 94       	cli
    1b04:	de bf       	out	0x3e, r29	; 62
    1b06:	0f be       	out	0x3f, r0	; 63
    1b08:	cd bf       	out	0x3d, r28	; 61
    1b0a:	df 91       	pop	r29
    1b0c:	cf 91       	pop	r28
    1b0e:	1f 91       	pop	r17
    1b10:	0f 91       	pop	r16
    1b12:	08 95       	ret

00001b14 <vfprintf>:
    1b14:	2f 92       	push	r2
    1b16:	3f 92       	push	r3
    1b18:	4f 92       	push	r4
    1b1a:	5f 92       	push	r5
    1b1c:	6f 92       	push	r6
    1b1e:	7f 92       	push	r7
    1b20:	8f 92       	push	r8
    1b22:	9f 92       	push	r9
    1b24:	af 92       	push	r10
    1b26:	bf 92       	push	r11
    1b28:	cf 92       	push	r12
    1b2a:	df 92       	push	r13
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
    1b38:	cd b7       	in	r28, 0x3d	; 61
    1b3a:	de b7       	in	r29, 0x3e	; 62
    1b3c:	2b 97       	sbiw	r28, 0x0b	; 11
    1b3e:	0f b6       	in	r0, 0x3f	; 63
    1b40:	f8 94       	cli
    1b42:	de bf       	out	0x3e, r29	; 62
    1b44:	0f be       	out	0x3f, r0	; 63
    1b46:	cd bf       	out	0x3d, r28	; 61
    1b48:	6c 01       	movw	r12, r24
    1b4a:	7b 01       	movw	r14, r22
    1b4c:	8a 01       	movw	r16, r20
    1b4e:	fc 01       	movw	r30, r24
    1b50:	17 82       	std	Z+7, r1	; 0x07
    1b52:	16 82       	std	Z+6, r1	; 0x06
    1b54:	83 81       	ldd	r24, Z+3	; 0x03
    1b56:	81 ff       	sbrs	r24, 1
    1b58:	bf c1       	rjmp	.+894    	; 0x1ed8 <vfprintf+0x3c4>
    1b5a:	ce 01       	movw	r24, r28
    1b5c:	01 96       	adiw	r24, 0x01	; 1
    1b5e:	3c 01       	movw	r6, r24
    1b60:	f6 01       	movw	r30, r12
    1b62:	93 81       	ldd	r25, Z+3	; 0x03
    1b64:	f7 01       	movw	r30, r14
    1b66:	93 fd       	sbrc	r25, 3
    1b68:	85 91       	lpm	r24, Z+
    1b6a:	93 ff       	sbrs	r25, 3
    1b6c:	81 91       	ld	r24, Z+
    1b6e:	7f 01       	movw	r14, r30
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <vfprintf+0x62>
    1b74:	ad c1       	rjmp	.+858    	; 0x1ed0 <vfprintf+0x3bc>
    1b76:	85 32       	cpi	r24, 0x25	; 37
    1b78:	39 f4       	brne	.+14     	; 0x1b88 <vfprintf+0x74>
    1b7a:	93 fd       	sbrc	r25, 3
    1b7c:	85 91       	lpm	r24, Z+
    1b7e:	93 ff       	sbrs	r25, 3
    1b80:	81 91       	ld	r24, Z+
    1b82:	7f 01       	movw	r14, r30
    1b84:	85 32       	cpi	r24, 0x25	; 37
    1b86:	21 f4       	brne	.+8      	; 0x1b90 <vfprintf+0x7c>
    1b88:	b6 01       	movw	r22, r12
    1b8a:	90 e0       	ldi	r25, 0x00	; 0
    1b8c:	d6 d1       	rcall	.+940    	; 0x1f3a <fputc>
    1b8e:	e8 cf       	rjmp	.-48     	; 0x1b60 <vfprintf+0x4c>
    1b90:	91 2c       	mov	r9, r1
    1b92:	21 2c       	mov	r2, r1
    1b94:	31 2c       	mov	r3, r1
    1b96:	ff e1       	ldi	r31, 0x1F	; 31
    1b98:	f3 15       	cp	r31, r3
    1b9a:	d8 f0       	brcs	.+54     	; 0x1bd2 <vfprintf+0xbe>
    1b9c:	8b 32       	cpi	r24, 0x2B	; 43
    1b9e:	79 f0       	breq	.+30     	; 0x1bbe <vfprintf+0xaa>
    1ba0:	38 f4       	brcc	.+14     	; 0x1bb0 <vfprintf+0x9c>
    1ba2:	80 32       	cpi	r24, 0x20	; 32
    1ba4:	79 f0       	breq	.+30     	; 0x1bc4 <vfprintf+0xb0>
    1ba6:	83 32       	cpi	r24, 0x23	; 35
    1ba8:	a1 f4       	brne	.+40     	; 0x1bd2 <vfprintf+0xbe>
    1baa:	23 2d       	mov	r18, r3
    1bac:	20 61       	ori	r18, 0x10	; 16
    1bae:	1d c0       	rjmp	.+58     	; 0x1bea <vfprintf+0xd6>
    1bb0:	8d 32       	cpi	r24, 0x2D	; 45
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <vfprintf+0xb8>
    1bb4:	80 33       	cpi	r24, 0x30	; 48
    1bb6:	69 f4       	brne	.+26     	; 0x1bd2 <vfprintf+0xbe>
    1bb8:	23 2d       	mov	r18, r3
    1bba:	21 60       	ori	r18, 0x01	; 1
    1bbc:	16 c0       	rjmp	.+44     	; 0x1bea <vfprintf+0xd6>
    1bbe:	83 2d       	mov	r24, r3
    1bc0:	82 60       	ori	r24, 0x02	; 2
    1bc2:	38 2e       	mov	r3, r24
    1bc4:	e3 2d       	mov	r30, r3
    1bc6:	e4 60       	ori	r30, 0x04	; 4
    1bc8:	3e 2e       	mov	r3, r30
    1bca:	2a c0       	rjmp	.+84     	; 0x1c20 <vfprintf+0x10c>
    1bcc:	f3 2d       	mov	r31, r3
    1bce:	f8 60       	ori	r31, 0x08	; 8
    1bd0:	1d c0       	rjmp	.+58     	; 0x1c0c <vfprintf+0xf8>
    1bd2:	37 fc       	sbrc	r3, 7
    1bd4:	2d c0       	rjmp	.+90     	; 0x1c30 <vfprintf+0x11c>
    1bd6:	20 ed       	ldi	r18, 0xD0	; 208
    1bd8:	28 0f       	add	r18, r24
    1bda:	2a 30       	cpi	r18, 0x0A	; 10
    1bdc:	40 f0       	brcs	.+16     	; 0x1bee <vfprintf+0xda>
    1bde:	8e 32       	cpi	r24, 0x2E	; 46
    1be0:	b9 f4       	brne	.+46     	; 0x1c10 <vfprintf+0xfc>
    1be2:	36 fc       	sbrc	r3, 6
    1be4:	75 c1       	rjmp	.+746    	; 0x1ed0 <vfprintf+0x3bc>
    1be6:	23 2d       	mov	r18, r3
    1be8:	20 64       	ori	r18, 0x40	; 64
    1bea:	32 2e       	mov	r3, r18
    1bec:	19 c0       	rjmp	.+50     	; 0x1c20 <vfprintf+0x10c>
    1bee:	36 fe       	sbrs	r3, 6
    1bf0:	06 c0       	rjmp	.+12     	; 0x1bfe <vfprintf+0xea>
    1bf2:	8a e0       	ldi	r24, 0x0A	; 10
    1bf4:	98 9e       	mul	r9, r24
    1bf6:	20 0d       	add	r18, r0
    1bf8:	11 24       	eor	r1, r1
    1bfa:	92 2e       	mov	r9, r18
    1bfc:	11 c0       	rjmp	.+34     	; 0x1c20 <vfprintf+0x10c>
    1bfe:	ea e0       	ldi	r30, 0x0A	; 10
    1c00:	2e 9e       	mul	r2, r30
    1c02:	20 0d       	add	r18, r0
    1c04:	11 24       	eor	r1, r1
    1c06:	22 2e       	mov	r2, r18
    1c08:	f3 2d       	mov	r31, r3
    1c0a:	f0 62       	ori	r31, 0x20	; 32
    1c0c:	3f 2e       	mov	r3, r31
    1c0e:	08 c0       	rjmp	.+16     	; 0x1c20 <vfprintf+0x10c>
    1c10:	8c 36       	cpi	r24, 0x6C	; 108
    1c12:	21 f4       	brne	.+8      	; 0x1c1c <vfprintf+0x108>
    1c14:	83 2d       	mov	r24, r3
    1c16:	80 68       	ori	r24, 0x80	; 128
    1c18:	38 2e       	mov	r3, r24
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <vfprintf+0x10c>
    1c1c:	88 36       	cpi	r24, 0x68	; 104
    1c1e:	41 f4       	brne	.+16     	; 0x1c30 <vfprintf+0x11c>
    1c20:	f7 01       	movw	r30, r14
    1c22:	93 fd       	sbrc	r25, 3
    1c24:	85 91       	lpm	r24, Z+
    1c26:	93 ff       	sbrs	r25, 3
    1c28:	81 91       	ld	r24, Z+
    1c2a:	7f 01       	movw	r14, r30
    1c2c:	81 11       	cpse	r24, r1
    1c2e:	b3 cf       	rjmp	.-154    	; 0x1b96 <vfprintf+0x82>
    1c30:	98 2f       	mov	r25, r24
    1c32:	9f 7d       	andi	r25, 0xDF	; 223
    1c34:	95 54       	subi	r25, 0x45	; 69
    1c36:	93 30       	cpi	r25, 0x03	; 3
    1c38:	28 f4       	brcc	.+10     	; 0x1c44 <vfprintf+0x130>
    1c3a:	0c 5f       	subi	r16, 0xFC	; 252
    1c3c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c3e:	9f e3       	ldi	r25, 0x3F	; 63
    1c40:	99 83       	std	Y+1, r25	; 0x01
    1c42:	0d c0       	rjmp	.+26     	; 0x1c5e <vfprintf+0x14a>
    1c44:	83 36       	cpi	r24, 0x63	; 99
    1c46:	31 f0       	breq	.+12     	; 0x1c54 <vfprintf+0x140>
    1c48:	83 37       	cpi	r24, 0x73	; 115
    1c4a:	71 f0       	breq	.+28     	; 0x1c68 <vfprintf+0x154>
    1c4c:	83 35       	cpi	r24, 0x53	; 83
    1c4e:	09 f0       	breq	.+2      	; 0x1c52 <vfprintf+0x13e>
    1c50:	55 c0       	rjmp	.+170    	; 0x1cfc <vfprintf+0x1e8>
    1c52:	20 c0       	rjmp	.+64     	; 0x1c94 <vfprintf+0x180>
    1c54:	f8 01       	movw	r30, r16
    1c56:	80 81       	ld	r24, Z
    1c58:	89 83       	std	Y+1, r24	; 0x01
    1c5a:	0e 5f       	subi	r16, 0xFE	; 254
    1c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5e:	88 24       	eor	r8, r8
    1c60:	83 94       	inc	r8
    1c62:	91 2c       	mov	r9, r1
    1c64:	53 01       	movw	r10, r6
    1c66:	12 c0       	rjmp	.+36     	; 0x1c8c <vfprintf+0x178>
    1c68:	28 01       	movw	r4, r16
    1c6a:	f2 e0       	ldi	r31, 0x02	; 2
    1c6c:	4f 0e       	add	r4, r31
    1c6e:	51 1c       	adc	r5, r1
    1c70:	f8 01       	movw	r30, r16
    1c72:	a0 80       	ld	r10, Z
    1c74:	b1 80       	ldd	r11, Z+1	; 0x01
    1c76:	36 fe       	sbrs	r3, 6
    1c78:	03 c0       	rjmp	.+6      	; 0x1c80 <vfprintf+0x16c>
    1c7a:	69 2d       	mov	r22, r9
    1c7c:	70 e0       	ldi	r23, 0x00	; 0
    1c7e:	02 c0       	rjmp	.+4      	; 0x1c84 <vfprintf+0x170>
    1c80:	6f ef       	ldi	r22, 0xFF	; 255
    1c82:	7f ef       	ldi	r23, 0xFF	; 255
    1c84:	c5 01       	movw	r24, r10
    1c86:	4e d1       	rcall	.+668    	; 0x1f24 <strnlen>
    1c88:	4c 01       	movw	r8, r24
    1c8a:	82 01       	movw	r16, r4
    1c8c:	f3 2d       	mov	r31, r3
    1c8e:	ff 77       	andi	r31, 0x7F	; 127
    1c90:	3f 2e       	mov	r3, r31
    1c92:	15 c0       	rjmp	.+42     	; 0x1cbe <vfprintf+0x1aa>
    1c94:	28 01       	movw	r4, r16
    1c96:	22 e0       	ldi	r18, 0x02	; 2
    1c98:	42 0e       	add	r4, r18
    1c9a:	51 1c       	adc	r5, r1
    1c9c:	f8 01       	movw	r30, r16
    1c9e:	a0 80       	ld	r10, Z
    1ca0:	b1 80       	ldd	r11, Z+1	; 0x01
    1ca2:	36 fe       	sbrs	r3, 6
    1ca4:	03 c0       	rjmp	.+6      	; 0x1cac <vfprintf+0x198>
    1ca6:	69 2d       	mov	r22, r9
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	02 c0       	rjmp	.+4      	; 0x1cb0 <vfprintf+0x19c>
    1cac:	6f ef       	ldi	r22, 0xFF	; 255
    1cae:	7f ef       	ldi	r23, 0xFF	; 255
    1cb0:	c5 01       	movw	r24, r10
    1cb2:	2d d1       	rcall	.+602    	; 0x1f0e <strnlen_P>
    1cb4:	4c 01       	movw	r8, r24
    1cb6:	f3 2d       	mov	r31, r3
    1cb8:	f0 68       	ori	r31, 0x80	; 128
    1cba:	3f 2e       	mov	r3, r31
    1cbc:	82 01       	movw	r16, r4
    1cbe:	33 fc       	sbrc	r3, 3
    1cc0:	19 c0       	rjmp	.+50     	; 0x1cf4 <vfprintf+0x1e0>
    1cc2:	82 2d       	mov	r24, r2
    1cc4:	90 e0       	ldi	r25, 0x00	; 0
    1cc6:	88 16       	cp	r8, r24
    1cc8:	99 06       	cpc	r9, r25
    1cca:	a0 f4       	brcc	.+40     	; 0x1cf4 <vfprintf+0x1e0>
    1ccc:	b6 01       	movw	r22, r12
    1cce:	80 e2       	ldi	r24, 0x20	; 32
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	33 d1       	rcall	.+614    	; 0x1f3a <fputc>
    1cd4:	2a 94       	dec	r2
    1cd6:	f5 cf       	rjmp	.-22     	; 0x1cc2 <vfprintf+0x1ae>
    1cd8:	f5 01       	movw	r30, r10
    1cda:	37 fc       	sbrc	r3, 7
    1cdc:	85 91       	lpm	r24, Z+
    1cde:	37 fe       	sbrs	r3, 7
    1ce0:	81 91       	ld	r24, Z+
    1ce2:	5f 01       	movw	r10, r30
    1ce4:	b6 01       	movw	r22, r12
    1ce6:	90 e0       	ldi	r25, 0x00	; 0
    1ce8:	28 d1       	rcall	.+592    	; 0x1f3a <fputc>
    1cea:	21 10       	cpse	r2, r1
    1cec:	2a 94       	dec	r2
    1cee:	21 e0       	ldi	r18, 0x01	; 1
    1cf0:	82 1a       	sub	r8, r18
    1cf2:	91 08       	sbc	r9, r1
    1cf4:	81 14       	cp	r8, r1
    1cf6:	91 04       	cpc	r9, r1
    1cf8:	79 f7       	brne	.-34     	; 0x1cd8 <vfprintf+0x1c4>
    1cfa:	e1 c0       	rjmp	.+450    	; 0x1ebe <vfprintf+0x3aa>
    1cfc:	84 36       	cpi	r24, 0x64	; 100
    1cfe:	11 f0       	breq	.+4      	; 0x1d04 <vfprintf+0x1f0>
    1d00:	89 36       	cpi	r24, 0x69	; 105
    1d02:	39 f5       	brne	.+78     	; 0x1d52 <vfprintf+0x23e>
    1d04:	f8 01       	movw	r30, r16
    1d06:	37 fe       	sbrs	r3, 7
    1d08:	07 c0       	rjmp	.+14     	; 0x1d18 <vfprintf+0x204>
    1d0a:	60 81       	ld	r22, Z
    1d0c:	71 81       	ldd	r23, Z+1	; 0x01
    1d0e:	82 81       	ldd	r24, Z+2	; 0x02
    1d10:	93 81       	ldd	r25, Z+3	; 0x03
    1d12:	0c 5f       	subi	r16, 0xFC	; 252
    1d14:	1f 4f       	sbci	r17, 0xFF	; 255
    1d16:	08 c0       	rjmp	.+16     	; 0x1d28 <vfprintf+0x214>
    1d18:	60 81       	ld	r22, Z
    1d1a:	71 81       	ldd	r23, Z+1	; 0x01
    1d1c:	07 2e       	mov	r0, r23
    1d1e:	00 0c       	add	r0, r0
    1d20:	88 0b       	sbc	r24, r24
    1d22:	99 0b       	sbc	r25, r25
    1d24:	0e 5f       	subi	r16, 0xFE	; 254
    1d26:	1f 4f       	sbci	r17, 0xFF	; 255
    1d28:	f3 2d       	mov	r31, r3
    1d2a:	ff 76       	andi	r31, 0x6F	; 111
    1d2c:	3f 2e       	mov	r3, r31
    1d2e:	97 ff       	sbrs	r25, 7
    1d30:	09 c0       	rjmp	.+18     	; 0x1d44 <vfprintf+0x230>
    1d32:	90 95       	com	r25
    1d34:	80 95       	com	r24
    1d36:	70 95       	com	r23
    1d38:	61 95       	neg	r22
    1d3a:	7f 4f       	sbci	r23, 0xFF	; 255
    1d3c:	8f 4f       	sbci	r24, 0xFF	; 255
    1d3e:	9f 4f       	sbci	r25, 0xFF	; 255
    1d40:	f0 68       	ori	r31, 0x80	; 128
    1d42:	3f 2e       	mov	r3, r31
    1d44:	2a e0       	ldi	r18, 0x0A	; 10
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	a3 01       	movw	r20, r6
    1d4a:	33 d1       	rcall	.+614    	; 0x1fb2 <__ultoa_invert>
    1d4c:	88 2e       	mov	r8, r24
    1d4e:	86 18       	sub	r8, r6
    1d50:	44 c0       	rjmp	.+136    	; 0x1dda <vfprintf+0x2c6>
    1d52:	85 37       	cpi	r24, 0x75	; 117
    1d54:	31 f4       	brne	.+12     	; 0x1d62 <vfprintf+0x24e>
    1d56:	23 2d       	mov	r18, r3
    1d58:	2f 7e       	andi	r18, 0xEF	; 239
    1d5a:	b2 2e       	mov	r11, r18
    1d5c:	2a e0       	ldi	r18, 0x0A	; 10
    1d5e:	30 e0       	ldi	r19, 0x00	; 0
    1d60:	25 c0       	rjmp	.+74     	; 0x1dac <vfprintf+0x298>
    1d62:	93 2d       	mov	r25, r3
    1d64:	99 7f       	andi	r25, 0xF9	; 249
    1d66:	b9 2e       	mov	r11, r25
    1d68:	8f 36       	cpi	r24, 0x6F	; 111
    1d6a:	c1 f0       	breq	.+48     	; 0x1d9c <vfprintf+0x288>
    1d6c:	18 f4       	brcc	.+6      	; 0x1d74 <vfprintf+0x260>
    1d6e:	88 35       	cpi	r24, 0x58	; 88
    1d70:	79 f0       	breq	.+30     	; 0x1d90 <vfprintf+0x27c>
    1d72:	ae c0       	rjmp	.+348    	; 0x1ed0 <vfprintf+0x3bc>
    1d74:	80 37       	cpi	r24, 0x70	; 112
    1d76:	19 f0       	breq	.+6      	; 0x1d7e <vfprintf+0x26a>
    1d78:	88 37       	cpi	r24, 0x78	; 120
    1d7a:	21 f0       	breq	.+8      	; 0x1d84 <vfprintf+0x270>
    1d7c:	a9 c0       	rjmp	.+338    	; 0x1ed0 <vfprintf+0x3bc>
    1d7e:	e9 2f       	mov	r30, r25
    1d80:	e0 61       	ori	r30, 0x10	; 16
    1d82:	be 2e       	mov	r11, r30
    1d84:	b4 fe       	sbrs	r11, 4
    1d86:	0d c0       	rjmp	.+26     	; 0x1da2 <vfprintf+0x28e>
    1d88:	fb 2d       	mov	r31, r11
    1d8a:	f4 60       	ori	r31, 0x04	; 4
    1d8c:	bf 2e       	mov	r11, r31
    1d8e:	09 c0       	rjmp	.+18     	; 0x1da2 <vfprintf+0x28e>
    1d90:	34 fe       	sbrs	r3, 4
    1d92:	0a c0       	rjmp	.+20     	; 0x1da8 <vfprintf+0x294>
    1d94:	29 2f       	mov	r18, r25
    1d96:	26 60       	ori	r18, 0x06	; 6
    1d98:	b2 2e       	mov	r11, r18
    1d9a:	06 c0       	rjmp	.+12     	; 0x1da8 <vfprintf+0x294>
    1d9c:	28 e0       	ldi	r18, 0x08	; 8
    1d9e:	30 e0       	ldi	r19, 0x00	; 0
    1da0:	05 c0       	rjmp	.+10     	; 0x1dac <vfprintf+0x298>
    1da2:	20 e1       	ldi	r18, 0x10	; 16
    1da4:	30 e0       	ldi	r19, 0x00	; 0
    1da6:	02 c0       	rjmp	.+4      	; 0x1dac <vfprintf+0x298>
    1da8:	20 e1       	ldi	r18, 0x10	; 16
    1daa:	32 e0       	ldi	r19, 0x02	; 2
    1dac:	f8 01       	movw	r30, r16
    1dae:	b7 fe       	sbrs	r11, 7
    1db0:	07 c0       	rjmp	.+14     	; 0x1dc0 <vfprintf+0x2ac>
    1db2:	60 81       	ld	r22, Z
    1db4:	71 81       	ldd	r23, Z+1	; 0x01
    1db6:	82 81       	ldd	r24, Z+2	; 0x02
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	0c 5f       	subi	r16, 0xFC	; 252
    1dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    1dbe:	06 c0       	rjmp	.+12     	; 0x1dcc <vfprintf+0x2b8>
    1dc0:	60 81       	ld	r22, Z
    1dc2:	71 81       	ldd	r23, Z+1	; 0x01
    1dc4:	80 e0       	ldi	r24, 0x00	; 0
    1dc6:	90 e0       	ldi	r25, 0x00	; 0
    1dc8:	0e 5f       	subi	r16, 0xFE	; 254
    1dca:	1f 4f       	sbci	r17, 0xFF	; 255
    1dcc:	a3 01       	movw	r20, r6
    1dce:	f1 d0       	rcall	.+482    	; 0x1fb2 <__ultoa_invert>
    1dd0:	88 2e       	mov	r8, r24
    1dd2:	86 18       	sub	r8, r6
    1dd4:	fb 2d       	mov	r31, r11
    1dd6:	ff 77       	andi	r31, 0x7F	; 127
    1dd8:	3f 2e       	mov	r3, r31
    1dda:	36 fe       	sbrs	r3, 6
    1ddc:	0d c0       	rjmp	.+26     	; 0x1df8 <vfprintf+0x2e4>
    1dde:	23 2d       	mov	r18, r3
    1de0:	2e 7f       	andi	r18, 0xFE	; 254
    1de2:	a2 2e       	mov	r10, r18
    1de4:	89 14       	cp	r8, r9
    1de6:	58 f4       	brcc	.+22     	; 0x1dfe <vfprintf+0x2ea>
    1de8:	34 fe       	sbrs	r3, 4
    1dea:	0b c0       	rjmp	.+22     	; 0x1e02 <vfprintf+0x2ee>
    1dec:	32 fc       	sbrc	r3, 2
    1dee:	09 c0       	rjmp	.+18     	; 0x1e02 <vfprintf+0x2ee>
    1df0:	83 2d       	mov	r24, r3
    1df2:	8e 7e       	andi	r24, 0xEE	; 238
    1df4:	a8 2e       	mov	r10, r24
    1df6:	05 c0       	rjmp	.+10     	; 0x1e02 <vfprintf+0x2ee>
    1df8:	b8 2c       	mov	r11, r8
    1dfa:	a3 2c       	mov	r10, r3
    1dfc:	03 c0       	rjmp	.+6      	; 0x1e04 <vfprintf+0x2f0>
    1dfe:	b8 2c       	mov	r11, r8
    1e00:	01 c0       	rjmp	.+2      	; 0x1e04 <vfprintf+0x2f0>
    1e02:	b9 2c       	mov	r11, r9
    1e04:	a4 fe       	sbrs	r10, 4
    1e06:	0f c0       	rjmp	.+30     	; 0x1e26 <vfprintf+0x312>
    1e08:	fe 01       	movw	r30, r28
    1e0a:	e8 0d       	add	r30, r8
    1e0c:	f1 1d       	adc	r31, r1
    1e0e:	80 81       	ld	r24, Z
    1e10:	80 33       	cpi	r24, 0x30	; 48
    1e12:	21 f4       	brne	.+8      	; 0x1e1c <vfprintf+0x308>
    1e14:	9a 2d       	mov	r25, r10
    1e16:	99 7e       	andi	r25, 0xE9	; 233
    1e18:	a9 2e       	mov	r10, r25
    1e1a:	09 c0       	rjmp	.+18     	; 0x1e2e <vfprintf+0x31a>
    1e1c:	a2 fe       	sbrs	r10, 2
    1e1e:	06 c0       	rjmp	.+12     	; 0x1e2c <vfprintf+0x318>
    1e20:	b3 94       	inc	r11
    1e22:	b3 94       	inc	r11
    1e24:	04 c0       	rjmp	.+8      	; 0x1e2e <vfprintf+0x31a>
    1e26:	8a 2d       	mov	r24, r10
    1e28:	86 78       	andi	r24, 0x86	; 134
    1e2a:	09 f0       	breq	.+2      	; 0x1e2e <vfprintf+0x31a>
    1e2c:	b3 94       	inc	r11
    1e2e:	a3 fc       	sbrc	r10, 3
    1e30:	10 c0       	rjmp	.+32     	; 0x1e52 <vfprintf+0x33e>
    1e32:	a0 fe       	sbrs	r10, 0
    1e34:	06 c0       	rjmp	.+12     	; 0x1e42 <vfprintf+0x32e>
    1e36:	b2 14       	cp	r11, r2
    1e38:	80 f4       	brcc	.+32     	; 0x1e5a <vfprintf+0x346>
    1e3a:	28 0c       	add	r2, r8
    1e3c:	92 2c       	mov	r9, r2
    1e3e:	9b 18       	sub	r9, r11
    1e40:	0d c0       	rjmp	.+26     	; 0x1e5c <vfprintf+0x348>
    1e42:	b2 14       	cp	r11, r2
    1e44:	58 f4       	brcc	.+22     	; 0x1e5c <vfprintf+0x348>
    1e46:	b6 01       	movw	r22, r12
    1e48:	80 e2       	ldi	r24, 0x20	; 32
    1e4a:	90 e0       	ldi	r25, 0x00	; 0
    1e4c:	76 d0       	rcall	.+236    	; 0x1f3a <fputc>
    1e4e:	b3 94       	inc	r11
    1e50:	f8 cf       	rjmp	.-16     	; 0x1e42 <vfprintf+0x32e>
    1e52:	b2 14       	cp	r11, r2
    1e54:	18 f4       	brcc	.+6      	; 0x1e5c <vfprintf+0x348>
    1e56:	2b 18       	sub	r2, r11
    1e58:	02 c0       	rjmp	.+4      	; 0x1e5e <vfprintf+0x34a>
    1e5a:	98 2c       	mov	r9, r8
    1e5c:	21 2c       	mov	r2, r1
    1e5e:	a4 fe       	sbrs	r10, 4
    1e60:	0f c0       	rjmp	.+30     	; 0x1e80 <vfprintf+0x36c>
    1e62:	b6 01       	movw	r22, r12
    1e64:	80 e3       	ldi	r24, 0x30	; 48
    1e66:	90 e0       	ldi	r25, 0x00	; 0
    1e68:	68 d0       	rcall	.+208    	; 0x1f3a <fputc>
    1e6a:	a2 fe       	sbrs	r10, 2
    1e6c:	16 c0       	rjmp	.+44     	; 0x1e9a <vfprintf+0x386>
    1e6e:	a1 fc       	sbrc	r10, 1
    1e70:	03 c0       	rjmp	.+6      	; 0x1e78 <vfprintf+0x364>
    1e72:	88 e7       	ldi	r24, 0x78	; 120
    1e74:	90 e0       	ldi	r25, 0x00	; 0
    1e76:	02 c0       	rjmp	.+4      	; 0x1e7c <vfprintf+0x368>
    1e78:	88 e5       	ldi	r24, 0x58	; 88
    1e7a:	90 e0       	ldi	r25, 0x00	; 0
    1e7c:	b6 01       	movw	r22, r12
    1e7e:	0c c0       	rjmp	.+24     	; 0x1e98 <vfprintf+0x384>
    1e80:	8a 2d       	mov	r24, r10
    1e82:	86 78       	andi	r24, 0x86	; 134
    1e84:	51 f0       	breq	.+20     	; 0x1e9a <vfprintf+0x386>
    1e86:	a1 fe       	sbrs	r10, 1
    1e88:	02 c0       	rjmp	.+4      	; 0x1e8e <vfprintf+0x37a>
    1e8a:	8b e2       	ldi	r24, 0x2B	; 43
    1e8c:	01 c0       	rjmp	.+2      	; 0x1e90 <vfprintf+0x37c>
    1e8e:	80 e2       	ldi	r24, 0x20	; 32
    1e90:	a7 fc       	sbrc	r10, 7
    1e92:	8d e2       	ldi	r24, 0x2D	; 45
    1e94:	b6 01       	movw	r22, r12
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	50 d0       	rcall	.+160    	; 0x1f3a <fputc>
    1e9a:	89 14       	cp	r8, r9
    1e9c:	30 f4       	brcc	.+12     	; 0x1eaa <vfprintf+0x396>
    1e9e:	b6 01       	movw	r22, r12
    1ea0:	80 e3       	ldi	r24, 0x30	; 48
    1ea2:	90 e0       	ldi	r25, 0x00	; 0
    1ea4:	4a d0       	rcall	.+148    	; 0x1f3a <fputc>
    1ea6:	9a 94       	dec	r9
    1ea8:	f8 cf       	rjmp	.-16     	; 0x1e9a <vfprintf+0x386>
    1eaa:	8a 94       	dec	r8
    1eac:	f3 01       	movw	r30, r6
    1eae:	e8 0d       	add	r30, r8
    1eb0:	f1 1d       	adc	r31, r1
    1eb2:	80 81       	ld	r24, Z
    1eb4:	b6 01       	movw	r22, r12
    1eb6:	90 e0       	ldi	r25, 0x00	; 0
    1eb8:	40 d0       	rcall	.+128    	; 0x1f3a <fputc>
    1eba:	81 10       	cpse	r8, r1
    1ebc:	f6 cf       	rjmp	.-20     	; 0x1eaa <vfprintf+0x396>
    1ebe:	22 20       	and	r2, r2
    1ec0:	09 f4       	brne	.+2      	; 0x1ec4 <vfprintf+0x3b0>
    1ec2:	4e ce       	rjmp	.-868    	; 0x1b60 <vfprintf+0x4c>
    1ec4:	b6 01       	movw	r22, r12
    1ec6:	80 e2       	ldi	r24, 0x20	; 32
    1ec8:	90 e0       	ldi	r25, 0x00	; 0
    1eca:	37 d0       	rcall	.+110    	; 0x1f3a <fputc>
    1ecc:	2a 94       	dec	r2
    1ece:	f7 cf       	rjmp	.-18     	; 0x1ebe <vfprintf+0x3aa>
    1ed0:	f6 01       	movw	r30, r12
    1ed2:	86 81       	ldd	r24, Z+6	; 0x06
    1ed4:	97 81       	ldd	r25, Z+7	; 0x07
    1ed6:	02 c0       	rjmp	.+4      	; 0x1edc <vfprintf+0x3c8>
    1ed8:	8f ef       	ldi	r24, 0xFF	; 255
    1eda:	9f ef       	ldi	r25, 0xFF	; 255
    1edc:	2b 96       	adiw	r28, 0x0b	; 11
    1ede:	0f b6       	in	r0, 0x3f	; 63
    1ee0:	f8 94       	cli
    1ee2:	de bf       	out	0x3e, r29	; 62
    1ee4:	0f be       	out	0x3f, r0	; 63
    1ee6:	cd bf       	out	0x3d, r28	; 61
    1ee8:	df 91       	pop	r29
    1eea:	cf 91       	pop	r28
    1eec:	1f 91       	pop	r17
    1eee:	0f 91       	pop	r16
    1ef0:	ff 90       	pop	r15
    1ef2:	ef 90       	pop	r14
    1ef4:	df 90       	pop	r13
    1ef6:	cf 90       	pop	r12
    1ef8:	bf 90       	pop	r11
    1efa:	af 90       	pop	r10
    1efc:	9f 90       	pop	r9
    1efe:	8f 90       	pop	r8
    1f00:	7f 90       	pop	r7
    1f02:	6f 90       	pop	r6
    1f04:	5f 90       	pop	r5
    1f06:	4f 90       	pop	r4
    1f08:	3f 90       	pop	r3
    1f0a:	2f 90       	pop	r2
    1f0c:	08 95       	ret

00001f0e <strnlen_P>:
    1f0e:	fc 01       	movw	r30, r24
    1f10:	05 90       	lpm	r0, Z+
    1f12:	61 50       	subi	r22, 0x01	; 1
    1f14:	70 40       	sbci	r23, 0x00	; 0
    1f16:	01 10       	cpse	r0, r1
    1f18:	d8 f7       	brcc	.-10     	; 0x1f10 <strnlen_P+0x2>
    1f1a:	80 95       	com	r24
    1f1c:	90 95       	com	r25
    1f1e:	8e 0f       	add	r24, r30
    1f20:	9f 1f       	adc	r25, r31
    1f22:	08 95       	ret

00001f24 <strnlen>:
    1f24:	fc 01       	movw	r30, r24
    1f26:	61 50       	subi	r22, 0x01	; 1
    1f28:	70 40       	sbci	r23, 0x00	; 0
    1f2a:	01 90       	ld	r0, Z+
    1f2c:	01 10       	cpse	r0, r1
    1f2e:	d8 f7       	brcc	.-10     	; 0x1f26 <strnlen+0x2>
    1f30:	80 95       	com	r24
    1f32:	90 95       	com	r25
    1f34:	8e 0f       	add	r24, r30
    1f36:	9f 1f       	adc	r25, r31
    1f38:	08 95       	ret

00001f3a <fputc>:
    1f3a:	0f 93       	push	r16
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	fb 01       	movw	r30, r22
    1f44:	23 81       	ldd	r18, Z+3	; 0x03
    1f46:	21 fd       	sbrc	r18, 1
    1f48:	03 c0       	rjmp	.+6      	; 0x1f50 <fputc+0x16>
    1f4a:	8f ef       	ldi	r24, 0xFF	; 255
    1f4c:	9f ef       	ldi	r25, 0xFF	; 255
    1f4e:	2c c0       	rjmp	.+88     	; 0x1fa8 <fputc+0x6e>
    1f50:	22 ff       	sbrs	r18, 2
    1f52:	16 c0       	rjmp	.+44     	; 0x1f80 <fputc+0x46>
    1f54:	46 81       	ldd	r20, Z+6	; 0x06
    1f56:	57 81       	ldd	r21, Z+7	; 0x07
    1f58:	24 81       	ldd	r18, Z+4	; 0x04
    1f5a:	35 81       	ldd	r19, Z+5	; 0x05
    1f5c:	42 17       	cp	r20, r18
    1f5e:	53 07       	cpc	r21, r19
    1f60:	44 f4       	brge	.+16     	; 0x1f72 <fputc+0x38>
    1f62:	a0 81       	ld	r26, Z
    1f64:	b1 81       	ldd	r27, Z+1	; 0x01
    1f66:	9d 01       	movw	r18, r26
    1f68:	2f 5f       	subi	r18, 0xFF	; 255
    1f6a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f6c:	31 83       	std	Z+1, r19	; 0x01
    1f6e:	20 83       	st	Z, r18
    1f70:	8c 93       	st	X, r24
    1f72:	26 81       	ldd	r18, Z+6	; 0x06
    1f74:	37 81       	ldd	r19, Z+7	; 0x07
    1f76:	2f 5f       	subi	r18, 0xFF	; 255
    1f78:	3f 4f       	sbci	r19, 0xFF	; 255
    1f7a:	37 83       	std	Z+7, r19	; 0x07
    1f7c:	26 83       	std	Z+6, r18	; 0x06
    1f7e:	14 c0       	rjmp	.+40     	; 0x1fa8 <fputc+0x6e>
    1f80:	8b 01       	movw	r16, r22
    1f82:	ec 01       	movw	r28, r24
    1f84:	fb 01       	movw	r30, r22
    1f86:	00 84       	ldd	r0, Z+8	; 0x08
    1f88:	f1 85       	ldd	r31, Z+9	; 0x09
    1f8a:	e0 2d       	mov	r30, r0
    1f8c:	19 95       	eicall
    1f8e:	89 2b       	or	r24, r25
    1f90:	e1 f6       	brne	.-72     	; 0x1f4a <fputc+0x10>
    1f92:	d8 01       	movw	r26, r16
    1f94:	16 96       	adiw	r26, 0x06	; 6
    1f96:	8d 91       	ld	r24, X+
    1f98:	9c 91       	ld	r25, X
    1f9a:	17 97       	sbiw	r26, 0x07	; 7
    1f9c:	01 96       	adiw	r24, 0x01	; 1
    1f9e:	17 96       	adiw	r26, 0x07	; 7
    1fa0:	9c 93       	st	X, r25
    1fa2:	8e 93       	st	-X, r24
    1fa4:	16 97       	sbiw	r26, 0x06	; 6
    1fa6:	ce 01       	movw	r24, r28
    1fa8:	df 91       	pop	r29
    1faa:	cf 91       	pop	r28
    1fac:	1f 91       	pop	r17
    1fae:	0f 91       	pop	r16
    1fb0:	08 95       	ret

00001fb2 <__ultoa_invert>:
    1fb2:	fa 01       	movw	r30, r20
    1fb4:	aa 27       	eor	r26, r26
    1fb6:	28 30       	cpi	r18, 0x08	; 8
    1fb8:	51 f1       	breq	.+84     	; 0x200e <__DATA_REGION_LENGTH__+0xe>
    1fba:	20 31       	cpi	r18, 0x10	; 16
    1fbc:	81 f1       	breq	.+96     	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    1fbe:	e8 94       	clt
    1fc0:	6f 93       	push	r22
    1fc2:	6e 7f       	andi	r22, 0xFE	; 254
    1fc4:	6e 5f       	subi	r22, 0xFE	; 254
    1fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    1fc8:	8f 4f       	sbci	r24, 0xFF	; 255
    1fca:	9f 4f       	sbci	r25, 0xFF	; 255
    1fcc:	af 4f       	sbci	r26, 0xFF	; 255
    1fce:	b1 e0       	ldi	r27, 0x01	; 1
    1fd0:	3e d0       	rcall	.+124    	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    1fd2:	b4 e0       	ldi	r27, 0x04	; 4
    1fd4:	3c d0       	rcall	.+120    	; 0x204e <__DATA_REGION_LENGTH__+0x4e>
    1fd6:	67 0f       	add	r22, r23
    1fd8:	78 1f       	adc	r23, r24
    1fda:	89 1f       	adc	r24, r25
    1fdc:	9a 1f       	adc	r25, r26
    1fde:	a1 1d       	adc	r26, r1
    1fe0:	68 0f       	add	r22, r24
    1fe2:	79 1f       	adc	r23, r25
    1fe4:	8a 1f       	adc	r24, r26
    1fe6:	91 1d       	adc	r25, r1
    1fe8:	a1 1d       	adc	r26, r1
    1fea:	6a 0f       	add	r22, r26
    1fec:	71 1d       	adc	r23, r1
    1fee:	81 1d       	adc	r24, r1
    1ff0:	91 1d       	adc	r25, r1
    1ff2:	a1 1d       	adc	r26, r1
    1ff4:	20 d0       	rcall	.+64     	; 0x2036 <__DATA_REGION_LENGTH__+0x36>
    1ff6:	09 f4       	brne	.+2      	; 0x1ffa <__ultoa_invert+0x48>
    1ff8:	68 94       	set
    1ffa:	3f 91       	pop	r19
    1ffc:	2a e0       	ldi	r18, 0x0A	; 10
    1ffe:	26 9f       	mul	r18, r22
    2000:	11 24       	eor	r1, r1
    2002:	30 19       	sub	r19, r0
    2004:	30 5d       	subi	r19, 0xD0	; 208
    2006:	31 93       	st	Z+, r19
    2008:	de f6       	brtc	.-74     	; 0x1fc0 <__ultoa_invert+0xe>
    200a:	cf 01       	movw	r24, r30
    200c:	08 95       	ret
    200e:	46 2f       	mov	r20, r22
    2010:	47 70       	andi	r20, 0x07	; 7
    2012:	40 5d       	subi	r20, 0xD0	; 208
    2014:	41 93       	st	Z+, r20
    2016:	b3 e0       	ldi	r27, 0x03	; 3
    2018:	0f d0       	rcall	.+30     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    201a:	c9 f7       	brne	.-14     	; 0x200e <__DATA_REGION_LENGTH__+0xe>
    201c:	f6 cf       	rjmp	.-20     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    201e:	46 2f       	mov	r20, r22
    2020:	4f 70       	andi	r20, 0x0F	; 15
    2022:	40 5d       	subi	r20, 0xD0	; 208
    2024:	4a 33       	cpi	r20, 0x3A	; 58
    2026:	18 f0       	brcs	.+6      	; 0x202e <__DATA_REGION_LENGTH__+0x2e>
    2028:	49 5d       	subi	r20, 0xD9	; 217
    202a:	31 fd       	sbrc	r19, 1
    202c:	40 52       	subi	r20, 0x20	; 32
    202e:	41 93       	st	Z+, r20
    2030:	02 d0       	rcall	.+4      	; 0x2036 <__DATA_REGION_LENGTH__+0x36>
    2032:	a9 f7       	brne	.-22     	; 0x201e <__DATA_REGION_LENGTH__+0x1e>
    2034:	ea cf       	rjmp	.-44     	; 0x200a <__DATA_REGION_LENGTH__+0xa>
    2036:	b4 e0       	ldi	r27, 0x04	; 4
    2038:	a6 95       	lsr	r26
    203a:	97 95       	ror	r25
    203c:	87 95       	ror	r24
    203e:	77 95       	ror	r23
    2040:	67 95       	ror	r22
    2042:	ba 95       	dec	r27
    2044:	c9 f7       	brne	.-14     	; 0x2038 <__DATA_REGION_LENGTH__+0x38>
    2046:	00 97       	sbiw	r24, 0x00	; 0
    2048:	61 05       	cpc	r22, r1
    204a:	71 05       	cpc	r23, r1
    204c:	08 95       	ret
    204e:	9b 01       	movw	r18, r22
    2050:	ac 01       	movw	r20, r24
    2052:	0a 2e       	mov	r0, r26
    2054:	06 94       	lsr	r0
    2056:	57 95       	ror	r21
    2058:	47 95       	ror	r20
    205a:	37 95       	ror	r19
    205c:	27 95       	ror	r18
    205e:	ba 95       	dec	r27
    2060:	c9 f7       	brne	.-14     	; 0x2054 <__DATA_REGION_LENGTH__+0x54>
    2062:	62 0f       	add	r22, r18
    2064:	73 1f       	adc	r23, r19
    2066:	84 1f       	adc	r24, r20
    2068:	95 1f       	adc	r25, r21
    206a:	a0 1d       	adc	r26, r0
    206c:	08 95       	ret

0000206e <_exit>:
    206e:	f8 94       	cli

00002070 <__stop_program>:
    2070:	ff cf       	rjmp	.-2      	; 0x2070 <__stop_program>
