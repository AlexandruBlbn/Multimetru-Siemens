
MultimetruSiemens.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000009e  00800200  00001c60  00001cf4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001c60  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000366  0080029e  0080029e  00001d92  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00001d92  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001df0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000140  00000000  00000000  00001e30  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002905  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011ae  00000000  00000000  00004875  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011f6  00000000  00000000  00005a23  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000330  00000000  00000000  00006c1c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a77  00000000  00000000  00006f4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013c1  00000000  00000000  000079c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000188  00000000  00000000  00008d84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
       2:	00 00       	nop
       4:	8f c0       	rjmp	.+286    	; 0x124 <__bad_interrupt>
       6:	00 00       	nop
       8:	8d c0       	rjmp	.+282    	; 0x124 <__bad_interrupt>
       a:	00 00       	nop
       c:	8b c0       	rjmp	.+278    	; 0x124 <__bad_interrupt>
       e:	00 00       	nop
      10:	89 c0       	rjmp	.+274    	; 0x124 <__bad_interrupt>
      12:	00 00       	nop
      14:	87 c0       	rjmp	.+270    	; 0x124 <__bad_interrupt>
      16:	00 00       	nop
      18:	85 c0       	rjmp	.+266    	; 0x124 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	83 c0       	rjmp	.+262    	; 0x124 <__bad_interrupt>
      1e:	00 00       	nop
      20:	81 c0       	rjmp	.+258    	; 0x124 <__bad_interrupt>
      22:	00 00       	nop
      24:	7f c0       	rjmp	.+254    	; 0x124 <__bad_interrupt>
      26:	00 00       	nop
      28:	7d c0       	rjmp	.+250    	; 0x124 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	7b c0       	rjmp	.+246    	; 0x124 <__bad_interrupt>
      2e:	00 00       	nop
      30:	79 c0       	rjmp	.+242    	; 0x124 <__bad_interrupt>
      32:	00 00       	nop
      34:	77 c0       	rjmp	.+238    	; 0x124 <__bad_interrupt>
      36:	00 00       	nop
      38:	75 c0       	rjmp	.+234    	; 0x124 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	73 c0       	rjmp	.+230    	; 0x124 <__bad_interrupt>
      3e:	00 00       	nop
      40:	71 c0       	rjmp	.+226    	; 0x124 <__bad_interrupt>
      42:	00 00       	nop
      44:	52 c3       	rjmp	.+1700   	; 0x6ea <__vector_17>
      46:	00 00       	nop
      48:	6d c0       	rjmp	.+218    	; 0x124 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	6b c0       	rjmp	.+214    	; 0x124 <__bad_interrupt>
      4e:	00 00       	nop
      50:	69 c0       	rjmp	.+210    	; 0x124 <__bad_interrupt>
      52:	00 00       	nop
      54:	67 c0       	rjmp	.+206    	; 0x124 <__bad_interrupt>
      56:	00 00       	nop
      58:	65 c0       	rjmp	.+202    	; 0x124 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	63 c0       	rjmp	.+198    	; 0x124 <__bad_interrupt>
      5e:	00 00       	nop
      60:	61 c0       	rjmp	.+194    	; 0x124 <__bad_interrupt>
      62:	00 00       	nop
      64:	5f c0       	rjmp	.+190    	; 0x124 <__bad_interrupt>
      66:	00 00       	nop
      68:	5d c0       	rjmp	.+186    	; 0x124 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	5b c0       	rjmp	.+182    	; 0x124 <__bad_interrupt>
      6e:	00 00       	nop
      70:	59 c0       	rjmp	.+178    	; 0x124 <__bad_interrupt>
      72:	00 00       	nop
      74:	57 c0       	rjmp	.+174    	; 0x124 <__bad_interrupt>
      76:	00 00       	nop
      78:	55 c0       	rjmp	.+170    	; 0x124 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	53 c0       	rjmp	.+166    	; 0x124 <__bad_interrupt>
      7e:	00 00       	nop
      80:	51 c0       	rjmp	.+162    	; 0x124 <__bad_interrupt>
      82:	00 00       	nop
      84:	4f c0       	rjmp	.+158    	; 0x124 <__bad_interrupt>
      86:	00 00       	nop
      88:	4d c0       	rjmp	.+154    	; 0x124 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	4b c0       	rjmp	.+150    	; 0x124 <__bad_interrupt>
      8e:	00 00       	nop
      90:	49 c0       	rjmp	.+146    	; 0x124 <__bad_interrupt>
      92:	00 00       	nop
      94:	47 c0       	rjmp	.+142    	; 0x124 <__bad_interrupt>
      96:	00 00       	nop
      98:	45 c0       	rjmp	.+138    	; 0x124 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	43 c0       	rjmp	.+134    	; 0x124 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	41 c0       	rjmp	.+130    	; 0x124 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	3f c0       	rjmp	.+126    	; 0x124 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	3d c0       	rjmp	.+122    	; 0x124 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	3b c0       	rjmp	.+118    	; 0x124 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	39 c0       	rjmp	.+114    	; 0x124 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	37 c0       	rjmp	.+110    	; 0x124 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	35 c0       	rjmp	.+106    	; 0x124 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	33 c0       	rjmp	.+102    	; 0x124 <__bad_interrupt>
      be:	00 00       	nop
      c0:	31 c0       	rjmp	.+98     	; 0x124 <__bad_interrupt>
      c2:	00 00       	nop
      c4:	2f c0       	rjmp	.+94     	; 0x124 <__bad_interrupt>
      c6:	00 00       	nop
      c8:	2d c0       	rjmp	.+90     	; 0x124 <__bad_interrupt>
      ca:	00 00       	nop
      cc:	2b c0       	rjmp	.+86     	; 0x124 <__bad_interrupt>
      ce:	00 00       	nop
      d0:	29 c0       	rjmp	.+82     	; 0x124 <__bad_interrupt>
      d2:	00 00       	nop
      d4:	27 c0       	rjmp	.+78     	; 0x124 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	25 c0       	rjmp	.+74     	; 0x124 <__bad_interrupt>
      da:	00 00       	nop
      dc:	23 c0       	rjmp	.+70     	; 0x124 <__bad_interrupt>
      de:	00 00       	nop
      e0:	21 c0       	rjmp	.+66     	; 0x124 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
      e4:	11 24       	eor	r1, r1
      e6:	1f be       	out	0x3f, r1	; 63
      e8:	cf ef       	ldi	r28, 0xFF	; 255
      ea:	d1 e2       	ldi	r29, 0x21	; 33
      ec:	de bf       	out	0x3e, r29	; 62
      ee:	cd bf       	out	0x3d, r28	; 61
      f0:	00 e0       	ldi	r16, 0x00	; 0
      f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
      f4:	12 e0       	ldi	r17, 0x02	; 2
      f6:	a0 e0       	ldi	r26, 0x00	; 0
      f8:	b2 e0       	ldi	r27, 0x02	; 2
      fa:	e0 e6       	ldi	r30, 0x60	; 96
      fc:	fc e1       	ldi	r31, 0x1C	; 28
      fe:	00 e0       	ldi	r16, 0x00	; 0
     100:	0b bf       	out	0x3b, r16	; 59
     102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
     104:	07 90       	elpm	r0, Z+
     106:	0d 92       	st	X+, r0
     108:	ae 39       	cpi	r26, 0x9E	; 158
     10a:	b1 07       	cpc	r27, r17
     10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
     10e:	26 e0       	ldi	r18, 0x06	; 6
     110:	ae e9       	ldi	r26, 0x9E	; 158
     112:	b2 e0       	ldi	r27, 0x02	; 2
     114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
     116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
     118:	a4 30       	cpi	r26, 0x04	; 4
     11a:	b2 07       	cpc	r27, r18
     11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
     11e:	0f d1       	rcall	.+542    	; 0x33e <main>
     120:	0c 94 2e 0e 	jmp	0x1c5c	; 0x1c5c <_exit>

00000124 <__bad_interrupt>:
     124:	6d cf       	rjmp	.-294    	; 0x0 <__vectors>

00000126 <LCD_PulseEnable>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     126:	85 b1       	in	r24, 0x05	; 5
     128:	82 60       	ori	r24, 0x02	; 2
     12a:	85 b9       	out	0x05, r24	; 5
     12c:	85 e0       	ldi	r24, 0x05	; 5
     12e:	8a 95       	dec	r24
     130:	f1 f7       	brne	.-4      	; 0x12e <LCD_PulseEnable+0x8>
     132:	00 00       	nop
     134:	85 b1       	in	r24, 0x05	; 5
     136:	8d 7f       	andi	r24, 0xFD	; 253
     138:	85 b9       	out	0x05, r24	; 5
     13a:	87 ec       	ldi	r24, 0xC7	; 199
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	01 97       	sbiw	r24, 0x01	; 1
     140:	f1 f7       	brne	.-4      	; 0x13e <LCD_PulseEnable+0x18>
     142:	00 c0       	rjmp	.+0      	; 0x144 <LCD_PulseEnable+0x1e>
     144:	00 00       	nop
     146:	08 95       	ret

00000148 <LCD_SendNibble>:
     148:	80 ff       	sbrs	r24, 0
     14a:	04 c0       	rjmp	.+8      	; 0x154 <LCD_SendNibble+0xc>
     14c:	95 b1       	in	r25, 0x05	; 5
     14e:	94 60       	ori	r25, 0x04	; 4
     150:	95 b9       	out	0x05, r25	; 5
     152:	03 c0       	rjmp	.+6      	; 0x15a <LCD_SendNibble+0x12>
     154:	95 b1       	in	r25, 0x05	; 5
     156:	9b 7f       	andi	r25, 0xFB	; 251
     158:	95 b9       	out	0x05, r25	; 5
     15a:	81 ff       	sbrs	r24, 1
     15c:	04 c0       	rjmp	.+8      	; 0x166 <LCD_SendNibble+0x1e>
     15e:	95 b1       	in	r25, 0x05	; 5
     160:	98 60       	ori	r25, 0x08	; 8
     162:	95 b9       	out	0x05, r25	; 5
     164:	03 c0       	rjmp	.+6      	; 0x16c <LCD_SendNibble+0x24>
     166:	95 b1       	in	r25, 0x05	; 5
     168:	97 7f       	andi	r25, 0xF7	; 247
     16a:	95 b9       	out	0x05, r25	; 5
     16c:	82 ff       	sbrs	r24, 2
     16e:	06 c0       	rjmp	.+12     	; 0x17c <LCD_SendNibble+0x34>
     170:	eb e0       	ldi	r30, 0x0B	; 11
     172:	f1 e0       	ldi	r31, 0x01	; 1
     174:	90 81       	ld	r25, Z
     176:	91 60       	ori	r25, 0x01	; 1
     178:	90 83       	st	Z, r25
     17a:	05 c0       	rjmp	.+10     	; 0x186 <LCD_SendNibble+0x3e>
     17c:	eb e0       	ldi	r30, 0x0B	; 11
     17e:	f1 e0       	ldi	r31, 0x01	; 1
     180:	90 81       	ld	r25, Z
     182:	9e 7f       	andi	r25, 0xFE	; 254
     184:	90 83       	st	Z, r25
     186:	83 ff       	sbrs	r24, 3
     188:	06 c0       	rjmp	.+12     	; 0x196 <LCD_SendNibble+0x4e>
     18a:	eb e0       	ldi	r30, 0x0B	; 11
     18c:	f1 e0       	ldi	r31, 0x01	; 1
     18e:	80 81       	ld	r24, Z
     190:	82 60       	ori	r24, 0x02	; 2
     192:	80 83       	st	Z, r24
     194:	05 c0       	rjmp	.+10     	; 0x1a0 <LCD_SendNibble+0x58>
     196:	eb e0       	ldi	r30, 0x0B	; 11
     198:	f1 e0       	ldi	r31, 0x01	; 1
     19a:	80 81       	ld	r24, Z
     19c:	8d 7f       	andi	r24, 0xFD	; 253
     19e:	80 83       	st	Z, r24
     1a0:	c2 cf       	rjmp	.-124    	; 0x126 <LCD_PulseEnable>
     1a2:	08 95       	ret

000001a4 <LCD_SendCommand>:
     1a4:	cf 93       	push	r28
     1a6:	c8 2f       	mov	r28, r24
     1a8:	85 b1       	in	r24, 0x05	; 5
     1aa:	8e 7f       	andi	r24, 0xFE	; 254
     1ac:	85 b9       	out	0x05, r24	; 5
     1ae:	8c 2f       	mov	r24, r28
     1b0:	82 95       	swap	r24
     1b2:	8f 70       	andi	r24, 0x0F	; 15
     1b4:	c9 df       	rcall	.-110    	; 0x148 <LCD_SendNibble>
     1b6:	8c 2f       	mov	r24, r28
     1b8:	c7 df       	rcall	.-114    	; 0x148 <LCD_SendNibble>
     1ba:	8f e8       	ldi	r24, 0x8F	; 143
     1bc:	91 e0       	ldi	r25, 0x01	; 1
     1be:	01 97       	sbiw	r24, 0x01	; 1
     1c0:	f1 f7       	brne	.-4      	; 0x1be <LCD_SendCommand+0x1a>
     1c2:	00 c0       	rjmp	.+0      	; 0x1c4 <LCD_SendCommand+0x20>
     1c4:	00 00       	nop
     1c6:	cf 91       	pop	r28
     1c8:	08 95       	ret

000001ca <LCD_Init>:
     1ca:	84 b1       	in	r24, 0x04	; 4
     1cc:	81 60       	ori	r24, 0x01	; 1
     1ce:	84 b9       	out	0x04, r24	; 4
     1d0:	84 b1       	in	r24, 0x04	; 4
     1d2:	82 60       	ori	r24, 0x02	; 2
     1d4:	84 b9       	out	0x04, r24	; 4
     1d6:	84 b1       	in	r24, 0x04	; 4
     1d8:	84 60       	ori	r24, 0x04	; 4
     1da:	84 b9       	out	0x04, r24	; 4
     1dc:	84 b1       	in	r24, 0x04	; 4
     1de:	88 60       	ori	r24, 0x08	; 8
     1e0:	84 b9       	out	0x04, r24	; 4
     1e2:	ea e0       	ldi	r30, 0x0A	; 10
     1e4:	f1 e0       	ldi	r31, 0x01	; 1
     1e6:	80 81       	ld	r24, Z
     1e8:	81 60       	ori	r24, 0x01	; 1
     1ea:	80 83       	st	Z, r24
     1ec:	80 81       	ld	r24, Z
     1ee:	82 60       	ori	r24, 0x02	; 2
     1f0:	80 83       	st	Z, r24
     1f2:	85 b1       	in	r24, 0x05	; 5
     1f4:	8e 7f       	andi	r24, 0xFE	; 254
     1f6:	85 b9       	out	0x05, r24	; 5
     1f8:	85 b1       	in	r24, 0x05	; 5
     1fa:	8d 7f       	andi	r24, 0xFD	; 253
     1fc:	85 b9       	out	0x05, r24	; 5
     1fe:	85 b1       	in	r24, 0x05	; 5
     200:	8b 7f       	andi	r24, 0xFB	; 251
     202:	85 b9       	out	0x05, r24	; 5
     204:	85 b1       	in	r24, 0x05	; 5
     206:	87 7f       	andi	r24, 0xF7	; 247
     208:	85 b9       	out	0x05, r24	; 5
     20a:	eb e0       	ldi	r30, 0x0B	; 11
     20c:	f1 e0       	ldi	r31, 0x01	; 1
     20e:	80 81       	ld	r24, Z
     210:	8e 7f       	andi	r24, 0xFE	; 254
     212:	80 83       	st	Z, r24
     214:	80 81       	ld	r24, Z
     216:	8d 7f       	andi	r24, 0xFD	; 253
     218:	80 83       	st	Z, r24
     21a:	2f ef       	ldi	r18, 0xFF	; 255
     21c:	80 e7       	ldi	r24, 0x70	; 112
     21e:	92 e0       	ldi	r25, 0x02	; 2
     220:	21 50       	subi	r18, 0x01	; 1
     222:	80 40       	sbci	r24, 0x00	; 0
     224:	90 40       	sbci	r25, 0x00	; 0
     226:	e1 f7       	brne	.-8      	; 0x220 <LCD_Init+0x56>
     228:	00 c0       	rjmp	.+0      	; 0x22a <LCD_Init+0x60>
     22a:	00 00       	nop
     22c:	85 b1       	in	r24, 0x05	; 5
     22e:	8e 7f       	andi	r24, 0xFE	; 254
     230:	85 b9       	out	0x05, r24	; 5
     232:	83 e0       	ldi	r24, 0x03	; 3
     234:	89 df       	rcall	.-238    	; 0x148 <LCD_SendNibble>
     236:	8f e1       	ldi	r24, 0x1F	; 31
     238:	9e e4       	ldi	r25, 0x4E	; 78
     23a:	01 97       	sbiw	r24, 0x01	; 1
     23c:	f1 f7       	brne	.-4      	; 0x23a <LCD_Init+0x70>
     23e:	00 c0       	rjmp	.+0      	; 0x240 <LCD_Init+0x76>
     240:	00 00       	nop
     242:	83 e0       	ldi	r24, 0x03	; 3
     244:	81 df       	rcall	.-254    	; 0x148 <LCD_SendNibble>
     246:	87 e5       	ldi	r24, 0x57	; 87
     248:	92 e0       	ldi	r25, 0x02	; 2
     24a:	01 97       	sbiw	r24, 0x01	; 1
     24c:	f1 f7       	brne	.-4      	; 0x24a <LCD_Init+0x80>
     24e:	00 c0       	rjmp	.+0      	; 0x250 <LCD_Init+0x86>
     250:	00 00       	nop
     252:	83 e0       	ldi	r24, 0x03	; 3
     254:	79 df       	rcall	.-270    	; 0x148 <LCD_SendNibble>
     256:	87 e5       	ldi	r24, 0x57	; 87
     258:	92 e0       	ldi	r25, 0x02	; 2
     25a:	01 97       	sbiw	r24, 0x01	; 1
     25c:	f1 f7       	brne	.-4      	; 0x25a <LCD_Init+0x90>
     25e:	00 c0       	rjmp	.+0      	; 0x260 <LCD_Init+0x96>
     260:	00 00       	nop
     262:	82 e0       	ldi	r24, 0x02	; 2
     264:	71 df       	rcall	.-286    	; 0x148 <LCD_SendNibble>
     266:	87 e5       	ldi	r24, 0x57	; 87
     268:	92 e0       	ldi	r25, 0x02	; 2
     26a:	01 97       	sbiw	r24, 0x01	; 1
     26c:	f1 f7       	brne	.-4      	; 0x26a <LCD_Init+0xa0>
     26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_Init+0xa6>
     270:	00 00       	nop
     272:	88 e2       	ldi	r24, 0x28	; 40
     274:	97 df       	rcall	.-210    	; 0x1a4 <LCD_SendCommand>
     276:	8c e0       	ldi	r24, 0x0C	; 12
     278:	95 df       	rcall	.-214    	; 0x1a4 <LCD_SendCommand>
     27a:	86 e0       	ldi	r24, 0x06	; 6
     27c:	93 df       	rcall	.-218    	; 0x1a4 <LCD_SendCommand>
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	91 df       	rcall	.-222    	; 0x1a4 <LCD_SendCommand>
     282:	8f e3       	ldi	r24, 0x3F	; 63
     284:	9f e1       	ldi	r25, 0x1F	; 31
     286:	01 97       	sbiw	r24, 0x01	; 1
     288:	f1 f7       	brne	.-4      	; 0x286 <LCD_Init+0xbc>
     28a:	00 c0       	rjmp	.+0      	; 0x28c <LCD_Init+0xc2>
     28c:	00 00       	nop
     28e:	08 95       	ret

00000290 <LCD_SendData>:
     290:	cf 93       	push	r28
     292:	c8 2f       	mov	r28, r24
     294:	85 b1       	in	r24, 0x05	; 5
     296:	81 60       	ori	r24, 0x01	; 1
     298:	85 b9       	out	0x05, r24	; 5
     29a:	8c 2f       	mov	r24, r28
     29c:	82 95       	swap	r24
     29e:	8f 70       	andi	r24, 0x0F	; 15
     2a0:	53 df       	rcall	.-346    	; 0x148 <LCD_SendNibble>
     2a2:	8c 2f       	mov	r24, r28
     2a4:	51 df       	rcall	.-350    	; 0x148 <LCD_SendNibble>
     2a6:	8f e8       	ldi	r24, 0x8F	; 143
     2a8:	91 e0       	ldi	r25, 0x01	; 1
     2aa:	01 97       	sbiw	r24, 0x01	; 1
     2ac:	f1 f7       	brne	.-4      	; 0x2aa <LCD_SendData+0x1a>
     2ae:	00 c0       	rjmp	.+0      	; 0x2b0 <LCD_SendData+0x20>
     2b0:	00 00       	nop
     2b2:	cf 91       	pop	r28
     2b4:	08 95       	ret

000002b6 <LCD_WriteChar>:
     2b6:	ec cf       	rjmp	.-40     	; 0x290 <LCD_SendData>
     2b8:	08 95       	ret

000002ba <LCD_WriteString>:
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	ec 01       	movw	r28, r24
     2c0:	02 c0       	rjmp	.+4      	; 0x2c6 <LCD_WriteString+0xc>
     2c2:	21 96       	adiw	r28, 0x01	; 1
     2c4:	f8 df       	rcall	.-16     	; 0x2b6 <LCD_WriteChar>
     2c6:	88 81       	ld	r24, Y
     2c8:	81 11       	cpse	r24, r1
     2ca:	fb cf       	rjmp	.-10     	; 0x2c2 <LCD_WriteString+0x8>
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	08 95       	ret

000002d2 <LCD_Clear>:
     2d2:	81 e0       	ldi	r24, 0x01	; 1
     2d4:	67 df       	rcall	.-306    	; 0x1a4 <LCD_SendCommand>
     2d6:	8f e1       	ldi	r24, 0x1F	; 31
     2d8:	9e e4       	ldi	r25, 0x4E	; 78
     2da:	01 97       	sbiw	r24, 0x01	; 1
     2dc:	f1 f7       	brne	.-4      	; 0x2da <LCD_Clear+0x8>
     2de:	00 c0       	rjmp	.+0      	; 0x2e0 <LCD_Clear+0xe>
     2e0:	00 00       	nop
     2e2:	08 95       	ret

000002e4 <LCD_SetCursor>:
}

void LCD_Home(void) {
    LCD_SendCommand(LCD_HOME);
    _delay_ms(5);  // Home command needs more time
}
     2e4:	81 11       	cpse	r24, r1
     2e6:	60 5c       	subi	r22, 0xC0	; 192

     2e8:	86 2f       	mov	r24, r22
     2ea:	80 68       	ori	r24, 0x80	; 128
     2ec:	5b cf       	rjmp	.-330    	; 0x1a4 <LCD_SendCommand>
     2ee:	08 95       	ret

000002f0 <AVR_init>:
#include <avr/interrupt.h>
#include <stdint.h>
#include <stdio.h>

static inline void uart_init(void){
	UBRR0H = (UBRR >> 8);
     2f0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
	UBRR0L = (UBRR & 0xFF);
     2f4:	80 e1       	ldi	r24, 0x10	; 16
     2f6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
	
	UCSR0A = (1 << U2X0);
     2fa:	82 e0       	ldi	r24, 0x02	; 2
     2fc:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
     300:	88 e1       	ldi	r24, 0x18	; 24
     302:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7c00c1>
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
     306:	86 e0       	ldi	r24, 0x06	; 6
     308:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7c00c2>
#define F_CPU 16000000UL
#define SCL 100000L


static inline void i2c_init(void) {
	TWBR = ((F_CPU / SCL) - 16) / 2;
     30c:	88 e4       	ldi	r24, 0x48	; 72
     30e:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
	TWSR = (0 << TWPS0) | (0 << TWPS1);
     312:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
	TWCR = (1 << TWEN);
     316:	84 e0       	ldi	r24, 0x04	; 4
     318:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
#include "MAX30102/max30102.h"

void AVR_init(void){ 
    uart_init(); 
    i2c_init(); 
    timer_init();
     31c:	cf d1       	rcall	.+926    	; 0x6bc <timer_init>
    LCD_Init();     
     31e:	55 df       	rcall	.-342    	; 0x1ca <LCD_Init>
	LCD_Clear();
     320:	d8 df       	rcall	.-80     	; 0x2d2 <LCD_Clear>
	LCD_WriteString("Initializare...");
     322:	80 e0       	ldi	r24, 0x00	; 0
     324:	92 e0       	ldi	r25, 0x02	; 2
     326:	c9 df       	rcall	.-110    	; 0x2ba <LCD_WriteString>
     328:	2f ef       	ldi	r18, 0xFF	; 255
     32a:	83 ed       	ldi	r24, 0xD3	; 211
     32c:	90 e3       	ldi	r25, 0x30	; 48
     32e:	21 50       	subi	r18, 0x01	; 1
     330:	80 40       	sbci	r24, 0x00	; 0
     332:	90 40       	sbci	r25, 0x00	; 0
     334:	e1 f7       	brne	.-8      	; 0x32e <AVR_init+0x3e>
     336:	00 c0       	rjmp	.+0      	; 0x338 <AVR_init+0x48>
     338:	00 00       	nop
	_delay_ms(1000);
    LCD_Clear();   
     33a:	cb cf       	rjmp	.-106    	; 0x2d2 <LCD_Clear>
     33c:	08 95       	ret

0000033e <main>:
     33e:	d8 df       	rcall	.-80     	; 0x2f0 <AVR_init>
	int optiune = 1;
	
	//TODO: meniu cu intreruperi pt functii.

    while(1) {
		MAX30102_Start();
     340:	a2 d3       	rcall	.+1860   	; 0xa86 <MAX30102_Start>
     342:	fe cf       	rjmp	.-4      	; 0x340 <main+0x2>

00000344 <max30102_write_reg>:
     344:	94 ea       	ldi	r25, 0xA4	; 164
    return max30102_read_reg(MAX30102_FIFOREADPTR);
}

// max30102_get_write_ptr - obtine pozitia pointerului de scriere in FIFO
// Returnare: pozitia pointerului (0-31)
// Citeste registrul MAX30102_FIFOWRITEPTR
     346:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     34a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     34e:	99 23       	and	r25, r25
     350:	e4 f7       	brge	.-8      	; 0x34a <max30102_write_reg+0x6>
     352:	9e ea       	ldi	r25, 0xAE	; 174
     354:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     358:	94 e8       	ldi	r25, 0x84	; 132
     35a:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     35e:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     362:	99 23       	and	r25, r25
     364:	e4 f7       	brge	.-8      	; 0x35e <max30102_write_reg+0x1a>
     366:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     36a:	98 7f       	andi	r25, 0xF8	; 248
     36c:	98 31       	cpi	r25, 0x18	; 24
     36e:	21 f0       	breq	.+8      	; 0x378 <max30102_write_reg+0x34>
     370:	84 e9       	ldi	r24, 0x94	; 148
     372:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     376:	08 95       	ret
     378:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     37c:	84 e8       	ldi	r24, 0x84	; 132
     37e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     382:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     386:	88 23       	and	r24, r24
     388:	e4 f7       	brge	.-8      	; 0x382 <max30102_write_reg+0x3e>
     38a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     38e:	88 7f       	andi	r24, 0xF8	; 248
     390:	88 32       	cpi	r24, 0x28	; 40
     392:	21 f0       	breq	.+8      	; 0x39c <max30102_write_reg+0x58>
     394:	84 e9       	ldi	r24, 0x94	; 148
     396:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     39a:	08 95       	ret
     39c:	60 93 bb 00 	sts	0x00BB, r22	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     3a0:	84 e8       	ldi	r24, 0x84	; 132
     3a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     3a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     3aa:	88 23       	and	r24, r24
     3ac:	e4 f7       	brge	.-8      	; 0x3a6 <max30102_write_reg+0x62>
     3ae:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     3b2:	88 7f       	andi	r24, 0xF8	; 248
     3b4:	88 32       	cpi	r24, 0x28	; 40
     3b6:	21 f0       	breq	.+8      	; 0x3c0 <max30102_write_reg+0x7c>
     3b8:	84 e9       	ldi	r24, 0x94	; 148
     3ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     3be:	08 95       	ret
     3c0:	84 e9       	ldi	r24, 0x94	; 148
     3c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     3c6:	08 95       	ret

000003c8 <max30102_read_reg>:
     3c8:	94 ea       	ldi	r25, 0xA4	; 164
     3ca:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     3ce:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     3d2:	99 23       	and	r25, r25
     3d4:	e4 f7       	brge	.-8      	; 0x3ce <max30102_read_reg+0x6>
     3d6:	9e ea       	ldi	r25, 0xAE	; 174
     3d8:	90 93 bb 00 	sts	0x00BB, r25	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     3dc:	94 e8       	ldi	r25, 0x84	; 132
     3de:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     3e2:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     3e6:	99 23       	and	r25, r25
     3e8:	e4 f7       	brge	.-8      	; 0x3e2 <max30102_read_reg+0x1a>
     3ea:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     3ee:	98 7f       	andi	r25, 0xF8	; 248
     3f0:	98 31       	cpi	r25, 0x18	; 24
     3f2:	29 f0       	breq	.+10     	; 0x3fe <max30102_read_reg+0x36>
     3f4:	84 e9       	ldi	r24, 0x94	; 148
     3f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     3fa:	8f ef       	ldi	r24, 0xFF	; 255
     3fc:	08 95       	ret
     3fe:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     402:	84 e8       	ldi	r24, 0x84	; 132
     404:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     408:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     40c:	88 23       	and	r24, r24
     40e:	e4 f7       	brge	.-8      	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
     410:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     414:	88 7f       	andi	r24, 0xF8	; 248
     416:	88 32       	cpi	r24, 0x28	; 40
     418:	29 f0       	breq	.+10     	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
     41a:	84 e9       	ldi	r24, 0x94	; 148
     41c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     420:	8f ef       	ldi	r24, 0xFF	; 255
     422:	08 95       	ret
     424:	84 ea       	ldi	r24, 0xA4	; 164
     426:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     42a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     42e:	88 23       	and	r24, r24
     430:	e4 f7       	brge	.-8      	; 0x42a <__LOCK_REGION_LENGTH__+0x2a>
     432:	8f ea       	ldi	r24, 0xAF	; 175
     434:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     438:	84 e8       	ldi	r24, 0x84	; 132
     43a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     43e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     442:	88 23       	and	r24, r24
     444:	e4 f7       	brge	.-8      	; 0x43e <__LOCK_REGION_LENGTH__+0x3e>
     446:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     44a:	88 7f       	andi	r24, 0xF8	; 248
     44c:	80 34       	cpi	r24, 0x40	; 64
     44e:	29 f0       	breq	.+10     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     450:	84 e9       	ldi	r24, 0x94	; 148
     452:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     456:	8f ef       	ldi	r24, 0xFF	; 255
     458:	08 95       	ret
     45a:	84 e8       	ldi	r24, 0x84	; 132
     45c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     460:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     464:	88 23       	and	r24, r24
     466:	e4 f7       	brge	.-8      	; 0x460 <__LOCK_REGION_LENGTH__+0x60>
     468:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     46c:	94 e9       	ldi	r25, 0x94	; 148
     46e:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     472:	08 95       	ret

00000474 <max30102_read_fifo>:
     474:	dc 01       	movw	r26, r24
     476:	84 ea       	ldi	r24, 0xA4	; 164
     478:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     47c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     480:	88 23       	and	r24, r24
     482:	e4 f7       	brge	.-8      	; 0x47c <max30102_read_fifo+0x8>
     484:	8e ea       	ldi	r24, 0xAE	; 174
     486:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     48a:	84 e8       	ldi	r24, 0x84	; 132
     48c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     490:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     494:	88 23       	and	r24, r24
     496:	e4 f7       	brge	.-8      	; 0x490 <max30102_read_fifo+0x1c>
     498:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     49c:	87 e0       	ldi	r24, 0x07	; 7
     49e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     4a2:	84 e8       	ldi	r24, 0x84	; 132
     4a4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4a8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4ac:	99 23       	and	r25, r25
     4ae:	e4 f7       	brge	.-8      	; 0x4a8 <max30102_read_fifo+0x34>
     4b0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     4b4:	84 ea       	ldi	r24, 0xA4	; 164
     4b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4ba:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4be:	99 23       	and	r25, r25
     4c0:	e4 f7       	brge	.-8      	; 0x4ba <max30102_read_fifo+0x46>
     4c2:	8f ea       	ldi	r24, 0xAF	; 175
     4c4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     4c8:	84 e8       	ldi	r24, 0x84	; 132
     4ca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4ce:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4d2:	99 23       	and	r25, r25
     4d4:	e4 f7       	brge	.-8      	; 0x4ce <max30102_read_fifo+0x5a>
     4d6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
     4da:	20 e0       	ldi	r18, 0x00	; 0
     4dc:	25 c0       	rjmp	.+74     	; 0x528 <max30102_read_fifo+0xb4>
     4de:	e2 2f       	mov	r30, r18
     4e0:	f0 e0       	ldi	r31, 0x00	; 0
     4e2:	46 2f       	mov	r20, r22
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	41 50       	subi	r20, 0x01	; 1
     4e8:	51 09       	sbc	r21, r1
     4ea:	e4 17       	cp	r30, r20
     4ec:	f5 07       	cpc	r31, r21
     4ee:	74 f4       	brge	.+28     	; 0x50c <max30102_read_fifo+0x98>
     4f0:	fd 01       	movw	r30, r26
     4f2:	e2 0f       	add	r30, r18
     4f4:	f1 1d       	adc	r31, r1
     4f6:	84 ec       	ldi	r24, 0xC4	; 196
     4f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     4fc:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     500:	99 23       	and	r25, r25
     502:	e4 f7       	brge	.-8      	; 0x4fc <max30102_read_fifo+0x88>
     504:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     508:	80 83       	st	Z, r24
     50a:	0d c0       	rjmp	.+26     	; 0x526 <max30102_read_fifo+0xb2>
     50c:	fd 01       	movw	r30, r26
     50e:	e2 0f       	add	r30, r18
     510:	f1 1d       	adc	r31, r1
     512:	84 e8       	ldi	r24, 0x84	; 132
     514:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     518:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     51c:	99 23       	and	r25, r25
     51e:	e4 f7       	brge	.-8      	; 0x518 <max30102_read_fifo+0xa4>
     520:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
     524:	80 83       	st	Z, r24
     526:	2f 5f       	subi	r18, 0xFF	; 255
     528:	26 17       	cp	r18, r22
     52a:	c8 f2       	brcs	.-78     	; 0x4de <max30102_read_fifo+0x6a>
     52c:	84 e9       	ldi	r24, 0x94	; 148
     52e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
     532:	08 95       	ret

00000534 <max30102_init>:
     534:	8f ef       	ldi	r24, 0xFF	; 255
     536:	48 df       	rcall	.-368    	; 0x3c8 <max30102_read_reg>
     538:	91 e0       	ldi	r25, 0x01	; 1
     53a:	85 31       	cpi	r24, 0x15	; 21
     53c:	09 f0       	breq	.+2      	; 0x540 <max30102_init+0xc>
     53e:	90 e0       	ldi	r25, 0x00	; 0
     540:	89 2f       	mov	r24, r25
     542:	08 95       	ret

00000544 <max30102_reset>:
     544:	60 e4       	ldi	r22, 0x40	; 64
     546:	89 e0       	ldi	r24, 0x09	; 9
     548:	fd de       	rcall	.-518    	; 0x344 <max30102_write_reg>
     54a:	2f ef       	ldi	r18, 0xFF	; 255
     54c:	81 ee       	ldi	r24, 0xE1	; 225
     54e:	94 e0       	ldi	r25, 0x04	; 4
     550:	21 50       	subi	r18, 0x01	; 1
     552:	80 40       	sbci	r24, 0x00	; 0
     554:	90 40       	sbci	r25, 0x00	; 0
     556:	e1 f7       	brne	.-8      	; 0x550 <max30102_reset+0xc>
     558:	00 c0       	rjmp	.+0      	; 0x55a <max30102_reset+0x16>
     55a:	00 00       	nop
     55c:	08 95       	ret

0000055e <max30102_check>:
     55e:	ea df       	rcall	.-44     	; 0x534 <max30102_init>
     560:	81 11       	cpse	r24, r1
     562:	16 c0       	rjmp	.+44     	; 0x590 <max30102_check+0x32>
     564:	e0 e1       	ldi	r30, 0x10	; 16
     566:	f2 e0       	ldi	r31, 0x02	; 2
     568:	07 c0       	rjmp	.+14     	; 0x578 <max30102_check+0x1a>
     56a:	31 96       	adiw	r30, 0x01	; 1
     56c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     570:	85 ff       	sbrs	r24, 5
     572:	fc cf       	rjmp	.-8      	; 0x56c <max30102_check+0xe>
     574:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     578:	90 81       	ld	r25, Z
     57a:	91 11       	cpse	r25, r1
     57c:	f6 cf       	rjmp	.-20     	; 0x56a <max30102_check+0xc>
     57e:	ff cf       	rjmp	.-2      	; 0x57e <max30102_check+0x20>
     580:	31 96       	adiw	r30, 0x01	; 1
     582:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     586:	85 ff       	sbrs	r24, 5
     588:	fc cf       	rjmp	.-8      	; 0x582 <max30102_check+0x24>
     58a:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     58e:	02 c0       	rjmp	.+4      	; 0x594 <max30102_check+0x36>
     590:	e4 e2       	ldi	r30, 0x24	; 36
     592:	f2 e0       	ldi	r31, 0x02	; 2
     594:	90 81       	ld	r25, Z
     596:	91 11       	cpse	r25, r1
     598:	f3 cf       	rjmp	.-26     	; 0x580 <max30102_check+0x22>
     59a:	08 95       	ret

0000059c <max30102_clear_fifo>:
     59c:	60 e0       	ldi	r22, 0x00	; 0
     59e:	84 e0       	ldi	r24, 0x04	; 4
     5a0:	d1 de       	rcall	.-606    	; 0x344 <max30102_write_reg>
     5a2:	60 e0       	ldi	r22, 0x00	; 0
     5a4:	85 e0       	ldi	r24, 0x05	; 5
     5a6:	ce de       	rcall	.-612    	; 0x344 <max30102_write_reg>
     5a8:	60 e0       	ldi	r22, 0x00	; 0
     5aa:	86 e0       	ldi	r24, 0x06	; 6
     5ac:	cb ce       	rjmp	.-618    	; 0x344 <max30102_write_reg>
     5ae:	08 95       	ret

000005b0 <max30102_setup>:
     5b0:	ff 92       	push	r15
     5b2:	0f 93       	push	r16
     5b4:	1f 93       	push	r17
     5b6:	cf 93       	push	r28
     5b8:	df 93       	push	r29
     5ba:	f8 2e       	mov	r15, r24
     5bc:	16 2f       	mov	r17, r22
     5be:	d4 2f       	mov	r29, r20
     5c0:	c2 2f       	mov	r28, r18
     5c2:	c0 df       	rcall	.-128    	; 0x544 <max30102_reset>
     5c4:	61 2f       	mov	r22, r17
     5c6:	60 61       	ori	r22, 0x10	; 16
     5c8:	88 e0       	ldi	r24, 0x08	; 8
     5ca:	bc de       	rcall	.-648    	; 0x344 <max30102_write_reg>
     5cc:	63 e0       	ldi	r22, 0x03	; 3
     5ce:	89 e0       	ldi	r24, 0x09	; 9
     5d0:	b9 de       	rcall	.-654    	; 0x344 <max30102_write_reg>
     5d2:	60 2f       	mov	r22, r16
     5d4:	6d 2b       	or	r22, r29
     5d6:	6c 2b       	or	r22, r28
     5d8:	8a e0       	ldi	r24, 0x0A	; 10
     5da:	b4 de       	rcall	.-664    	; 0x344 <max30102_write_reg>
     5dc:	6f 2d       	mov	r22, r15
     5de:	8c e0       	ldi	r24, 0x0C	; 12
     5e0:	b1 de       	rcall	.-670    	; 0x344 <max30102_write_reg>
     5e2:	6f 2d       	mov	r22, r15
     5e4:	8d e0       	ldi	r24, 0x0D	; 13
     5e6:	ae de       	rcall	.-676    	; 0x344 <max30102_write_reg>
     5e8:	61 e2       	ldi	r22, 0x21	; 33
     5ea:	81 e1       	ldi	r24, 0x11	; 17
     5ec:	ab de       	rcall	.-682    	; 0x344 <max30102_write_reg>
     5ee:	60 e0       	ldi	r22, 0x00	; 0
     5f0:	82 e1       	ldi	r24, 0x12	; 18
     5f2:	a8 de       	rcall	.-688    	; 0x344 <max30102_write_reg>
     5f4:	d3 df       	rcall	.-90     	; 0x59c <max30102_clear_fifo>
     5f6:	df 91       	pop	r29
     5f8:	cf 91       	pop	r28
     5fa:	1f 91       	pop	r17
     5fc:	0f 91       	pop	r16
     5fe:	ff 90       	pop	r15
     600:	08 95       	ret

00000602 <max30102_get_read_ptr>:
     602:	86 e0       	ldi	r24, 0x06	; 6
     604:	e1 ce       	rjmp	.-574    	; 0x3c8 <max30102_read_reg>
     606:	08 95       	ret

00000608 <max30102_get_write_ptr>:
     608:	84 e0       	ldi	r24, 0x04	; 4
     60a:	de ce       	rjmp	.-580    	; 0x3c8 <max30102_read_reg>
     60c:	08 95       	ret

0000060e <max30102_read_sample>:
     60e:	ef 92       	push	r14
     610:	ff 92       	push	r15
     612:	0f 93       	push	r16
     614:	1f 93       	push	r17
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	00 d0       	rcall	.+0      	; 0x61c <max30102_read_sample+0xe>
     61c:	00 d0       	rcall	.+0      	; 0x61e <max30102_read_sample+0x10>
     61e:	cd b7       	in	r28, 0x3d	; 61
     620:	de b7       	in	r29, 0x3e	; 62
     622:	7c 01       	movw	r14, r24
     624:	8b 01       	movw	r16, r22
     626:	66 e0       	ldi	r22, 0x06	; 6
     628:	ce 01       	movw	r24, r28
     62a:	01 96       	adiw	r24, 0x01	; 1
     62c:	23 df       	rcall	.-442    	; 0x474 <max30102_read_fifo>
     62e:	89 81       	ldd	r24, Y+1	; 0x01
     630:	90 e0       	ldi	r25, 0x00	; 0
     632:	a0 e0       	ldi	r26, 0x00	; 0
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	bc 01       	movw	r22, r24
     638:	55 27       	eor	r21, r21
     63a:	44 27       	eor	r20, r20
     63c:	9a 81       	ldd	r25, Y+2	; 0x02
     63e:	89 2f       	mov	r24, r25
     640:	90 e0       	ldi	r25, 0x00	; 0
     642:	a0 e0       	ldi	r26, 0x00	; 0
     644:	b0 e0       	ldi	r27, 0x00	; 0
     646:	ba 2f       	mov	r27, r26
     648:	a9 2f       	mov	r26, r25
     64a:	98 2f       	mov	r25, r24
     64c:	88 27       	eor	r24, r24
     64e:	84 2b       	or	r24, r20
     650:	95 2b       	or	r25, r21
     652:	a6 2b       	or	r26, r22
     654:	b7 2b       	or	r27, r23
     656:	2b 81       	ldd	r18, Y+3	; 0x03
     658:	82 2b       	or	r24, r18
     65a:	a3 70       	andi	r26, 0x03	; 3
     65c:	bb 27       	eor	r27, r27
     65e:	f7 01       	movw	r30, r14
     660:	80 83       	st	Z, r24
     662:	91 83       	std	Z+1, r25	; 0x01
     664:	a2 83       	std	Z+2, r26	; 0x02
     666:	b3 83       	std	Z+3, r27	; 0x03
     668:	8c 81       	ldd	r24, Y+4	; 0x04
     66a:	90 e0       	ldi	r25, 0x00	; 0
     66c:	a0 e0       	ldi	r26, 0x00	; 0
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	bc 01       	movw	r22, r24
     672:	55 27       	eor	r21, r21
     674:	44 27       	eor	r20, r20
     676:	9d 81       	ldd	r25, Y+5	; 0x05
     678:	89 2f       	mov	r24, r25
     67a:	90 e0       	ldi	r25, 0x00	; 0
     67c:	a0 e0       	ldi	r26, 0x00	; 0
     67e:	b0 e0       	ldi	r27, 0x00	; 0
     680:	ba 2f       	mov	r27, r26
     682:	a9 2f       	mov	r26, r25
     684:	98 2f       	mov	r25, r24
     686:	88 27       	eor	r24, r24
     688:	84 2b       	or	r24, r20
     68a:	95 2b       	or	r25, r21
     68c:	a6 2b       	or	r26, r22
     68e:	b7 2b       	or	r27, r23
     690:	2e 81       	ldd	r18, Y+6	; 0x06
     692:	82 2b       	or	r24, r18
     694:	a3 70       	andi	r26, 0x03	; 3
     696:	bb 27       	eor	r27, r27
     698:	f8 01       	movw	r30, r16
     69a:	80 83       	st	Z, r24
     69c:	91 83       	std	Z+1, r25	; 0x01
     69e:	a2 83       	std	Z+2, r26	; 0x02
     6a0:	b3 83       	std	Z+3, r27	; 0x03
     6a2:	26 96       	adiw	r28, 0x06	; 6
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
     6ae:	df 91       	pop	r29
     6b0:	cf 91       	pop	r28
     6b2:	1f 91       	pop	r17
     6b4:	0f 91       	pop	r16
     6b6:	ff 90       	pop	r15
     6b8:	ef 90       	pop	r14
     6ba:	08 95       	ret

000006bc <timer_init>:
// Parametri: red (pointer la valoare red), ir (pointer la valoare infrarosu)
// Citeste 6 bytes din FIFO: bytes 0-2 (red), bytes 3-5 (infrarosu)
// Mascare la 18 biti (0x3FFFF) deoarece senzorul foloseste 18 biti
void max30102_read_sample(uint32_t *red, uint32_t *ir) {
    uint8_t buffer[6];
    max30102_read_fifo(buffer, 6);
     6bc:	8b e0       	ldi	r24, 0x0B	; 11
     6be:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7c0081>
    
     6c2:	89 ef       	ldi	r24, 0xF9	; 249
     6c4:	90 e0       	ldi	r25, 0x00	; 0
     6c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
     6ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    *red = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
     6ce:	82 e0       	ldi	r24, 0x02	; 2
     6d0:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7c006f>
    *red &= 0x3FFFF;
     6d4:	78 94       	sei
     6d6:	08 95       	ret

000006d8 <millis>:
    
    *ir = ((uint32_t)buffer[3] << 16) | ((uint32_t)buffer[4] << 8) | buffer[5];
    *ir &= 0x3FFFF;
}
     6d8:	60 91 9e 02 	lds	r22, 0x029E	; 0x80029e <__data_end>
     6dc:	70 91 9f 02 	lds	r23, 0x029F	; 0x80029f <__data_end+0x1>
     6e0:	80 91 a0 02 	lds	r24, 0x02A0	; 0x8002a0 <__data_end+0x2>
     6e4:	90 91 a1 02 	lds	r25, 0x02A1	; 0x8002a1 <__data_end+0x3>

     6e8:	08 95       	ret

000006ea <__vector_17>:
// max30102_get_red - obtine doar valoarea LED-ului rosu din FIFO
// Returnare: valoare red pe 18 biti
     6ea:	1f 92       	push	r1
     6ec:	0f 92       	push	r0
     6ee:	0f b6       	in	r0, 0x3f	; 63
     6f0:	0f 92       	push	r0
     6f2:	11 24       	eor	r1, r1
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
// Citeste 6 bytes si extrage primii 3 pentru red
     6fc:	80 91 9e 02 	lds	r24, 0x029E	; 0x80029e <__data_end>
     700:	90 91 9f 02 	lds	r25, 0x029F	; 0x80029f <__data_end+0x1>
     704:	a0 91 a0 02 	lds	r26, 0x02A0	; 0x8002a0 <__data_end+0x2>
     708:	b0 91 a1 02 	lds	r27, 0x02A1	; 0x8002a1 <__data_end+0x3>
     70c:	01 96       	adiw	r24, 0x01	; 1
     70e:	a1 1d       	adc	r26, r1
     710:	b1 1d       	adc	r27, r1
     712:	80 93 9e 02 	sts	0x029E, r24	; 0x80029e <__data_end>
     716:	90 93 9f 02 	sts	0x029F, r25	; 0x80029f <__data_end+0x1>
     71a:	a0 93 a0 02 	sts	0x02A0, r26	; 0x8002a0 <__data_end+0x2>
     71e:	b0 93 a1 02 	sts	0x02A1, r27	; 0x8002a1 <__data_end+0x3>
uint32_t max30102_get_red(void) {
     722:	bf 91       	pop	r27
     724:	af 91       	pop	r26
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	0f 90       	pop	r0
     72c:	0f be       	out	0x3f, r0	; 63
     72e:	0f 90       	pop	r0
     730:	1f 90       	pop	r1
     732:	18 95       	reti

00000734 <calculateSpO2>:
    max30102_read_fifo(buffer, 6);
    //Comentariu
    uint32_t red = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
    red &= 0x3FFFF;
    
    return red;si iti 
     734:	4f 92       	push	r4
     736:	5f 92       	push	r5
     738:	6f 92       	push	r6
     73a:	7f 92       	push	r7
     73c:	8f 92       	push	r8
     73e:	9f 92       	push	r9
     740:	af 92       	push	r10
     742:	bf 92       	push	r11
     744:	cf 92       	push	r12
     746:	df 92       	push	r13
     748:	ef 92       	push	r14
     74a:	ff 92       	push	r15
     74c:	0f 93       	push	r16
     74e:	1f 93       	push	r17
     750:	cf 93       	push	r28
     752:	df 93       	push	r29
     754:	cd b7       	in	r28, 0x3d	; 61
     756:	de b7       	in	r29, 0x3e	; 62
     758:	2c 97       	sbiw	r28, 0x0c	; 12
     75a:	0f b6       	in	r0, 0x3f	; 63
     75c:	f8 94       	cli
     75e:	de bf       	out	0x3e, r29	; 62
     760:	0f be       	out	0x3f, r0	; 63
     762:	cd bf       	out	0x3d, r28	; 61
}

// max30102_get_ir - obtine doar valoarea LED-ului infrarosu din FIFO
// Returnare: valoare infrarosu pe 18 biti
// Citeste 6 bytes si extrage ultimi 3 pentru infrarosu
     764:	80 e0       	ldi	r24, 0x00	; 0
     766:	90 e0       	ldi	r25, 0x00	; 0
    red &= 0x3FFFF;
    
    return red;si iti 
}

// max30102_get_ir - obtine doar valoarea LED-ului infrarosu din FIFO
     768:	c1 2c       	mov	r12, r1
     76a:	d1 2c       	mov	r13, r1
     76c:	76 01       	movw	r14, r12
     76e:	81 2c       	mov	r8, r1
     770:	91 2c       	mov	r9, r1
     772:	54 01       	movw	r10, r8
    uint32_t red = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
    red &= 0x3FFFF;
    
    return red;si iti 
}

     774:	0f 2e       	mov	r0, r31
     776:	ff e3       	ldi	r31, 0x3F	; 63
     778:	4f 2e       	mov	r4, r31
     77a:	f2 e4       	ldi	r31, 0x42	; 66
     77c:	5f 2e       	mov	r5, r31
     77e:	ff e0       	ldi	r31, 0x0F	; 15
     780:	6f 2e       	mov	r6, r31
     782:	71 2c       	mov	r7, r1
     784:	f0 2d       	mov	r31, r0
     786:	1d 82       	std	Y+5, r1	; 0x05
     788:	1e 82       	std	Y+6, r1	; 0x06
     78a:	1f 82       	std	Y+7, r1	; 0x07
     78c:	18 86       	std	Y+8, r1	; 0x08
    //Comentariu
    uint32_t red = ((uint32_t)buffer[0] << 16) | ((uint32_t)buffer[1] << 8) | buffer[2];
    red &= 0x3FFFF;
    
    return red;si iti 
}
     78e:	2f e3       	ldi	r18, 0x3F	; 63
     790:	32 e4       	ldi	r19, 0x42	; 66
     792:	4f e0       	ldi	r20, 0x0F	; 15
     794:	50 e0       	ldi	r21, 0x00	; 0
     796:	29 87       	std	Y+9, r18	; 0x09
     798:	3a 87       	std	Y+10, r19	; 0x0a
     79a:	4b 87       	std	Y+11, r20	; 0x0b
     79c:	5c 87       	std	Y+12, r21	; 0x0c
     79e:	19 82       	std	Y+1, r1	; 0x01
     7a0:	1a 82       	std	Y+2, r1	; 0x02
     7a2:	1b 82       	std	Y+3, r1	; 0x03
     7a4:	1c 82       	std	Y+4, r1	; 0x04

// max30102_get_ir - obtine doar valoarea LED-ului infrarosu din FIFO
// Returnare: valoare infrarosu pe 18 biti
// Citeste 6 bytes si extrage ultimi 3 pentru infrarosu
     7a6:	4d c0       	rjmp	.+154    	; 0x842 <calculateSpO2+0x10e>
uint32_t max30102_get_ir(void) {
     7a8:	fc 01       	movw	r30, r24
     7aa:	ee 0f       	add	r30, r30
     7ac:	ff 1f       	adc	r31, r31
     7ae:	ee 0f       	add	r30, r30
     7b0:	ff 1f       	adc	r31, r31
     7b2:	ec 51       	subi	r30, 0x1C	; 28
     7b4:	fd 4f       	sbci	r31, 0xFD	; 253
     7b6:	00 81       	ld	r16, Z
     7b8:	11 81       	ldd	r17, Z+1	; 0x01
     7ba:	22 81       	ldd	r18, Z+2	; 0x02
     7bc:	33 81       	ldd	r19, Z+3	; 0x03
     7be:	49 81       	ldd	r20, Y+1	; 0x01
     7c0:	5a 81       	ldd	r21, Y+2	; 0x02
     7c2:	6b 81       	ldd	r22, Y+3	; 0x03
     7c4:	7c 81       	ldd	r23, Y+4	; 0x04
     7c6:	40 17       	cp	r20, r16
     7c8:	51 07       	cpc	r21, r17
     7ca:	62 07       	cpc	r22, r18
     7cc:	73 07       	cpc	r23, r19
     7ce:	20 f4       	brcc	.+8      	; 0x7d8 <calculateSpO2+0xa4>
     7d0:	09 83       	std	Y+1, r16	; 0x01
     7d2:	1a 83       	std	Y+2, r17	; 0x02
     7d4:	2b 83       	std	Y+3, r18	; 0x03
     7d6:	3c 83       	std	Y+4, r19	; 0x04
    uint8_t buffer[6];
     7d8:	49 85       	ldd	r20, Y+9	; 0x09
     7da:	5a 85       	ldd	r21, Y+10	; 0x0a
     7dc:	6b 85       	ldd	r22, Y+11	; 0x0b
     7de:	7c 85       	ldd	r23, Y+12	; 0x0c
     7e0:	04 17       	cp	r16, r20
     7e2:	15 07       	cpc	r17, r21
     7e4:	26 07       	cpc	r18, r22
     7e6:	37 07       	cpc	r19, r23
     7e8:	20 f4       	brcc	.+8      	; 0x7f2 <calculateSpO2+0xbe>
     7ea:	09 87       	std	Y+9, r16	; 0x09
     7ec:	1a 87       	std	Y+10, r17	; 0x0a
     7ee:	2b 87       	std	Y+11, r18	; 0x0b
     7f0:	3c 87       	std	Y+12, r19	; 0x0c
    max30102_read_fifo(buffer, 6);
     7f2:	80 0e       	add	r8, r16
     7f4:	91 1e       	adc	r9, r17
     7f6:	a2 1e       	adc	r10, r18
     7f8:	b3 1e       	adc	r11, r19
    
    uint32_t ir = ((uint32_t)buffer[3] << 16) | ((uint32_t)buffer[4] << 8) | buffer[5];
     7fa:	fc 01       	movw	r30, r24
     7fc:	ee 0f       	add	r30, r30
     7fe:	ff 1f       	adc	r31, r31
     800:	ee 0f       	add	r30, r30
     802:	ff 1f       	adc	r31, r31
     804:	ec 58       	subi	r30, 0x8C	; 140
     806:	fb 4f       	sbci	r31, 0xFB	; 251
     808:	00 81       	ld	r16, Z
     80a:	11 81       	ldd	r17, Z+1	; 0x01
     80c:	22 81       	ldd	r18, Z+2	; 0x02
     80e:	33 81       	ldd	r19, Z+3	; 0x03
     810:	4d 81       	ldd	r20, Y+5	; 0x05
     812:	5e 81       	ldd	r21, Y+6	; 0x06
     814:	6f 81       	ldd	r22, Y+7	; 0x07
     816:	78 85       	ldd	r23, Y+8	; 0x08
     818:	40 17       	cp	r20, r16
     81a:	51 07       	cpc	r21, r17
     81c:	62 07       	cpc	r22, r18
     81e:	73 07       	cpc	r23, r19
     820:	20 f4       	brcc	.+8      	; 0x82a <calculateSpO2+0xf6>
     822:	0d 83       	std	Y+5, r16	; 0x05
     824:	1e 83       	std	Y+6, r17	; 0x06
     826:	2f 83       	std	Y+7, r18	; 0x07
     828:	38 87       	std	Y+8, r19	; 0x08
    ir &= 0x3FFFF;
     82a:	04 15       	cp	r16, r4
     82c:	15 05       	cpc	r17, r5
     82e:	26 05       	cpc	r18, r6
     830:	37 05       	cpc	r19, r7
     832:	10 f4       	brcc	.+4      	; 0x838 <calculateSpO2+0x104>
     834:	28 01       	movw	r4, r16
     836:	39 01       	movw	r6, r18
    
     838:	c0 0e       	add	r12, r16
     83a:	d1 1e       	adc	r13, r17
     83c:	e2 1e       	adc	r14, r18
     83e:	f3 1e       	adc	r15, r19
    return red;si iti 
}

// max30102_get_ir - obtine doar valoarea LED-ului infrarosu din FIFO
// Returnare: valoare infrarosu pe 18 biti
// Citeste 6 bytes si extrage ultimi 3 pentru infrarosu
     840:	01 96       	adiw	r24, 0x01	; 1
     842:	84 36       	cpi	r24, 0x64	; 100
     844:	91 05       	cpc	r25, r1
     846:	0c f4       	brge	.+2      	; 0x84a <calculateSpO2+0x116>
     848:	af cf       	rjmp	.-162    	; 0x7a8 <calculateSpO2+0x74>
    uint32_t ir = ((uint32_t)buffer[3] << 16) | ((uint32_t)buffer[4] << 8) | buffer[5];
    ir &= 0x3FFFF;
    
    return ir;
}

     84a:	69 81       	ldd	r22, Y+1	; 0x01
     84c:	7a 81       	ldd	r23, Y+2	; 0x02
     84e:	8b 81       	ldd	r24, Y+3	; 0x03
     850:	9c 81       	ldd	r25, Y+4	; 0x04
     852:	29 85       	ldd	r18, Y+9	; 0x09
     854:	3a 85       	ldd	r19, Y+10	; 0x0a
     856:	4b 85       	ldd	r20, Y+11	; 0x0b
     858:	5c 85       	ldd	r21, Y+12	; 0x0c
     85a:	62 1b       	sub	r22, r18
     85c:	73 0b       	sbc	r23, r19
     85e:	84 0b       	sbc	r24, r20
     860:	95 0b       	sbc	r25, r21
     862:	67 d5       	rcall	.+2766   	; 0x1332 <__floatunsisf>
     864:	69 83       	std	Y+1, r22	; 0x01
     866:	7a 83       	std	Y+2, r23	; 0x02
     868:	8b 83       	std	Y+3, r24	; 0x03
     86a:	9c 83       	std	Y+4, r25	; 0x04
//sfarsit functii de baza.
     86c:	6d 81       	ldd	r22, Y+5	; 0x05
     86e:	7e 81       	ldd	r23, Y+6	; 0x06
     870:	8f 81       	ldd	r24, Y+7	; 0x07
     872:	98 85       	ldd	r25, Y+8	; 0x08
     874:	64 19       	sub	r22, r4
     876:	75 09       	sbc	r23, r5
     878:	86 09       	sbc	r24, r6
     87a:	97 09       	sbc	r25, r7
     87c:	5a d5       	rcall	.+2740   	; 0x1332 <__floatunsisf>
     87e:	2b 01       	movw	r4, r22
     880:	3c 01       	movw	r6, r24
//======================================================================================================================
     882:	c5 01       	movw	r24, r10
     884:	b4 01       	movw	r22, r8
     886:	55 d5       	rcall	.+2730   	; 0x1332 <__floatunsisf>
     888:	20 e0       	ldi	r18, 0x00	; 0
     88a:	30 e0       	ldi	r19, 0x00	; 0
     88c:	48 ec       	ldi	r20, 0xC8	; 200
     88e:	52 e4       	ldi	r21, 0x42	; 66
     890:	b7 d4       	rcall	.+2414   	; 0x1200 <__divsf3>
     892:	4b 01       	movw	r8, r22
     894:	5c 01       	movw	r10, r24
// Functii de lucru intermediare si functii de calcul pentru valorile dorite
     896:	c7 01       	movw	r24, r14
     898:	b6 01       	movw	r22, r12
     89a:	4b d5       	rcall	.+2710   	; 0x1332 <__floatunsisf>
     89c:	20 e0       	ldi	r18, 0x00	; 0
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	48 ec       	ldi	r20, 0xC8	; 200
     8a2:	52 e4       	ldi	r21, 0x42	; 66
     8a4:	ad d4       	rcall	.+2394   	; 0x1200 <__divsf3>
     8a6:	6b 01       	movw	r12, r22
     8a8:	7c 01       	movw	r14, r24
     8aa:	20 e0       	ldi	r18, 0x00	; 0

// Timer cu incrementare la fiecare 1ms
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	a9 01       	movw	r20, r18
     8b0:	c5 01       	movw	r24, r10
     8b2:	b4 01       	movw	r22, r8
     8b4:	a1 d4       	rcall	.+2370   	; 0x11f8 <__cmpsf2>
     8b6:	88 23       	and	r24, r24
     8b8:	09 f4       	brne	.+2      	; 0x8bc <calculateSpO2+0x188>
     8ba:	6e c0       	rjmp	.+220    	; 0x998 <calculateSpO2+0x264>
     8bc:	20 e0       	ldi	r18, 0x00	; 0
     8be:	30 e0       	ldi	r19, 0x00	; 0
     8c0:	a9 01       	movw	r20, r18
     8c2:	c7 01       	movw	r24, r14
     8c4:	b6 01       	movw	r22, r12
     8c6:	98 d4       	rcall	.+2352   	; 0x11f8 <__cmpsf2>
     8c8:	88 23       	and	r24, r24
     8ca:	09 f4       	brne	.+2      	; 0x8ce <calculateSpO2+0x19a>
     8cc:	65 c0       	rjmp	.+202    	; 0x998 <calculateSpO2+0x264>
     8ce:	20 e0       	ldi	r18, 0x00	; 0
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	a9 01       	movw	r20, r18
     8d4:	69 81       	ldd	r22, Y+1	; 0x01
     8d6:	7a 81       	ldd	r23, Y+2	; 0x02
     8d8:	8b 81       	ldd	r24, Y+3	; 0x03
     8da:	9c 81       	ldd	r25, Y+4	; 0x04
     8dc:	8d d4       	rcall	.+2330   	; 0x11f8 <__cmpsf2>
     8de:	88 23       	and	r24, r24
     8e0:	09 f4       	brne	.+2      	; 0x8e4 <calculateSpO2+0x1b0>
     8e2:	5a c0       	rjmp	.+180    	; 0x998 <calculateSpO2+0x264>
     8e4:	a7 01       	movw	r20, r14
// Prescaler folosit: 64 -> 16MHz/64 = 250kHz, 250kHz/250 = 1ms perioada
     8e6:	96 01       	movw	r18, r12
     8e8:	c3 01       	movw	r24, r6
     8ea:	b2 01       	movw	r22, r4
     8ec:	89 d4       	rcall	.+2322   	; 0x1200 <__divsf3>
     8ee:	6b 01       	movw	r12, r22
     8f0:	7c 01       	movw	r14, r24
     8f2:	a5 01       	movw	r20, r10
// Registri: TCCR1B (mod CTC), OCR1A (perioada), TIMSK1 (intrerupere)
     8f4:	94 01       	movw	r18, r8
     8f6:	69 81       	ldd	r22, Y+1	; 0x01
     8f8:	7a 81       	ldd	r23, Y+2	; 0x02
     8fa:	8b 81       	ldd	r24, Y+3	; 0x03
     8fc:	9c 81       	ldd	r25, Y+4	; 0x04
     8fe:	80 d4       	rcall	.+2304   	; 0x1200 <__divsf3>
     900:	4b 01       	movw	r8, r22
     902:	5c 01       	movw	r10, r24
     904:	20 e0       	ldi	r18, 0x00	; 0
void timer_init(void) {
	TCCR1B = (1 << WGM12) | (1 << CS11) | (1 << CS10);
     906:	30 e0       	ldi	r19, 0x00	; 0
     908:	a9 01       	movw	r20, r18
     90a:	76 d4       	rcall	.+2284   	; 0x11f8 <__cmpsf2>
     90c:	88 23       	and	r24, r24
     90e:	09 f4       	brne	.+2      	; 0x912 <calculateSpO2+0x1de>
     910:	43 c0       	rjmp	.+134    	; 0x998 <calculateSpO2+0x264>
	OCR1A = 249;
     912:	a5 01       	movw	r20, r10
     914:	94 01       	movw	r18, r8
     916:	c7 01       	movw	r24, r14
     918:	b6 01       	movw	r22, r12
     91a:	72 d4       	rcall	.+2276   	; 0x1200 <__divsf3>
	TIMSK1 = (1 << OCIE1A);
     91c:	20 e0       	ldi	r18, 0x00	; 0
     91e:	30 e0       	ldi	r19, 0x00	; 0
     920:	48 e8       	ldi	r20, 0x88	; 136
     922:	51 e4       	ldi	r21, 0x41	; 65
     924:	bc d5       	rcall	.+2936   	; 0x149e <__mulsf3>
     926:	9b 01       	movw	r18, r22
     928:	ac 01       	movw	r20, r24
     92a:	60 e0       	ldi	r22, 0x00	; 0
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 ed       	ldi	r24, 0xD0	; 208
     930:	92 e4       	ldi	r25, 0x42	; 66
     932:	fd d3       	rcall	.+2042   	; 0x112e <__subsf3>
     934:	60 93 a2 02 	sts	0x02A2, r22	; 0x8002a2 <SpO2>
     938:	70 93 a3 02 	sts	0x02A3, r23	; 0x8002a3 <SpO2+0x1>
     93c:	80 93 a4 02 	sts	0x02A4, r24	; 0x8002a4 <SpO2+0x2>
     940:	90 93 a5 02 	sts	0x02A5, r25	; 0x8002a5 <SpO2+0x3>
     944:	20 e0       	ldi	r18, 0x00	; 0
	sei();
}
     946:	30 e0       	ldi	r19, 0x00	; 0
     948:	48 ec       	ldi	r20, 0xC8	; 200
     94a:	52 e4       	ldi	r21, 0x42	; 66
     94c:	a4 d5       	rcall	.+2888   	; 0x1496 <__gesf2>
     94e:	18 16       	cp	r1, r24
     950:	64 f4       	brge	.+24     	; 0x96a <calculateSpO2+0x236>
     952:	80 e0       	ldi	r24, 0x00	; 0
     954:	90 e0       	ldi	r25, 0x00	; 0
     956:	a8 ec       	ldi	r26, 0xC8	; 200
     958:	b2 e4       	ldi	r27, 0x42	; 66
     95a:	80 93 a2 02 	sts	0x02A2, r24	; 0x8002a2 <SpO2>
     95e:	90 93 a3 02 	sts	0x02A3, r25	; 0x8002a3 <SpO2+0x1>
     962:	a0 93 a4 02 	sts	0x02A4, r26	; 0x8002a4 <SpO2+0x2>
     966:	b0 93 a5 02 	sts	0x02A5, r27	; 0x8002a5 <SpO2+0x3>
     96a:	60 91 a2 02 	lds	r22, 0x02A2	; 0x8002a2 <SpO2>

     96e:	70 91 a3 02 	lds	r23, 0x02A3	; 0x8002a3 <SpO2+0x1>
     972:	80 91 a4 02 	lds	r24, 0x02A4	; 0x8002a4 <SpO2+0x2>
     976:	90 91 a5 02 	lds	r25, 0x02A5	; 0x8002a5 <SpO2+0x3>
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	4c e8       	ldi	r20, 0x8C	; 140
     980:	52 e4       	ldi	r21, 0x42	; 66
     982:	3a d4       	rcall	.+2164   	; 0x11f8 <__cmpsf2>
     984:	88 23       	and	r24, r24
     986:	44 f4       	brge	.+16     	; 0x998 <calculateSpO2+0x264>
     988:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <SpO2>
     98c:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <SpO2+0x1>
     990:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <SpO2+0x2>
     994:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <SpO2+0x3>
     998:	2c 96       	adiw	r28, 0x0c	; 12
     99a:	0f b6       	in	r0, 0x3f	; 63
// millis - returneaza numarul de milisecunde de la pornire
// Returnare: valoarea millisCounter (numara la fiecare intrerupere a timerului)
unsigned long millis(void) {
     99c:	f8 94       	cli
     99e:	de bf       	out	0x3e, r29	; 62
     9a0:	0f be       	out	0x3f, r0	; 63
     9a2:	cd bf       	out	0x3d, r28	; 61
     9a4:	df 91       	pop	r29
     9a6:	cf 91       	pop	r28
     9a8:	1f 91       	pop	r17
     9aa:	0f 91       	pop	r16
     9ac:	ff 90       	pop	r15
     9ae:	ef 90       	pop	r14
     9b0:	df 90       	pop	r13
     9b2:	cf 90       	pop	r12
     9b4:	bf 90       	pop	r11
     9b6:	af 90       	pop	r10
     9b8:	9f 90       	pop	r9
     9ba:	8f 90       	pop	r8
     9bc:	7f 90       	pop	r7
     9be:	6f 90       	pop	r6
     9c0:	5f 90       	pop	r5
     9c2:	4f 90       	pop	r4
     9c4:	08 95       	ret

000009c6 <resetStats>:
     9c6:	10 92 c7 02 	sts	0x02C7, r1	; 0x8002c7 <beatsPerMinute>
	return millisCounter;
}

// ISR(TIMER1_COMPA_vect) - rutina de intrerupere a timerului
// Se executa la fiecare 1ms si incrementeaza millisCounter
     9ca:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <beatsPerMinute+0x1>
     9ce:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <beatsPerMinute+0x2>
     9d2:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <beatsPerMinute+0x3>
// Aceasta functie este apelata automat de microcontroler
     9d6:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <beatAvg+0x1>
     9da:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <beatAvg>
ISR(TIMER1_COMPA_vect) {
     9de:	10 92 c4 02 	sts	0x02C4, r1	; 0x8002c4 <beatCount+0x1>
     9e2:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <beatCount>
	millisCounter++;
     9e6:	10 92 bf 02 	sts	0x02BF, r1	; 0x8002bf <lastBeatTime>
     9ea:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <lastBeatTime+0x1>
     9ee:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <lastBeatTime+0x2>
     9f2:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <lastBeatTime+0x3>
}
     9f6:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <rateSpot>

     9fa:	10 92 a2 02 	sts	0x02A2, r1	; 0x8002a2 <SpO2>
     9fe:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <SpO2+0x1>
     a02:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <SpO2+0x2>
     a06:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <SpO2+0x3>
// Calcul BPM: beatsPerMinute = 60000ms / intervalul dintre batai in ms
     a0a:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <bufferIndex+0x1>
     a0e:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <bufferIndex>

     a12:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <bufferReady>
// calculateSpO2 - calculeaza saturatia de oxigen (SpO2) din bufferele red si infrarosu
// Foloseste bufferele irBuffer si redBuffer care contin SPO2_BUFFER_SIZE mostre
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	06 c0       	rjmp	.+12     	; 0xa26 <resetStats+0x60>
// Algoritm: calculeaza AC/DC ratio pentru fiecare LED si determina SpO2
     a1a:	e8 2f       	mov	r30, r24
     a1c:	f0 e0       	ldi	r31, 0x00	; 0
     a1e:	e4 53       	subi	r30, 0x34	; 52
     a20:	fd 4f       	sbci	r31, 0xFD	; 253
     a22:	10 82       	st	Z, r1
}

// Calcul BPM: beatsPerMinute = 60000ms / intervalul dintre batai in ms

// calculateSpO2 - calculeaza saturatia de oxigen (SpO2) din bufferele red si infrarosu
// Foloseste bufferele irBuffer si redBuffer care contin SPO2_BUFFER_SIZE mostre
     a24:	8f 5f       	subi	r24, 0xFF	; 255
     a26:	84 30       	cpi	r24, 0x04	; 4
     a28:	c0 f3       	brcs	.-16     	; 0xa1a <resetStats+0x54>
     a2a:	20 e0       	ldi	r18, 0x00	; 0
     a2c:	30 e0       	ldi	r19, 0x00	; 0
     a2e:	15 c0       	rjmp	.+42     	; 0xa5a <resetStats+0x94>
// Algoritm: calculeaza AC/DC ratio pentru fiecare LED si determina SpO2
// Rezultat stocat in variabila globala SpO2
void calculateSpO2(void) {
    uint32_t irMax = 0, irMin = 999999;
     a30:	c9 01       	movw	r24, r18
     a32:	88 0f       	add	r24, r24
     a34:	99 1f       	adc	r25, r25
     a36:	88 0f       	add	r24, r24
     a38:	99 1f       	adc	r25, r25
     a3a:	fc 01       	movw	r30, r24
     a3c:	ec 51       	subi	r30, 0x1C	; 28
     a3e:	fd 4f       	sbci	r31, 0xFD	; 253
     a40:	10 82       	st	Z, r1
     a42:	11 82       	std	Z+1, r1	; 0x01
     a44:	12 82       	std	Z+2, r1	; 0x02
     a46:	13 82       	std	Z+3, r1	; 0x03
    uint32_t redMax = 0, redMin = 999999;
     a48:	fc 01       	movw	r30, r24
     a4a:	ec 58       	subi	r30, 0x8C	; 140
     a4c:	fb 4f       	sbci	r31, 0xFB	; 251
     a4e:	10 82       	st	Z, r1
     a50:	11 82       	std	Z+1, r1	; 0x01
     a52:	12 82       	std	Z+2, r1	; 0x02
     a54:	13 82       	std	Z+3, r1	; 0x03

// calculateSpO2 - calculeaza saturatia de oxigen (SpO2) din bufferele red si infrarosu
// Foloseste bufferele irBuffer si redBuffer care contin SPO2_BUFFER_SIZE mostre
// Algoritm: calculeaza AC/DC ratio pentru fiecare LED si determina SpO2
// Rezultat stocat in variabila globala SpO2
void calculateSpO2(void) {
     a56:	2f 5f       	subi	r18, 0xFF	; 255
     a58:	3f 4f       	sbci	r19, 0xFF	; 255
     a5a:	24 36       	cpi	r18, 0x64	; 100
     a5c:	31 05       	cpc	r19, r1
     a5e:	44 f3       	brlt	.-48     	; 0xa30 <resetStats+0x6a>
     a60:	80 e0       	ldi	r24, 0x00	; 0
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	0c c0       	rjmp	.+24     	; 0xa7e <resetStats+0xb8>
    uint32_t irMax = 0, irMin = 999999;
    uint32_t redMax = 0, redMin = 999999;
    unsigned long irSum = 0, redSum = 0;
    
    // Gaseste valori max, min si suma pentru ambele LED-uri
     a66:	fc 01       	movw	r30, r24
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	ee 0f       	add	r30, r30
     a6e:	ff 1f       	adc	r31, r31
     a70:	e0 53       	subi	r30, 0x30	; 48
     a72:	fd 4f       	sbci	r31, 0xFD	; 253
     a74:	10 82       	st	Z, r1
     a76:	11 82       	std	Z+1, r1	; 0x01
     a78:	12 82       	std	Z+2, r1	; 0x02
     a7a:	13 82       	std	Z+3, r1	; 0x03
// Rezultat stocat in variabila globala SpO2
void calculateSpO2(void) {
    uint32_t irMax = 0, irMin = 999999;
    uint32_t redMax = 0, redMin = 999999;
    unsigned long irSum = 0, redSum = 0;
    
     a7c:	01 96       	adiw	r24, 0x01	; 1
     a7e:	85 30       	cpi	r24, 0x05	; 5
     a80:	91 05       	cpc	r25, r1
     a82:	8c f3       	brlt	.-30     	; 0xa66 <resetStats+0xa0>
    // Gaseste valori max, min si suma pentru ambele LED-uri
    for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
        if (irBuffer[i] > irMax) irMax = irBuffer[i];
     a84:	08 95       	ret

00000a86 <MAX30102_Start>:
        if (irBuffer[i] < irMin) irMin = irBuffer[i];
        irSum += irBuffer[i];
        
        if (redBuffer[i] > redMax) redMax = redBuffer[i];
        if (redBuffer[i] < redMin) redMin = redBuffer[i];
     a86:	cf 93       	push	r28
     a88:	df 93       	push	r29
     a8a:	cd b7       	in	r28, 0x3d	; 61
     a8c:	de b7       	in	r29, 0x3e	; 62
     a8e:	ee 97       	sbiw	r28, 0x3e	; 62
     a90:	0f b6       	in	r0, 0x3f	; 63
     a92:	f8 94       	cli
     a94:	de bf       	out	0x3e, r29	; 62
     a96:	0f be       	out	0x3f, r0	; 63
     a98:	cd bf       	out	0x3d, r28	; 61
        redSum += redBuffer[i];
     a9a:	61 dd       	rcall	.-1342   	; 0x55e <max30102_check>
    }
     a9c:	00 e2       	ldi	r16, 0x20	; 32
     a9e:	23 e0       	ldi	r18, 0x03	; 3
     aa0:	44 e0       	ldi	r20, 0x04	; 4
     aa2:	60 e4       	ldi	r22, 0x40	; 64
     aa4:	88 e2       	ldi	r24, 0x28	; 40
     aa6:	84 dd       	rcall	.-1272   	; 0x5b0 <max30102_setup>
    
     aa8:	6f e1       	ldi	r22, 0x1F	; 31
     aaa:	8c e0       	ldi	r24, 0x0C	; 12
     aac:	4b dc       	rcall	.-1898   	; 0x344 <max30102_write_reg>
    // Calculeaza componente AC si DC
     aae:	68 e2       	ldi	r22, 0x28	; 40
     ab0:	8d e0       	ldi	r24, 0x0D	; 13
     ab2:	48 dc       	rcall	.-1904   	; 0x344 <max30102_write_reg>
    float irAC = (float)(irMax - irMin);
    float redAC = (float)(redMax - redMin);
     ab4:	0e dc       	rcall	.-2020   	; 0x2d2 <LCD_Clear>
     ab6:	60 e0       	ldi	r22, 0x00	; 0
    float irDC = (float)irSum / (float)SPO2_BUFFER_SIZE;
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	14 dc       	rcall	.-2008   	; 0x2e4 <LCD_SetCursor>
     abc:	82 e5       	ldi	r24, 0x52	; 82
    float redDC = (float)redSum / (float)SPO2_BUFFER_SIZE;
     abe:	92 e0       	ldi	r25, 0x02	; 2
     ac0:	fc db       	rcall	.-2056   	; 0x2ba <LCD_WriteString>
     ac2:	60 e0       	ldi	r22, 0x00	; 0
    
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	0e dc       	rcall	.-2020   	; 0x2e4 <LCD_SetCursor>
     ac8:	83 e6       	ldi	r24, 0x63	; 99
     aca:	92 e0       	ldi	r25, 0x02	; 2
    // Calculeaza SpO2 din ratios
     acc:	f6 db       	rcall	.-2068   	; 0x2ba <LCD_WriteString>
     ace:	2f ef       	ldi	r18, 0xFF	; 255
     ad0:	47 ea       	ldi	r20, 0xA7	; 167
     ad2:	81 e6       	ldi	r24, 0x61	; 97
     ad4:	21 50       	subi	r18, 0x01	; 1
     ad6:	40 40       	sbci	r20, 0x00	; 0
     ad8:	80 40       	sbci	r24, 0x00	; 0
     ada:	e1 f7       	brne	.-8      	; 0xad4 <MAX30102_Start+0x4e>
     adc:	00 c0       	rjmp	.+0      	; 0xade <MAX30102_Start+0x58>
     ade:	00 00       	nop
     ae0:	e0 e3       	ldi	r30, 0x30	; 48
     ae2:	f2 e0       	ldi	r31, 0x02	; 2
     ae4:	07 c0       	rjmp	.+14     	; 0xaf4 <MAX30102_Start+0x6e>
     ae6:	31 96       	adiw	r30, 0x01	; 1
     ae8:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
     aec:	95 ff       	sbrs	r25, 5
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     aee:	fc cf       	rjmp	.-8      	; 0xae8 <MAX30102_Start+0x62>
     af0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     af4:	80 81       	ld	r24, Z
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     af6:	81 11       	cpse	r24, r1
     af8:	f6 cf       	rjmp	.-20     	; 0xae6 <MAX30102_Start+0x60>
     afa:	65 df       	rcall	.-310    	; 0x9c6 <resetStats>
    if (irDC != 0 && redDC != 0 && irAC != 0) {
        float redRatio = redAC / redDC;
        float irRatio = irAC / irDC;
        
     afc:	82 dd       	rcall	.-1276   	; 0x602 <max30102_get_read_ptr>
     afe:	18 2f       	mov	r17, r24
        if (irRatio != 0) {
            float ratio = redRatio / irRatio;
            SpO2 = 104.0 - 17.0 * ratio;
     b00:	83 dd       	rcall	.-1274   	; 0x608 <max30102_get_write_ptr>
     b02:	18 13       	cpse	r17, r24
     b04:	07 c0       	rjmp	.+14     	; 0xb14 <MAX30102_Start+0x8e>
            
     b06:	8f e9       	ldi	r24, 0x9F	; 159
     b08:	9f e0       	ldi	r25, 0x0F	; 15
            if (SpO2 > 100) SpO2 = 100;
            if (SpO2 < 70) SpO2 = 0;
     b0a:	01 97       	sbiw	r24, 0x01	; 1
     b0c:	f1 f7       	brne	.-4      	; 0xb0a <MAX30102_Start+0x84>
     b0e:	00 c0       	rjmp	.+0      	; 0xb10 <MAX30102_Start+0x8a>
     b10:	00 00       	nop
     b12:	f4 cf       	rjmp	.-24     	; 0xafc <MAX30102_Start+0x76>
     b14:	be 01       	movw	r22, r28
     b16:	69 5c       	subi	r22, 0xC9	; 201
        }
    }
     b18:	7f 4f       	sbci	r23, 0xFF	; 255
}

// resetStats - reseteaza toti buferii si variabilele de calcul
// Goleste: rates[], irBuffer[], redBuffer[], irAvgBuffer[]
     b1a:	ce 01       	movw	r24, r28
     b1c:	cb 96       	adiw	r24, 0x3b	; 59
     b1e:	77 dd       	rcall	.-1298   	; 0x60e <max30102_read_sample>
     b20:	4f a9       	ldd	r20, Y+55	; 0x37
     b22:	58 ad       	ldd	r21, Y+56	; 0x38
     b24:	69 ad       	ldd	r22, Y+57	; 0x39
     b26:	7a ad       	ldd	r23, Y+58	; 0x3a
// Reseteaza: beatsPerMinute, beatAvg, beatCount, SpO2, etc.
     b28:	40 93 bb 02 	sts	0x02BB, r20	; 0x8002bb <irValue>
     b2c:	50 93 bc 02 	sts	0x02BC, r21	; 0x8002bc <irValue+0x1>
     b30:	60 93 bd 02 	sts	0x02BD, r22	; 0x8002bd <irValue+0x2>
     b34:	70 93 be 02 	sts	0x02BE, r23	; 0x8002be <irValue+0x3>
     b38:	40 35       	cpi	r20, 0x50	; 80
     b3a:	93 ec       	ldi	r25, 0xC3	; 195
     b3c:	59 07       	cpc	r21, r25
void resetStats(void) {
    beatsPerMinute = 0;
    beatAvg = 0;
     b3e:	61 05       	cpc	r22, r1
     b40:	71 05       	cpc	r23, r1
     b42:	5c f4       	brge	.+22     	; 0xb5a <MAX30102_Start+0xd4>
     b44:	40 df       	rcall	.-384    	; 0x9c6 <resetStats>
     b46:	2f ef       	ldi	r18, 0xFF	; 255
     b48:	49 e6       	ldi	r20, 0x69	; 105
    beatCount = 0;
     b4a:	88 e1       	ldi	r24, 0x18	; 24
     b4c:	21 50       	subi	r18, 0x01	; 1
     b4e:	40 40       	sbci	r20, 0x00	; 0
     b50:	80 40       	sbci	r24, 0x00	; 0
     b52:	e1 f7       	brne	.-8      	; 0xb4c <MAX30102_Start+0xc6>
     b54:	00 c0       	rjmp	.+0      	; 0xb56 <MAX30102_Start+0xd0>
     b56:	00 00       	nop
     b58:	d1 cf       	rjmp	.-94     	; 0xafc <MAX30102_Start+0x76>
     b5a:	80 91 ad 02 	lds	r24, 0x02AD	; 0x8002ad <avgIndex>
     b5e:	90 91 ae 02 	lds	r25, 0x02AE	; 0x8002ae <avgIndex+0x1>
    lastBeatTime = 0;
    rateSpot = 0;
    SpO2 = 0;
    bufferIndex = 0;
    bufferReady = 0;
     b62:	fc 01       	movw	r30, r24
     b64:	ee 0f       	add	r30, r30
     b66:	ff 1f       	adc	r31, r31
     b68:	ee 0f       	add	r30, r30
     b6a:	ff 1f       	adc	r31, r31
     b6c:	e0 53       	subi	r30, 0x30	; 48
     b6e:	fd 4f       	sbci	r31, 0xFD	; 253
     b70:	40 83       	st	Z, r20
     b72:	51 83       	std	Z+1, r21	; 0x01
     b74:	62 83       	std	Z+2, r22	; 0x02
     b76:	73 83       	std	Z+3, r23	; 0x03
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	65 e0       	ldi	r22, 0x05	; 5
     b7c:	70 e0       	ldi	r23, 0x00	; 0
    
     b7e:	f2 d4       	rcall	.+2532   	; 0x1564 <__divmodhi4>
     b80:	90 93 ae 02 	sts	0x02AE, r25	; 0x8002ae <avgIndex+0x1>
     b84:	80 93 ad 02 	sts	0x02AD, r24	; 0x8002ad <avgIndex>
     b88:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <irSmooth>
     b8c:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <irSmooth+0x1>
    for (uint8_t x = 0; x < RATE_SIZE; x++) {
        rates[x] = 0;
     b90:	10 92 ab 02 	sts	0x02AB, r1	; 0x8002ab <irSmooth+0x2>
     b94:	10 92 ac 02 	sts	0x02AC, r1	; 0x8002ac <irSmooth+0x3>
     b98:	80 e0       	ldi	r24, 0x00	; 0
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	20 c0       	rjmp	.+64     	; 0xbde <MAX30102_Start+0x158>
     b9e:	fc 01       	movw	r30, r24
    }
     ba0:	ee 0f       	add	r30, r30
     ba2:	ff 1f       	adc	r31, r31
     ba4:	ee 0f       	add	r30, r30
    for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
     ba6:	ff 1f       	adc	r31, r31
     ba8:	e0 53       	subi	r30, 0x30	; 48
     baa:	fd 4f       	sbci	r31, 0xFD	; 253
     bac:	40 81       	ld	r20, Z
     bae:	51 81       	ldd	r21, Z+1	; 0x01
     bb0:	62 81       	ldd	r22, Z+2	; 0x02
     bb2:	73 81       	ldd	r23, Z+3	; 0x03
     bb4:	00 91 a9 02 	lds	r16, 0x02A9	; 0x8002a9 <irSmooth>
     bb8:	10 91 aa 02 	lds	r17, 0x02AA	; 0x8002aa <irSmooth+0x1>
     bbc:	20 91 ab 02 	lds	r18, 0x02AB	; 0x8002ab <irSmooth+0x2>
     bc0:	30 91 ac 02 	lds	r19, 0x02AC	; 0x8002ac <irSmooth+0x3>
     bc4:	40 0f       	add	r20, r16
     bc6:	51 1f       	adc	r21, r17
     bc8:	62 1f       	adc	r22, r18
     bca:	73 1f       	adc	r23, r19
     bcc:	40 93 a9 02 	sts	0x02A9, r20	; 0x8002a9 <irSmooth>
     bd0:	50 93 aa 02 	sts	0x02AA, r21	; 0x8002aa <irSmooth+0x1>
     bd4:	60 93 ab 02 	sts	0x02AB, r22	; 0x8002ab <irSmooth+0x2>
     bd8:	70 93 ac 02 	sts	0x02AC, r23	; 0x8002ac <irSmooth+0x3>
     bdc:	01 96       	adiw	r24, 0x01	; 1
     bde:	85 30       	cpi	r24, 0x05	; 5
     be0:	91 05       	cpc	r25, r1
     be2:	ec f2       	brlt	.-70     	; 0xb9e <MAX30102_Start+0x118>
    bufferIndex = 0;
    bufferReady = 0;
    
    for (uint8_t x = 0; x < RATE_SIZE; x++) {
        rates[x] = 0;
    }
     be4:	60 91 a9 02 	lds	r22, 0x02A9	; 0x8002a9 <irSmooth>
     be8:	70 91 aa 02 	lds	r23, 0x02AA	; 0x8002aa <irSmooth+0x1>
    for (int i = 0; i < SPO2_BUFFER_SIZE; i++) {
        irBuffer[i] = 0;
        redBuffer[i] = 0;
     bec:	80 91 ab 02 	lds	r24, 0x02AB	; 0x8002ab <irSmooth+0x2>
     bf0:	90 91 ac 02 	lds	r25, 0x02AC	; 0x8002ac <irSmooth+0x3>
     bf4:	25 e0       	ldi	r18, 0x05	; 5
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e0       	ldi	r20, 0x00	; 0
     bfa:	50 e0       	ldi	r21, 0x00	; 0
     bfc:	e8 d4       	rcall	.+2512   	; 0x15ce <__divmodsi4>
     bfe:	69 01       	movw	r12, r18
     c00:	7a 01       	movw	r14, r20
     c02:	20 93 a9 02 	sts	0x02A9, r18	; 0x8002a9 <irSmooth>
     c06:	30 93 aa 02 	sts	0x02AA, r19	; 0x8002aa <irSmooth+0x1>
     c0a:	40 93 ab 02 	sts	0x02AB, r20	; 0x8002ab <irSmooth+0x2>
     c0e:	50 93 ac 02 	sts	0x02AC, r21	; 0x8002ac <irSmooth+0x3>
     c12:	80 91 b7 02 	lds	r24, 0x02B7	; 0x8002b7 <lastIR>
     c16:	90 91 b8 02 	lds	r25, 0x02B8	; 0x8002b8 <lastIR+0x1>
    }
    for (int i = 0; i < AVG_SIZE; i++) {
     c1a:	a0 91 b9 02 	lds	r26, 0x02B9	; 0x8002b9 <lastIR+0x2>
     c1e:	b0 91 ba 02 	lds	r27, 0x02BA	; 0x8002ba <lastIR+0x3>
     c22:	ba 01       	movw	r22, r20
     c24:	a9 01       	movw	r20, r18
     c26:	48 1b       	sub	r20, r24
     c28:	59 0b       	sbc	r21, r25
     c2a:	6a 0b       	sbc	r22, r26
     c2c:	7b 0b       	sbc	r23, r27
     c2e:	40 93 b3 02 	sts	0x02B3, r20	; 0x8002b3 <derivative>
     c32:	50 93 b4 02 	sts	0x02B4, r21	; 0x8002b4 <derivative+0x1>
     c36:	60 93 b5 02 	sts	0x02B5, r22	; 0x8002b5 <derivative+0x2>
     c3a:	70 93 b6 02 	sts	0x02B6, r23	; 0x8002b6 <derivative+0x3>
     c3e:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <lastDerivative>
     c42:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <lastDerivative+0x1>
        irAvgBuffer[i] = 0;
    }
     c46:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <lastDerivative+0x2>
     c4a:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <lastDerivative+0x3>
     c4e:	45 97       	sbiw	r24, 0x15	; 21
     c50:	a1 05       	cpc	r26, r1
     c52:	b1 05       	cpc	r27, r1
     c54:	0c f4       	brge	.+2      	; 0xc58 <MAX30102_Start+0x1d2>
     c56:	a3 c0       	rjmp	.+326    	; 0xd9e <MAX30102_Start+0x318>
     c58:	4c 3e       	cpi	r20, 0xEC	; 236
     c5a:	5f 4f       	sbci	r21, 0xFF	; 255
     c5c:	6f 4f       	sbci	r22, 0xFF	; 255
     c5e:	7f 4f       	sbci	r23, 0xFF	; 255
     c60:	0c f0       	brlt	.+2      	; 0xc64 <MAX30102_Start+0x1de>
     c62:	9d c0       	rjmp	.+314    	; 0xd9e <MAX30102_Start+0x318>
     c64:	21 ea       	ldi	r18, 0xA1	; 161
     c66:	c2 16       	cp	r12, r18
     c68:	26 e8       	ldi	r18, 0x86	; 134
     c6a:	d2 06       	cpc	r13, r18
     c6c:	21 e0       	ldi	r18, 0x01	; 1
     c6e:	e2 06       	cpc	r14, r18
     c70:	f1 04       	cpc	r15, r1
     c72:	0c f4       	brge	.+2      	; 0xc76 <MAX30102_Start+0x1f0>
     c74:	94 c0       	rjmp	.+296    	; 0xd9e <MAX30102_Start+0x318>
     c76:	30 dd       	rcall	.-1440   	; 0x6d8 <millis>
     c78:	4b 01       	movw	r8, r22
     c7a:	5c 01       	movw	r10, r24
}
     c7c:	00 91 bf 02 	lds	r16, 0x02BF	; 0x8002bf <lastBeatTime>
     c80:	10 91 c0 02 	lds	r17, 0x02C0	; 0x8002c0 <lastBeatTime+0x1>

     c84:	20 91 c1 02 	lds	r18, 0x02C1	; 0x8002c1 <lastBeatTime+0x2>
     c88:	30 91 c2 02 	lds	r19, 0x02C2	; 0x8002c2 <lastBeatTime+0x3>
     c8c:	60 1b       	sub	r22, r16
     c8e:	71 0b       	sbc	r23, r17
     c90:	82 0b       	sbc	r24, r18
     c92:	93 0b       	sbc	r25, r19
     c94:	6b 01       	movw	r12, r22
     c96:	7c 01       	movw	r14, r24
     c98:	4f e5       	ldi	r20, 0x5F	; 95
     c9a:	c4 1a       	sub	r12, r20
//================================================================================================================================================
// Functia principala - MAX30102_Start
     c9c:	41 e0       	ldi	r20, 0x01	; 1
     c9e:	d4 0a       	sbc	r13, r20
     ca0:	e1 08       	sbc	r14, r1
     ca2:	f1 08       	sbc	r15, r1
     ca4:	45 e6       	ldi	r20, 0x65	; 101
     ca6:	c4 16       	cp	r12, r20
     ca8:	48 e0       	ldi	r20, 0x08	; 8
     caa:	d4 06       	cpc	r13, r20
     cac:	e1 04       	cpc	r14, r1
     cae:	f1 04       	cpc	r15, r1
     cb0:	08 f0       	brcs	.+2      	; 0xcb4 <MAX30102_Start+0x22e>
     cb2:	6d c0       	rjmp	.+218    	; 0xd8e <MAX30102_Start+0x308>
     cb4:	01 2b       	or	r16, r17
     cb6:	02 2b       	or	r16, r18
     cb8:	03 2b       	or	r16, r19
     cba:	09 f4       	brne	.+2      	; 0xcbe <MAX30102_Start+0x238>
     cbc:	68 c0       	rjmp	.+208    	; 0xd8e <MAX30102_Start+0x308>
     cbe:	39 d3       	rcall	.+1650   	; 0x1332 <__floatunsisf>
     cc0:	9b 01       	movw	r18, r22
// Aceasta functie porneste senzorul, verifica conexiunea si citeste date intr-o bucla infinita
// Afiseaza BPM si SpO2 pe LCD si trimite datele si prin UART
     cc2:	ac 01       	movw	r20, r24
     cc4:	60 e0       	ldi	r22, 0x00	; 0
     cc6:	70 e6       	ldi	r23, 0x60	; 96
     cc8:	8a e6       	ldi	r24, 0x6A	; 106
     cca:	97 e4       	ldi	r25, 0x47	; 71
     ccc:	99 d2       	rcall	.+1330   	; 0x1200 <__divsf3>
     cce:	6b 01       	movw	r12, r22
     cd0:	7c 01       	movw	r14, r24
     cd2:	60 93 c7 02 	sts	0x02C7, r22	; 0x8002c7 <beatsPerMinute>
     cd6:	70 93 c8 02 	sts	0x02C8, r23	; 0x8002c8 <beatsPerMinute+0x1>
     cda:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <beatsPerMinute+0x2>
     cde:	90 93 ca 02 	sts	0x02CA, r25	; 0x8002ca <beatsPerMinute+0x3>
     ce2:	20 e0       	ldi	r18, 0x00	; 0
     ce4:	30 e0       	ldi	r19, 0x00	; 0

void MAX30102_Start(void){
     ce6:	40 e2       	ldi	r20, 0x20	; 32
     ce8:	52 e4       	ldi	r21, 0x42	; 66
     cea:	d5 d3       	rcall	.+1962   	; 0x1496 <__gesf2>
     cec:	88 23       	and	r24, r24
     cee:	0c f4       	brge	.+2      	; 0xcf2 <MAX30102_Start+0x26c>
     cf0:	4e c0       	rjmp	.+156    	; 0xd8e <MAX30102_Start+0x308>
     cf2:	20 e0       	ldi	r18, 0x00	; 0
     cf4:	30 e0       	ldi	r19, 0x00	; 0
     cf6:	44 e3       	ldi	r20, 0x34	; 52
     cf8:	53 e4       	ldi	r21, 0x43	; 67
     cfa:	c7 01       	movw	r24, r14
     cfc:	b6 01       	movw	r22, r12
     cfe:	7c d2       	rcall	.+1272   	; 0x11f8 <__cmpsf2>
     d00:	18 16       	cp	r1, r24
     d02:	0c f4       	brge	.+2      	; 0xd06 <MAX30102_Start+0x280>
     d04:	44 c0       	rjmp	.+136    	; 0xd8e <MAX30102_Start+0x308>
     d06:	00 91 cb 02 	lds	r16, 0x02CB	; 0x8002cb <rateSpot>
     d0a:	77 24       	eor	r7, r7
    // Verifica daca senzorul este conectat
     d0c:	73 94       	inc	r7
     d0e:	70 0e       	add	r7, r16
     d10:	10 e0       	ldi	r17, 0x00	; 0
     d12:	c7 01       	movw	r24, r14
     d14:	b6 01       	movw	r22, r12
     d16:	e1 d2       	rcall	.+1474   	; 0x12da <__fixunssfsi>
     d18:	f8 01       	movw	r30, r16
     d1a:	e4 53       	subi	r30, 0x34	; 52
     d1c:	fd 4f       	sbci	r31, 0xFD	; 253
     d1e:	60 83       	st	Z, r22
     d20:	87 2d       	mov	r24, r7
     d22:	83 70       	andi	r24, 0x03	; 3
     d24:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <rateSpot>
    max30102_check();
     d28:	10 92 c6 02 	sts	0x02C6, r1	; 0x8002c6 <beatAvg+0x1>
     d2c:	10 92 c5 02 	sts	0x02C5, r1	; 0x8002c5 <beatAvg>
    
    // Configureaza parametrii senzorului:
     d30:	80 e0       	ldi	r24, 0x00	; 0
     d32:	60 e0       	ldi	r22, 0x00	; 0
     d34:	70 e0       	ldi	r23, 0x00	; 0
     d36:	14 c0       	rjmp	.+40     	; 0xd60 <MAX30102_Start+0x2da>
    // - ledBrightness=40 (puterea LED-ului)
    // - sampleAvg=SAMPLEAVG_4 (medieaza 4 esantioane)
     d38:	e8 2f       	mov	r30, r24
void MAX30102_Start(void){
    // Verifica daca senzorul este conectat
    max30102_check();
    
    // Configureaza parametrii senzorului:
    // - ledBrightness=40 (puterea LED-ului)
     d3a:	f0 e0       	ldi	r31, 0x00	; 0
     d3c:	e4 53       	subi	r30, 0x34	; 52
    // - sampleAvg=SAMPLEAVG_4 (medieaza 4 esantioane)
     d3e:	fd 4f       	sbci	r31, 0xFD	; 253
    // - sampleRate=SAMPLERATE_100 (100 Hz = 100 esantioane/secunda)
     d40:	90 81       	ld	r25, Z
     d42:	99 23       	and	r25, r25
     d44:	61 f0       	breq	.+24     	; 0xd5e <MAX30102_Start+0x2d8>
     d46:	20 91 c5 02 	lds	r18, 0x02C5	; 0x8002c5 <beatAvg>
     d4a:	30 91 c6 02 	lds	r19, 0x02C6	; 0x8002c6 <beatAvg+0x1>
    // - pulseWidth=PULSEWIDTH_411 (411 microsecunde)
     d4e:	29 0f       	add	r18, r25
     d50:	31 1d       	adc	r19, r1
     d52:	30 93 c6 02 	sts	0x02C6, r19	; 0x8002c6 <beatAvg+0x1>
     d56:	20 93 c5 02 	sts	0x02C5, r18	; 0x8002c5 <beatAvg>
     d5a:	6f 5f       	subi	r22, 0xFF	; 255
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	8f 5f       	subi	r24, 0xFF	; 255
    // - adcRange=ADCRANGE_4096 (interval ADC 4096)
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	50 f3       	brcs	.-44     	; 0xd38 <MAX30102_Start+0x2b2>
    // Verifica daca senzorul este conectat
    max30102_check();
    
    // Configureaza parametrii senzorului:
    // - ledBrightness=40 (puterea LED-ului)
    // - sampleAvg=SAMPLEAVG_4 (medieaza 4 esantioane)
     d64:	16 16       	cp	r1, r22
     d66:	17 06       	cpc	r1, r23
     d68:	4c f4       	brge	.+18     	; 0xd7c <MAX30102_Start+0x2f6>
    // - sampleRate=SAMPLERATE_100 (100 Hz = 100 esantioane/secunda)
    // - pulseWidth=PULSEWIDTH_411 (411 microsecunde)
    // - adcRange=ADCRANGE_4096 (interval ADC 4096)
    max30102_setup(40, SAMPLEAVG_4, SAMPLERATE_100, PULSEWIDTH_411, ADCRANGE_4096);
    
    // Setare luminozitate LED-uri
     d6a:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <beatAvg>
     d6e:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <beatAvg+0x1>
    max30102_write_reg(MAX30102_LED1_PULSEAMP, 0x1F);
     d72:	f8 d3       	rcall	.+2032   	; 0x1564 <__divmodhi4>
     d74:	70 93 c6 02 	sts	0x02C6, r23	; 0x8002c6 <beatAvg+0x1>
     d78:	60 93 c5 02 	sts	0x02C5, r22	; 0x8002c5 <beatAvg>
     d7c:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <beatCount>
     d80:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <beatCount+0x1>
    max30102_write_reg(MAX30102_LED2_PULSEAMP, 40);
    
    // Initializeaza LCD si afiseaza mesajele initiale
     d84:	01 96       	adiw	r24, 0x01	; 1
     d86:	90 93 c4 02 	sts	0x02C4, r25	; 0x8002c4 <beatCount+0x1>
     d8a:	80 93 c3 02 	sts	0x02C3, r24	; 0x8002c3 <beatCount>
     d8e:	80 92 bf 02 	sts	0x02BF, r8	; 0x8002bf <lastBeatTime>
     d92:	90 92 c0 02 	sts	0x02C0, r9	; 0x8002c0 <lastBeatTime+0x1>
    LCD_Clear();
    LCD_SetCursor(0, 0);
    LCD_WriteString("BPM: --         ");
    LCD_SetCursor(1, 0);
     d96:	a0 92 c1 02 	sts	0x02C1, r10	; 0x8002c1 <lastBeatTime+0x2>
     d9a:	b0 92 c2 02 	sts	0x02C2, r11	; 0x8002c2 <lastBeatTime+0x3>
     d9e:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <derivative>
     da2:	90 91 b4 02 	lds	r25, 0x02B4	; 0x8002b4 <derivative+0x1>
    LCD_WriteString("SpO2: --        ");
    
    _delay_ms(2000);
     da6:	a0 91 b5 02 	lds	r26, 0x02B5	; 0x8002b5 <derivative+0x2>
     daa:	b0 91 b6 02 	lds	r27, 0x02B6	; 0x8002b6 <derivative+0x3>
     dae:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <lastDerivative>
     db2:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <lastDerivative+0x1>
     db6:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <lastDerivative+0x2>
     dba:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <lastDerivative+0x3>
     dbe:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <irSmooth>
     dc2:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <irSmooth+0x1>
    uart_puts("Astept deget\r\n");
     dc6:	a0 91 ab 02 	lds	r26, 0x02AB	; 0x8002ab <irSmooth+0x2>
     dca:	b0 91 ac 02 	lds	r27, 0x02AC	; 0x8002ac <irSmooth+0x3>
     dce:	80 93 b7 02 	sts	0x02B7, r24	; 0x8002b7 <lastIR>
     dd2:	90 93 b8 02 	sts	0x02B8, r25	; 0x8002b8 <lastIR+0x1>
     dd6:	a0 93 b9 02 	sts	0x02B9, r26	; 0x8002b9 <lastIR+0x2>
     dda:	b0 93 ba 02 	sts	0x02BA, r27	; 0x8002ba <lastIR+0x3>
     dde:	80 91 a7 02 	lds	r24, 0x02A7	; 0x8002a7 <bufferIndex>
     de2:	90 91 a8 02 	lds	r25, 0x02A8	; 0x8002a8 <bufferIndex+0x1>
    resetStats();
    
     de6:	9c 01       	movw	r18, r24
     de8:	22 0f       	add	r18, r18
     dea:	33 1f       	adc	r19, r19
     dec:	22 0f       	add	r18, r18
     dee:	33 1f       	adc	r19, r19
     df0:	f9 01       	movw	r30, r18
     df2:	ec 51       	subi	r30, 0x1C	; 28
     df4:	fd 4f       	sbci	r31, 0xFD	; 253
     df6:	4f a9       	ldd	r20, Y+55	; 0x37
     df8:	58 ad       	ldd	r21, Y+56	; 0x38
     dfa:	69 ad       	ldd	r22, Y+57	; 0x39
     dfc:	7a ad       	ldd	r23, Y+58	; 0x3a
     dfe:	40 83       	st	Z, r20
     e00:	51 83       	std	Z+1, r21	; 0x01
     e02:	62 83       	std	Z+2, r22	; 0x02
     e04:	73 83       	std	Z+3, r23	; 0x03
     e06:	f9 01       	movw	r30, r18
     e08:	ec 58       	subi	r30, 0x8C	; 140
     e0a:	fb 4f       	sbci	r31, 0xFB	; 251
     e0c:	4b ad       	ldd	r20, Y+59	; 0x3b
    // Bucla infinita de citire si procesare
     e0e:	5c ad       	ldd	r21, Y+60	; 0x3c
     e10:	6d ad       	ldd	r22, Y+61	; 0x3d
     e12:	7e ad       	ldd	r23, Y+62	; 0x3e
     e14:	40 83       	st	Z, r20
     e16:	51 83       	std	Z+1, r21	; 0x01
     e18:	62 83       	std	Z+2, r22	; 0x02
     e1a:	73 83       	std	Z+3, r23	; 0x03
     e1c:	01 96       	adiw	r24, 0x01	; 1
     e1e:	90 93 a8 02 	sts	0x02A8, r25	; 0x8002a8 <bufferIndex+0x1>
     e22:	80 93 a7 02 	sts	0x02A7, r24	; 0x8002a7 <bufferIndex>
    while(1) {
     e26:	84 36       	cpi	r24, 0x64	; 100
     e28:	91 05       	cpc	r25, r1
     e2a:	3c f0       	brlt	.+14     	; 0xe3a <MAX30102_Start+0x3b4>
        // Verifica daca sunt date noi in FIFO
        uint8_t readPtr = max30102_get_read_ptr();
     e2c:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <bufferIndex+0x1>
     e30:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <bufferIndex>
        uint8_t writePtr = max30102_get_write_ptr();
     e34:	81 e0       	ldi	r24, 0x01	; 1
     e36:	80 93 a6 02 	sts	0x02A6, r24	; 0x8002a6 <bufferReady>
        
     e3a:	80 91 a6 02 	lds	r24, 0x02A6	; 0x8002a6 <bufferReady>
     e3e:	88 23       	and	r24, r24
        // Daca pointerii sunt egali, FIFO-ul este gol, asteapta
        if (readPtr == writePtr) {
            _delay_ms(1);
     e40:	39 f0       	breq	.+14     	; 0xe50 <MAX30102_Start+0x3ca>
     e42:	80 91 c3 02 	lds	r24, 0x02C3	; 0x8002c3 <beatCount>
     e46:	90 91 c4 02 	lds	r25, 0x02C4	; 0x8002c4 <beatCount+0x1>
     e4a:	03 97       	sbiw	r24, 0x03	; 3
     e4c:	0c f0       	brlt	.+2      	; 0xe50 <MAX30102_Start+0x3ca>
     e4e:	72 dc       	rcall	.-1820   	; 0x734 <calculateSpO2>
     e50:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <beatAvg>
            continue;
     e54:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <beatAvg+0x1>
        // Citeste o pereche de mostre (red si infrarosu)
        uint32_t redValue, irValue32;
        max30102_read_sample(&redValue, &irValue32);
        irValue = (long)irValue32;
        long redVal = (long)redValue;
        
     e58:	18 16       	cp	r1, r24
     e5a:	19 06       	cpc	r1, r25
     e5c:	94 f4       	brge	.+36     	; 0xe82 <MAX30102_Start+0x3fc>
     e5e:	9f 93       	push	r25
     e60:	8f 93       	push	r24
     e62:	84 e7       	ldi	r24, 0x74	; 116
        // Daca semnalul IR este prea mic, probabil degetul nu e pe senzor
     e64:	92 e0       	ldi	r25, 0x02	; 2
     e66:	9f 93       	push	r25
     e68:	8f 93       	push	r24
     e6a:	ce 01       	movw	r24, r28
     e6c:	86 96       	adiw	r24, 0x26	; 38
     e6e:	9f 93       	push	r25
     e70:	8f 93       	push	r24
     e72:	19 d4       	rcall	.+2098   	; 0x16a6 <sprintf>
     e74:	0f 90       	pop	r0
     e76:	0f 90       	pop	r0
     e78:	0f 90       	pop	r0
     e7a:	0f 90       	pop	r0
     e7c:	0f 90       	pop	r0
     e7e:	0f 90       	pop	r0
     e80:	09 c0       	rjmp	.+18     	; 0xe94 <MAX30102_Start+0x40e>
     e82:	81 e1       	ldi	r24, 0x11	; 17
     e84:	e2 e5       	ldi	r30, 0x52	; 82
        if (irValue < 50000) {
            resetStats();
     e86:	f2 e0       	ldi	r31, 0x02	; 2
     e88:	de 01       	movw	r26, r28
     e8a:	96 96       	adiw	r26, 0x26	; 38
     e8c:	01 90       	ld	r0, Z+
     e8e:	0d 92       	st	X+, r0
     e90:	8a 95       	dec	r24
     e92:	e1 f7       	brne	.-8      	; 0xe8c <MAX30102_Start+0x406>
     e94:	60 e0       	ldi	r22, 0x00	; 0
            _delay_ms(500);
            continue;
     e96:	80 e0       	ldi	r24, 0x00	; 0
     e98:	25 da       	rcall	.-2998   	; 0x2e4 <LCD_SetCursor>
     e9a:	ce 01       	movw	r24, r28
     e9c:	86 96       	adiw	r24, 0x26	; 38
        }
     e9e:	0d da       	rcall	.-3046   	; 0x2ba <LCD_WriteString>
     ea0:	c0 90 a2 02 	lds	r12, 0x02A2	; 0x8002a2 <SpO2>
        
        // Adauga valoarea IR la buffer pentru mediare
        irAvgBuffer[avgIndex] = irValue;
     ea4:	d0 90 a3 02 	lds	r13, 0x02A3	; 0x8002a3 <SpO2+0x1>
     ea8:	e0 90 a4 02 	lds	r14, 0x02A4	; 0x8002a4 <SpO2+0x2>
     eac:	f0 90 a5 02 	lds	r15, 0x02A5	; 0x8002a5 <SpO2+0x3>
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	4c e8       	ldi	r20, 0x8C	; 140
     eb6:	52 e4       	ldi	r21, 0x42	; 66
     eb8:	c7 01       	movw	r24, r14
     eba:	b6 01       	movw	r22, r12
     ebc:	ec d2       	rcall	.+1496   	; 0x1496 <__gesf2>
     ebe:	88 23       	and	r24, r24
     ec0:	8c f1       	brlt	.+98     	; 0xf24 <MAX30102_Start+0x49e>
     ec2:	20 e0       	ldi	r18, 0x00	; 0
     ec4:	30 e0       	ldi	r19, 0x00	; 0
     ec6:	48 ec       	ldi	r20, 0xC8	; 200
     ec8:	52 e4       	ldi	r21, 0x42	; 66
     eca:	c7 01       	movw	r24, r14
     ecc:	b6 01       	movw	r22, r12
     ece:	94 d1       	rcall	.+808    	; 0x11f8 <__cmpsf2>
     ed0:	18 16       	cp	r1, r24
        avgIndex = (avgIndex + 1) % AVG_SIZE;
     ed2:	44 f1       	brlt	.+80     	; 0xf24 <MAX30102_Start+0x49e>
     ed4:	c7 01       	movw	r24, r14
     ed6:	b6 01       	movw	r22, r12
     ed8:	fb d1       	rcall	.+1014   	; 0x12d0 <__fixsfsi>
     eda:	4b 01       	movw	r8, r22
        
     edc:	5c 01       	movw	r10, r24
     ede:	07 2e       	mov	r0, r23
     ee0:	00 0c       	add	r0, r0
     ee2:	88 0b       	sbc	r24, r24
     ee4:	99 0b       	sbc	r25, r25
     ee6:	27 d2       	rcall	.+1102   	; 0x1336 <__floatsisf>
     ee8:	9b 01       	movw	r18, r22
     eea:	ac 01       	movw	r20, r24
     eec:	c7 01       	movw	r24, r14
     eee:	b6 01       	movw	r22, r12
     ef0:	1e d1       	rcall	.+572    	; 0x112e <__subsf3>
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e2       	ldi	r20, 0x20	; 32
     ef8:	51 e4       	ldi	r21, 0x41	; 65
     efa:	d1 d2       	rcall	.+1442   	; 0x149e <__mulsf3>
     efc:	e9 d1       	rcall	.+978    	; 0x12d0 <__fixsfsi>
     efe:	7f 93       	push	r23
     f00:	6f 93       	push	r22
        // Calculeaza media valorilor IR
     f02:	9f 92       	push	r9
     f04:	8f 92       	push	r8
     f06:	85 e8       	ldi	r24, 0x85	; 133
     f08:	92 e0       	ldi	r25, 0x02	; 2
     f0a:	9f 93       	push	r25
     f0c:	8f 93       	push	r24
     f0e:	ce 01       	movw	r24, r28
     f10:	45 96       	adiw	r24, 0x15	; 21
     f12:	9f 93       	push	r25
     f14:	8f 93       	push	r24
     f16:	c7 d3       	rcall	.+1934   	; 0x16a6 <sprintf>
     f18:	0f b6       	in	r0, 0x3f	; 63
     f1a:	f8 94       	cli
     f1c:	de bf       	out	0x3e, r29	; 62
            _delay_ms(500);
            continue;
        }
        
        // Adauga valoarea IR la buffer pentru mediare
        irAvgBuffer[avgIndex] = irValue;
     f1e:	0f be       	out	0x3f, r0	; 63
     f20:	cd bf       	out	0x3d, r28	; 61
     f22:	09 c0       	rjmp	.+18     	; 0xf36 <MAX30102_Start+0x4b0>
     f24:	81 e1       	ldi	r24, 0x11	; 17
     f26:	e3 e6       	ldi	r30, 0x63	; 99
     f28:	f2 e0       	ldi	r31, 0x02	; 2
        avgIndex = (avgIndex + 1) % AVG_SIZE;
        
        // Calculeaza media valorilor IR
        irSmooth = 0;
        for (int i = 0; i < AVG_SIZE; i++) {
     f2a:	de 01       	movw	r26, r28
     f2c:	55 96       	adiw	r26, 0x15	; 21
     f2e:	01 90       	ld	r0, Z+
     f30:	0d 92       	st	X+, r0
     f32:	8a 95       	dec	r24
     f34:	e1 f7       	brne	.-8      	; 0xf2e <MAX30102_Start+0x4a8>
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	81 e0       	ldi	r24, 0x01	; 1
     f3a:	d4 d9       	rcall	.-3160   	; 0x2e4 <LCD_SetCursor>
            irSmooth += irAvgBuffer[i];
        }
     f3c:	ce 01       	movw	r24, r28
     f3e:	45 96       	adiw	r24, 0x15	; 21
     f40:	bc d9       	rcall	.-3208   	; 0x2ba <LCD_WriteString>
     f42:	ef e3       	ldi	r30, 0x3F	; 63
        irSmooth /= AVG_SIZE;
     f44:	f2 e0       	ldi	r31, 0x02	; 2
     f46:	07 c0       	rjmp	.+14     	; 0xf56 <MAX30102_Start+0x4d0>
     f48:	31 96       	adiw	r30, 0x01	; 1
     f4a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     f4e:	85 ff       	sbrs	r24, 5
     f50:	fc cf       	rjmp	.-8      	; 0xf4a <MAX30102_Start+0x4c4>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     f52:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     f56:	90 81       	ld	r25, Z
     f58:	91 11       	cpse	r25, r1
	UDR0 = c;
     f5a:	f6 cf       	rjmp	.-20     	; 0xf48 <MAX30102_Start+0x4c2>
     f5c:	80 91 c5 02 	lds	r24, 0x02C5	; 0x8002c5 <beatAvg>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     f60:	90 91 c6 02 	lds	r25, 0x02C6	; 0x8002c6 <beatAvg+0x1>
        
        // Calculeaza derivata pentru detactia unui puls/inima
        derivative = irSmooth - lastIR;

     f64:	18 16       	cp	r1, r24
     f66:	19 06       	cpc	r1, r25
     f68:	8c f5       	brge	.+98     	; 0xfcc <MAX30102_Start+0x546>
     f6a:	09 2e       	mov	r0, r25
     f6c:	00 0c       	add	r0, r0
     f6e:	aa 0b       	sbc	r26, r26
     f70:	bb 0b       	sbc	r27, r27
        // Detectare puls: derivata trece de la pozitiva la negativa
     f72:	bf 93       	push	r27
     f74:	af 93       	push	r26
     f76:	9f 93       	push	r25
     f78:	8f 93       	push	r24
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
     f7a:	8a e9       	ldi	r24, 0x9A	; 154
     f7c:	92 e0       	ldi	r25, 0x02	; 2
     f7e:	9f 93       	push	r25
     f80:	8f 93       	push	r24
     f82:	1f 92       	push	r1
     f84:	84 e1       	ldi	r24, 0x14	; 20
     f86:	8f 93       	push	r24
     f88:	8e 01       	movw	r16, r28
     f8a:	0f 5f       	subi	r16, 0xFF	; 255
     f8c:	1f 4f       	sbci	r17, 0xFF	; 255
     f8e:	1f 93       	push	r17
     f90:	0f 93       	push	r16
     f92:	4d d3       	rcall	.+1690   	; 0x162e <snprintf>
     f94:	0f b6       	in	r0, 0x3f	; 63
     f96:	f8 94       	cli
     f98:	de bf       	out	0x3e, r29	; 62
     f9a:	0f be       	out	0x3f, r0	; 63
     f9c:	cd bf       	out	0x3d, r28	; 61
     f9e:	f8 01       	movw	r30, r16
     fa0:	07 c0       	rjmp	.+14     	; 0xfb0 <MAX30102_Start+0x52a>
     fa2:	31 96       	adiw	r30, 0x01	; 1
     fa4:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     fa8:	85 ff       	sbrs	r24, 5
     faa:	fc cf       	rjmp	.-8      	; 0xfa4 <MAX30102_Start+0x51e>
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
     fac:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     fb0:	90 81       	ld	r25, Z
     fb2:	91 11       	cpse	r25, r1
     fb4:	f6 cf       	rjmp	.-20     	; 0xfa2 <MAX30102_Start+0x51c>
	UDR0 = c;
     fb6:	e7 e4       	ldi	r30, 0x47	; 71
     fb8:	f2 e0       	ldi	r31, 0x02	; 2
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     fba:	15 c0       	rjmp	.+42     	; 0xfe6 <MAX30102_Start+0x560>
     fbc:	31 96       	adiw	r30, 0x01	; 1
     fbe:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
     fc2:	85 ff       	sbrs	r24, 5
     fc4:	fc cf       	rjmp	.-8      	; 0xfbe <MAX30102_Start+0x538>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     fc6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <MAX30102_Start+0x54a>
     fcc:	e4 e4       	ldi	r30, 0x44	; 68
	UDR0 = c;
     fce:	f2 e0       	ldi	r31, 0x02	; 2
     fd0:	90 81       	ld	r25, Z
     fd2:	91 11       	cpse	r25, r1
     fd4:	f3 cf       	rjmp	.-26     	; 0xfbc <MAX30102_Start+0x536>
     fd6:	ef cf       	rjmp	.-34     	; 0xfb6 <MAX30102_Start+0x530>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     fd8:	31 96       	adiw	r30, 0x01	; 1
     fda:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
		uart_putc(*str++);
     fde:	85 ff       	sbrs	r24, 5
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
     fe0:	fc cf       	rjmp	.-8      	; 0xfda <MAX30102_Start+0x554>
     fe2:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UDR0 = c;
     fe6:	90 81       	ld	r25, Z
     fe8:	91 11       	cpse	r25, r1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
     fea:	f6 cf       	rjmp	.-20     	; 0xfd8 <MAX30102_Start+0x552>
     fec:	c0 90 a2 02 	lds	r12, 0x02A2	; 0x8002a2 <SpO2>
        if (lastDerivative > 20 && derivative < -20 && irSmooth > 100000) {
            unsigned long currentTime = millis();
            unsigned long timeDiff = currentTime - lastBeatTime;
            
            // Verifica daca intervalul dintre batai e rezonabil (350-2500ms)
     ff0:	d0 90 a3 02 	lds	r13, 0x02A3	; 0x8002a3 <SpO2+0x1>
     ff4:	e0 90 a4 02 	lds	r14, 0x02A4	; 0x8002a4 <SpO2+0x2>
     ff8:	f0 90 a5 02 	lds	r15, 0x02A5	; 0x8002a5 <SpO2+0x3>
     ffc:	20 e0       	ldi	r18, 0x00	; 0
     ffe:	30 e0       	ldi	r19, 0x00	; 0
    1000:	4c e8       	ldi	r20, 0x8C	; 140
    1002:	52 e4       	ldi	r21, 0x42	; 66
    1004:	c7 01       	movw	r24, r14
    1006:	b6 01       	movw	r22, r12
    1008:	46 d2       	rcall	.+1164   	; 0x1496 <__gesf2>
    100a:	88 23       	and	r24, r24
    100c:	0c f4       	brge	.+2      	; 0x1010 <__EEPROM_REGION_LENGTH__+0x10>
    100e:	7b c0       	rjmp	.+246    	; 0x1106 <__EEPROM_REGION_LENGTH__+0x106>
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	48 ec       	ldi	r20, 0xC8	; 200
    1016:	52 e4       	ldi	r21, 0x42	; 66
    1018:	c7 01       	movw	r24, r14
    101a:	b6 01       	movw	r22, r12
    101c:	ed d0       	rcall	.+474    	; 0x11f8 <__cmpsf2>
    101e:	18 16       	cp	r1, r24
    1020:	0c f4       	brge	.+2      	; 0x1024 <__EEPROM_REGION_LENGTH__+0x24>
            if (timeDiff > 350 && timeDiff < 2500 && lastBeatTime > 0) {
    1022:	74 c0       	rjmp	.+232    	; 0x110c <__EEPROM_REGION_LENGTH__+0x10c>
    1024:	c7 01       	movw	r24, r14
    1026:	b6 01       	movw	r22, r12
    1028:	53 d1       	rcall	.+678    	; 0x12d0 <__fixsfsi>
                // Calculeaza BPM: 60000ms / intervalul in ms
    102a:	4b 01       	movw	r8, r22
    102c:	77 0f       	add	r23, r23
    102e:	aa 08       	sbc	r10, r10
    1030:	bb 08       	sbc	r11, r11
    1032:	c5 01       	movw	r24, r10
    1034:	b4 01       	movw	r22, r8
    1036:	7f d1       	rcall	.+766    	; 0x1336 <__floatsisf>
    1038:	9b 01       	movw	r18, r22
    103a:	ac 01       	movw	r20, r24
    103c:	c7 01       	movw	r24, r14
    103e:	b6 01       	movw	r22, r12
    1040:	76 d0       	rcall	.+236    	; 0x112e <__subsf3>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	40 e2       	ldi	r20, 0x20	; 32
    1048:	51 e4       	ldi	r21, 0x41	; 65
    104a:	29 d2       	rcall	.+1106   	; 0x149e <__mulsf3>
    104c:	41 d1       	rcall	.+642    	; 0x12d0 <__fixsfsi>
    104e:	6b 01       	movw	r12, r22
    1050:	7c 01       	movw	r14, r24
    1052:	bf 92       	push	r11
    1054:	af 92       	push	r10
    1056:	9f 92       	push	r9
    1058:	8f 92       	push	r8
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
    105a:	8a e9       	ldi	r24, 0x9A	; 154
    105c:	92 e0       	ldi	r25, 0x02	; 2
    105e:	9f 93       	push	r25
    1060:	8f 93       	push	r24
    1062:	1f 92       	push	r1
    1064:	84 e1       	ldi	r24, 0x14	; 20
    1066:	8f 93       	push	r24
    1068:	8e 01       	movw	r16, r28
    106a:	0f 5f       	subi	r16, 0xFF	; 255
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	1f 93       	push	r17
    1070:	0f 93       	push	r16
    1072:	dd d2       	rcall	.+1466   	; 0x162e <snprintf>
    1074:	0f b6       	in	r0, 0x3f	; 63
    1076:	f8 94       	cli
    1078:	de bf       	out	0x3e, r29	; 62
    107a:	0f be       	out	0x3f, r0	; 63
    107c:	cd bf       	out	0x3d, r28	; 61
    107e:	f8 01       	movw	r30, r16
    1080:	07 c0       	rjmp	.+14     	; 0x1090 <__EEPROM_REGION_LENGTH__+0x90>
    1082:	31 96       	adiw	r30, 0x01	; 1
    1084:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    1088:	85 ff       	sbrs	r24, 5
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    108a:	fc cf       	rjmp	.-8      	; 0x1084 <__EEPROM_REGION_LENGTH__+0x84>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    108c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    1090:	90 81       	ld	r25, Z
    1092:	91 11       	cpse	r25, r1
	UDR0 = c;
    1094:	f6 cf       	rjmp	.-20     	; 0x1082 <__EEPROM_REGION_LENGTH__+0x82>
    1096:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    109a:	85 ff       	sbrs	r24, 5
    109c:	fc cf       	rjmp	.-8      	; 0x1096 <__EEPROM_REGION_LENGTH__+0x96>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    109e:	8e e2       	ldi	r24, 0x2E	; 46
    10a0:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
    10a4:	0d 2c       	mov	r0, r13
	UDR0 = c;
    10a6:	00 0c       	add	r0, r0
    10a8:	ee 08       	sbc	r14, r14
    10aa:	ff 08       	sbc	r15, r15
                beatsPerMinute = 60000.0 / (float)timeDiff;
                
                // Verifica daca BPM e in intervalul valid (40-180)
    10ac:	ff 92       	push	r15
    10ae:	ef 92       	push	r14
    10b0:	df 92       	push	r13
    10b2:	cf 92       	push	r12
	}
}

static inline void uart_putInt(int32_t val) {
	char buffer[20];
	snprintf(buffer, sizeof(buffer), "%ld", val);
    10b4:	8a e9       	ldi	r24, 0x9A	; 154
    10b6:	92 e0       	ldi	r25, 0x02	; 2
    10b8:	9f 93       	push	r25
    10ba:	8f 93       	push	r24
    10bc:	1f 92       	push	r1
    10be:	84 e1       	ldi	r24, 0x14	; 20
    10c0:	8f 93       	push	r24
    10c2:	8e 01       	movw	r16, r28
    10c4:	0f 5f       	subi	r16, 0xFF	; 255
    10c6:	1f 4f       	sbci	r17, 0xFF	; 255
    10c8:	1f 93       	push	r17
    10ca:	0f 93       	push	r16
    10cc:	b0 d2       	rcall	.+1376   	; 0x162e <snprintf>
    10ce:	0f b6       	in	r0, 0x3f	; 63
    10d0:	f8 94       	cli
    10d2:	de bf       	out	0x3e, r29	; 62
    10d4:	0f be       	out	0x3f, r0	; 63
    10d6:	cd bf       	out	0x3d, r28	; 61
    10d8:	f8 01       	movw	r30, r16
    10da:	07 c0       	rjmp	.+14     	; 0x10ea <__EEPROM_REGION_LENGTH__+0xea>
    10dc:	31 96       	adiw	r30, 0x01	; 1
    10de:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    10e2:	85 ff       	sbrs	r24, 5
    10e4:	fc cf       	rjmp	.-8      	; 0x10de <__EEPROM_REGION_LENGTH__+0xde>
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
		uart_putc(*str++);
    10e6:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    10ea:	90 81       	ld	r25, Z
    10ec:	91 11       	cpse	r25, r1
    10ee:	f6 cf       	rjmp	.-20     	; 0x10dc <__EEPROM_REGION_LENGTH__+0xdc>
	UDR0 = c;
    10f0:	ee e4       	ldi	r30, 0x4E	; 78
    10f2:	f2 e0       	ldi	r31, 0x02	; 2
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    10f4:	18 c0       	rjmp	.+48     	; 0x1126 <__EEPROM_REGION_LENGTH__+0x126>
    10f6:	31 96       	adiw	r30, 0x01	; 1
    10f8:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    10fc:	85 ff       	sbrs	r24, 5
    10fe:	fc cf       	rjmp	.-8      	; 0x10f8 <__EEPROM_REGION_LENGTH__+0xf8>
		uart_putc(*str++);
    1100:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1104:	05 c0       	rjmp	.+10     	; 0x1110 <__EEPROM_REGION_LENGTH__+0x110>
    1106:	e4 e4       	ldi	r30, 0x44	; 68
    1108:	f2 e0       	ldi	r31, 0x02	; 2
	UDR0 = c;
    110a:	02 c0       	rjmp	.+4      	; 0x1110 <__EEPROM_REGION_LENGTH__+0x110>
    110c:	e4 e4       	ldi	r30, 0x44	; 68
    110e:	f2 e0       	ldi	r31, 0x02	; 2
    1110:	90 81       	ld	r25, Z
    1112:	91 11       	cpse	r25, r1
    1114:	f0 cf       	rjmp	.-32     	; 0x10f6 <__EEPROM_REGION_LENGTH__+0xf6>
    1116:	ec cf       	rjmp	.-40     	; 0x10f0 <__EEPROM_REGION_LENGTH__+0xf0>
    1118:	31 96       	adiw	r30, 0x01	; 1
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    111a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    111e:	85 ff       	sbrs	r24, 5
    1120:	fc cf       	rjmp	.-8      	; 0x111a <__EEPROM_REGION_LENGTH__+0x11a>
		uart_putc(*str++);
    1122:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	UCSR0B = (1 << RXEN0) | (1 << TXEN0);
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00);
}

static inline void uart_putc(char c) {
	while (!(UCSR0A & (1 << UDRE0)));
    1126:	90 81       	ld	r25, Z
    1128:	91 11       	cpse	r25, r1
    112a:	f6 cf       	rjmp	.-20     	; 0x1118 <__EEPROM_REGION_LENGTH__+0x118>
	UDR0 = c;
    112c:	e7 cc       	rjmp	.-1586   	; 0xafc <MAX30102_Start+0x76>

0000112e <__subsf3>:
    112e:	50 58       	subi	r21, 0x80	; 128

00001130 <__addsf3>:
	while (!(UCSR0A & (1 << RXC0)));
	return UDR0;
}

static inline void uart_puts(const char *str) {
	while (*str) {
    1130:	bb 27       	eor	r27, r27
    1132:	aa 27       	eor	r26, r26
    1134:	0e d0       	rcall	.+28     	; 0x1152 <__addsf3x>
    1136:	75 c1       	rjmp	.+746    	; 0x1422 <__fp_round>
    1138:	66 d1       	rcall	.+716    	; 0x1406 <__fp_pscA>
    113a:	30 f0       	brcs	.+12     	; 0x1148 <__addsf3+0x18>
    113c:	6b d1       	rcall	.+726    	; 0x1414 <__fp_pscB>
    113e:	20 f0       	brcs	.+8      	; 0x1148 <__addsf3+0x18>
    1140:	31 f4       	brne	.+12     	; 0x114e <__addsf3+0x1e>
    1142:	9f 3f       	cpi	r25, 0xFF	; 255
    1144:	11 f4       	brne	.+4      	; 0x114a <__addsf3+0x1a>
    1146:	1e f4       	brtc	.+6      	; 0x114e <__addsf3+0x1e>
    1148:	5b c1       	rjmp	.+694    	; 0x1400 <__fp_nan>
    114a:	0e f4       	brtc	.+2      	; 0x114e <__addsf3+0x1e>
    114c:	e0 95       	com	r30
    114e:	e7 fb       	bst	r30, 7
    1150:	51 c1       	rjmp	.+674    	; 0x13f4 <__fp_inf>

00001152 <__addsf3x>:
    1152:	e9 2f       	mov	r30, r25
    1154:	77 d1       	rcall	.+750    	; 0x1444 <__fp_split3>
    1156:	80 f3       	brcs	.-32     	; 0x1138 <__addsf3+0x8>
    1158:	ba 17       	cp	r27, r26
    115a:	62 07       	cpc	r22, r18
    115c:	73 07       	cpc	r23, r19
    115e:	84 07       	cpc	r24, r20
    1160:	95 07       	cpc	r25, r21
    1162:	18 f0       	brcs	.+6      	; 0x116a <__addsf3x+0x18>
    1164:	71 f4       	brne	.+28     	; 0x1182 <__addsf3x+0x30>
    1166:	9e f5       	brtc	.+102    	; 0x11ce <__addsf3x+0x7c>
    1168:	8f c1       	rjmp	.+798    	; 0x1488 <__fp_zero>
    116a:	0e f4       	brtc	.+2      	; 0x116e <__addsf3x+0x1c>
    116c:	e0 95       	com	r30
    116e:	0b 2e       	mov	r0, r27
    1170:	ba 2f       	mov	r27, r26
    1172:	a0 2d       	mov	r26, r0
    1174:	0b 01       	movw	r0, r22
    1176:	b9 01       	movw	r22, r18
    1178:	90 01       	movw	r18, r0
    117a:	0c 01       	movw	r0, r24
    117c:	ca 01       	movw	r24, r20
    117e:	a0 01       	movw	r20, r0
    1180:	11 24       	eor	r1, r1
    1182:	ff 27       	eor	r31, r31
    1184:	59 1b       	sub	r21, r25
    1186:	99 f0       	breq	.+38     	; 0x11ae <__addsf3x+0x5c>
    1188:	59 3f       	cpi	r21, 0xF9	; 249
    118a:	50 f4       	brcc	.+20     	; 0x11a0 <__addsf3x+0x4e>
    118c:	50 3e       	cpi	r21, 0xE0	; 224
    118e:	68 f1       	brcs	.+90     	; 0x11ea <__addsf3x+0x98>
    1190:	1a 16       	cp	r1, r26
    1192:	f0 40       	sbci	r31, 0x00	; 0
    1194:	a2 2f       	mov	r26, r18
    1196:	23 2f       	mov	r18, r19
    1198:	34 2f       	mov	r19, r20
    119a:	44 27       	eor	r20, r20
    119c:	58 5f       	subi	r21, 0xF8	; 248
    119e:	f3 cf       	rjmp	.-26     	; 0x1186 <__addsf3x+0x34>
    11a0:	46 95       	lsr	r20
    11a2:	37 95       	ror	r19
    11a4:	27 95       	ror	r18
    11a6:	a7 95       	ror	r26
    11a8:	f0 40       	sbci	r31, 0x00	; 0
    11aa:	53 95       	inc	r21
    11ac:	c9 f7       	brne	.-14     	; 0x11a0 <__addsf3x+0x4e>
    11ae:	7e f4       	brtc	.+30     	; 0x11ce <__addsf3x+0x7c>
    11b0:	1f 16       	cp	r1, r31
    11b2:	ba 0b       	sbc	r27, r26
    11b4:	62 0b       	sbc	r22, r18
    11b6:	73 0b       	sbc	r23, r19
    11b8:	84 0b       	sbc	r24, r20
    11ba:	ba f0       	brmi	.+46     	; 0x11ea <__addsf3x+0x98>
    11bc:	91 50       	subi	r25, 0x01	; 1
    11be:	a1 f0       	breq	.+40     	; 0x11e8 <__addsf3x+0x96>
    11c0:	ff 0f       	add	r31, r31
    11c2:	bb 1f       	adc	r27, r27
    11c4:	66 1f       	adc	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	88 1f       	adc	r24, r24
    11ca:	c2 f7       	brpl	.-16     	; 0x11bc <__addsf3x+0x6a>
    11cc:	0e c0       	rjmp	.+28     	; 0x11ea <__addsf3x+0x98>
    11ce:	ba 0f       	add	r27, r26
    11d0:	62 1f       	adc	r22, r18
    11d2:	73 1f       	adc	r23, r19
    11d4:	84 1f       	adc	r24, r20
    11d6:	48 f4       	brcc	.+18     	; 0x11ea <__addsf3x+0x98>
    11d8:	87 95       	ror	r24
    11da:	77 95       	ror	r23
    11dc:	67 95       	ror	r22
    11de:	b7 95       	ror	r27
    11e0:	f7 95       	ror	r31
    11e2:	9e 3f       	cpi	r25, 0xFE	; 254
    11e4:	08 f0       	brcs	.+2      	; 0x11e8 <__addsf3x+0x96>
    11e6:	b3 cf       	rjmp	.-154    	; 0x114e <__addsf3+0x1e>
    11e8:	93 95       	inc	r25
    11ea:	88 0f       	add	r24, r24
    11ec:	08 f0       	brcs	.+2      	; 0x11f0 <__addsf3x+0x9e>
    11ee:	99 27       	eor	r25, r25
    11f0:	ee 0f       	add	r30, r30
    11f2:	97 95       	ror	r25
    11f4:	87 95       	ror	r24
    11f6:	08 95       	ret

000011f8 <__cmpsf2>:
    11f8:	d9 d0       	rcall	.+434    	; 0x13ac <__fp_cmp>
    11fa:	08 f4       	brcc	.+2      	; 0x11fe <__cmpsf2+0x6>
    11fc:	81 e0       	ldi	r24, 0x01	; 1
    11fe:	08 95       	ret

00001200 <__divsf3>:
    1200:	0c d0       	rcall	.+24     	; 0x121a <__divsf3x>
    1202:	0f c1       	rjmp	.+542    	; 0x1422 <__fp_round>
    1204:	07 d1       	rcall	.+526    	; 0x1414 <__fp_pscB>
    1206:	40 f0       	brcs	.+16     	; 0x1218 <__divsf3+0x18>
    1208:	fe d0       	rcall	.+508    	; 0x1406 <__fp_pscA>
    120a:	30 f0       	brcs	.+12     	; 0x1218 <__divsf3+0x18>
    120c:	21 f4       	brne	.+8      	; 0x1216 <__divsf3+0x16>
    120e:	5f 3f       	cpi	r21, 0xFF	; 255
    1210:	19 f0       	breq	.+6      	; 0x1218 <__divsf3+0x18>
    1212:	f0 c0       	rjmp	.+480    	; 0x13f4 <__fp_inf>
    1214:	51 11       	cpse	r21, r1
    1216:	39 c1       	rjmp	.+626    	; 0x148a <__fp_szero>
    1218:	f3 c0       	rjmp	.+486    	; 0x1400 <__fp_nan>

0000121a <__divsf3x>:
    121a:	14 d1       	rcall	.+552    	; 0x1444 <__fp_split3>
    121c:	98 f3       	brcs	.-26     	; 0x1204 <__divsf3+0x4>

0000121e <__divsf3_pse>:
    121e:	99 23       	and	r25, r25
    1220:	c9 f3       	breq	.-14     	; 0x1214 <__divsf3+0x14>
    1222:	55 23       	and	r21, r21
    1224:	b1 f3       	breq	.-20     	; 0x1212 <__divsf3+0x12>
    1226:	95 1b       	sub	r25, r21
    1228:	55 0b       	sbc	r21, r21
    122a:	bb 27       	eor	r27, r27
    122c:	aa 27       	eor	r26, r26
    122e:	62 17       	cp	r22, r18
    1230:	73 07       	cpc	r23, r19
    1232:	84 07       	cpc	r24, r20
    1234:	38 f0       	brcs	.+14     	; 0x1244 <__divsf3_pse+0x26>
    1236:	9f 5f       	subi	r25, 0xFF	; 255
    1238:	5f 4f       	sbci	r21, 0xFF	; 255
    123a:	22 0f       	add	r18, r18
    123c:	33 1f       	adc	r19, r19
    123e:	44 1f       	adc	r20, r20
    1240:	aa 1f       	adc	r26, r26
    1242:	a9 f3       	breq	.-22     	; 0x122e <__divsf3_pse+0x10>
    1244:	33 d0       	rcall	.+102    	; 0x12ac <__divsf3_pse+0x8e>
    1246:	0e 2e       	mov	r0, r30
    1248:	3a f0       	brmi	.+14     	; 0x1258 <__divsf3_pse+0x3a>
    124a:	e0 e8       	ldi	r30, 0x80	; 128
    124c:	30 d0       	rcall	.+96     	; 0x12ae <__divsf3_pse+0x90>
    124e:	91 50       	subi	r25, 0x01	; 1
    1250:	50 40       	sbci	r21, 0x00	; 0
    1252:	e6 95       	lsr	r30
    1254:	00 1c       	adc	r0, r0
    1256:	ca f7       	brpl	.-14     	; 0x124a <__divsf3_pse+0x2c>
    1258:	29 d0       	rcall	.+82     	; 0x12ac <__divsf3_pse+0x8e>
    125a:	fe 2f       	mov	r31, r30
    125c:	27 d0       	rcall	.+78     	; 0x12ac <__divsf3_pse+0x8e>
    125e:	66 0f       	add	r22, r22
    1260:	77 1f       	adc	r23, r23
    1262:	88 1f       	adc	r24, r24
    1264:	bb 1f       	adc	r27, r27
    1266:	26 17       	cp	r18, r22
    1268:	37 07       	cpc	r19, r23
    126a:	48 07       	cpc	r20, r24
    126c:	ab 07       	cpc	r26, r27
    126e:	b0 e8       	ldi	r27, 0x80	; 128
    1270:	09 f0       	breq	.+2      	; 0x1274 <__divsf3_pse+0x56>
    1272:	bb 0b       	sbc	r27, r27
    1274:	80 2d       	mov	r24, r0
    1276:	bf 01       	movw	r22, r30
    1278:	ff 27       	eor	r31, r31
    127a:	93 58       	subi	r25, 0x83	; 131
    127c:	5f 4f       	sbci	r21, 0xFF	; 255
    127e:	2a f0       	brmi	.+10     	; 0x128a <__divsf3_pse+0x6c>
    1280:	9e 3f       	cpi	r25, 0xFE	; 254
    1282:	51 05       	cpc	r21, r1
    1284:	68 f0       	brcs	.+26     	; 0x12a0 <__divsf3_pse+0x82>
    1286:	b6 c0       	rjmp	.+364    	; 0x13f4 <__fp_inf>
    1288:	00 c1       	rjmp	.+512    	; 0x148a <__fp_szero>
    128a:	5f 3f       	cpi	r21, 0xFF	; 255
    128c:	ec f3       	brlt	.-6      	; 0x1288 <__divsf3_pse+0x6a>
    128e:	98 3e       	cpi	r25, 0xE8	; 232
    1290:	dc f3       	brlt	.-10     	; 0x1288 <__divsf3_pse+0x6a>
    1292:	86 95       	lsr	r24
    1294:	77 95       	ror	r23
    1296:	67 95       	ror	r22
    1298:	b7 95       	ror	r27
    129a:	f7 95       	ror	r31
    129c:	9f 5f       	subi	r25, 0xFF	; 255
    129e:	c9 f7       	brne	.-14     	; 0x1292 <__divsf3_pse+0x74>
    12a0:	88 0f       	add	r24, r24
    12a2:	91 1d       	adc	r25, r1
    12a4:	96 95       	lsr	r25
    12a6:	87 95       	ror	r24
    12a8:	97 f9       	bld	r25, 7
    12aa:	08 95       	ret
    12ac:	e1 e0       	ldi	r30, 0x01	; 1
    12ae:	66 0f       	add	r22, r22
    12b0:	77 1f       	adc	r23, r23
    12b2:	88 1f       	adc	r24, r24
    12b4:	bb 1f       	adc	r27, r27
    12b6:	62 17       	cp	r22, r18
    12b8:	73 07       	cpc	r23, r19
    12ba:	84 07       	cpc	r24, r20
    12bc:	ba 07       	cpc	r27, r26
    12be:	20 f0       	brcs	.+8      	; 0x12c8 <__divsf3_pse+0xaa>
    12c0:	62 1b       	sub	r22, r18
    12c2:	73 0b       	sbc	r23, r19
    12c4:	84 0b       	sbc	r24, r20
    12c6:	ba 0b       	sbc	r27, r26
    12c8:	ee 1f       	adc	r30, r30
    12ca:	88 f7       	brcc	.-30     	; 0x12ae <__divsf3_pse+0x90>
    12cc:	e0 95       	com	r30
    12ce:	08 95       	ret

000012d0 <__fixsfsi>:
    12d0:	04 d0       	rcall	.+8      	; 0x12da <__fixunssfsi>
    12d2:	68 94       	set
    12d4:	b1 11       	cpse	r27, r1
    12d6:	d9 c0       	rjmp	.+434    	; 0x148a <__fp_szero>
    12d8:	08 95       	ret

000012da <__fixunssfsi>:
    12da:	bc d0       	rcall	.+376    	; 0x1454 <__fp_splitA>
    12dc:	88 f0       	brcs	.+34     	; 0x1300 <__fixunssfsi+0x26>
    12de:	9f 57       	subi	r25, 0x7F	; 127
    12e0:	90 f0       	brcs	.+36     	; 0x1306 <__fixunssfsi+0x2c>
    12e2:	b9 2f       	mov	r27, r25
    12e4:	99 27       	eor	r25, r25
    12e6:	b7 51       	subi	r27, 0x17	; 23
    12e8:	a0 f0       	brcs	.+40     	; 0x1312 <__fixunssfsi+0x38>
    12ea:	d1 f0       	breq	.+52     	; 0x1320 <__fixunssfsi+0x46>
    12ec:	66 0f       	add	r22, r22
    12ee:	77 1f       	adc	r23, r23
    12f0:	88 1f       	adc	r24, r24
    12f2:	99 1f       	adc	r25, r25
    12f4:	1a f0       	brmi	.+6      	; 0x12fc <__fixunssfsi+0x22>
    12f6:	ba 95       	dec	r27
    12f8:	c9 f7       	brne	.-14     	; 0x12ec <__fixunssfsi+0x12>
    12fa:	12 c0       	rjmp	.+36     	; 0x1320 <__fixunssfsi+0x46>
    12fc:	b1 30       	cpi	r27, 0x01	; 1
    12fe:	81 f0       	breq	.+32     	; 0x1320 <__fixunssfsi+0x46>
    1300:	c3 d0       	rcall	.+390    	; 0x1488 <__fp_zero>
    1302:	b1 e0       	ldi	r27, 0x01	; 1
    1304:	08 95       	ret
    1306:	c0 c0       	rjmp	.+384    	; 0x1488 <__fp_zero>
    1308:	67 2f       	mov	r22, r23
    130a:	78 2f       	mov	r23, r24
    130c:	88 27       	eor	r24, r24
    130e:	b8 5f       	subi	r27, 0xF8	; 248
    1310:	39 f0       	breq	.+14     	; 0x1320 <__fixunssfsi+0x46>
    1312:	b9 3f       	cpi	r27, 0xF9	; 249
    1314:	cc f3       	brlt	.-14     	; 0x1308 <__fixunssfsi+0x2e>
    1316:	86 95       	lsr	r24
    1318:	77 95       	ror	r23
    131a:	67 95       	ror	r22
    131c:	b3 95       	inc	r27
    131e:	d9 f7       	brne	.-10     	; 0x1316 <__fixunssfsi+0x3c>
    1320:	3e f4       	brtc	.+14     	; 0x1330 <__fixunssfsi+0x56>
    1322:	90 95       	com	r25
    1324:	80 95       	com	r24
    1326:	70 95       	com	r23
    1328:	61 95       	neg	r22
    132a:	7f 4f       	sbci	r23, 0xFF	; 255
    132c:	8f 4f       	sbci	r24, 0xFF	; 255
    132e:	9f 4f       	sbci	r25, 0xFF	; 255
    1330:	08 95       	ret

00001332 <__floatunsisf>:
    1332:	e8 94       	clt
    1334:	09 c0       	rjmp	.+18     	; 0x1348 <__floatsisf+0x12>

00001336 <__floatsisf>:
    1336:	97 fb       	bst	r25, 7
    1338:	3e f4       	brtc	.+14     	; 0x1348 <__floatsisf+0x12>
    133a:	90 95       	com	r25
    133c:	80 95       	com	r24
    133e:	70 95       	com	r23
    1340:	61 95       	neg	r22
    1342:	7f 4f       	sbci	r23, 0xFF	; 255
    1344:	8f 4f       	sbci	r24, 0xFF	; 255
    1346:	9f 4f       	sbci	r25, 0xFF	; 255
    1348:	99 23       	and	r25, r25
    134a:	a9 f0       	breq	.+42     	; 0x1376 <__floatsisf+0x40>
    134c:	f9 2f       	mov	r31, r25
    134e:	96 e9       	ldi	r25, 0x96	; 150
    1350:	bb 27       	eor	r27, r27
    1352:	93 95       	inc	r25
    1354:	f6 95       	lsr	r31
    1356:	87 95       	ror	r24
    1358:	77 95       	ror	r23
    135a:	67 95       	ror	r22
    135c:	b7 95       	ror	r27
    135e:	f1 11       	cpse	r31, r1
    1360:	f8 cf       	rjmp	.-16     	; 0x1352 <__floatsisf+0x1c>
    1362:	fa f4       	brpl	.+62     	; 0x13a2 <__floatsisf+0x6c>
    1364:	bb 0f       	add	r27, r27
    1366:	11 f4       	brne	.+4      	; 0x136c <__floatsisf+0x36>
    1368:	60 ff       	sbrs	r22, 0
    136a:	1b c0       	rjmp	.+54     	; 0x13a2 <__floatsisf+0x6c>
    136c:	6f 5f       	subi	r22, 0xFF	; 255
    136e:	7f 4f       	sbci	r23, 0xFF	; 255
    1370:	8f 4f       	sbci	r24, 0xFF	; 255
    1372:	9f 4f       	sbci	r25, 0xFF	; 255
    1374:	16 c0       	rjmp	.+44     	; 0x13a2 <__floatsisf+0x6c>
    1376:	88 23       	and	r24, r24
    1378:	11 f0       	breq	.+4      	; 0x137e <__floatsisf+0x48>
    137a:	96 e9       	ldi	r25, 0x96	; 150
    137c:	11 c0       	rjmp	.+34     	; 0x13a0 <__floatsisf+0x6a>
    137e:	77 23       	and	r23, r23
    1380:	21 f0       	breq	.+8      	; 0x138a <__floatsisf+0x54>
    1382:	9e e8       	ldi	r25, 0x8E	; 142
    1384:	87 2f       	mov	r24, r23
    1386:	76 2f       	mov	r23, r22
    1388:	05 c0       	rjmp	.+10     	; 0x1394 <__floatsisf+0x5e>
    138a:	66 23       	and	r22, r22
    138c:	71 f0       	breq	.+28     	; 0x13aa <__floatsisf+0x74>
    138e:	96 e8       	ldi	r25, 0x86	; 134
    1390:	86 2f       	mov	r24, r22
    1392:	70 e0       	ldi	r23, 0x00	; 0
    1394:	60 e0       	ldi	r22, 0x00	; 0
    1396:	2a f0       	brmi	.+10     	; 0x13a2 <__floatsisf+0x6c>
    1398:	9a 95       	dec	r25
    139a:	66 0f       	add	r22, r22
    139c:	77 1f       	adc	r23, r23
    139e:	88 1f       	adc	r24, r24
    13a0:	da f7       	brpl	.-10     	; 0x1398 <__floatsisf+0x62>
    13a2:	88 0f       	add	r24, r24
    13a4:	96 95       	lsr	r25
    13a6:	87 95       	ror	r24
    13a8:	97 f9       	bld	r25, 7
    13aa:	08 95       	ret

000013ac <__fp_cmp>:
    13ac:	99 0f       	add	r25, r25
    13ae:	00 08       	sbc	r0, r0
    13b0:	55 0f       	add	r21, r21
    13b2:	aa 0b       	sbc	r26, r26
    13b4:	e0 e8       	ldi	r30, 0x80	; 128
    13b6:	fe ef       	ldi	r31, 0xFE	; 254
    13b8:	16 16       	cp	r1, r22
    13ba:	17 06       	cpc	r1, r23
    13bc:	e8 07       	cpc	r30, r24
    13be:	f9 07       	cpc	r31, r25
    13c0:	c0 f0       	brcs	.+48     	; 0x13f2 <__fp_cmp+0x46>
    13c2:	12 16       	cp	r1, r18
    13c4:	13 06       	cpc	r1, r19
    13c6:	e4 07       	cpc	r30, r20
    13c8:	f5 07       	cpc	r31, r21
    13ca:	98 f0       	brcs	.+38     	; 0x13f2 <__fp_cmp+0x46>
    13cc:	62 1b       	sub	r22, r18
    13ce:	73 0b       	sbc	r23, r19
    13d0:	84 0b       	sbc	r24, r20
    13d2:	95 0b       	sbc	r25, r21
    13d4:	39 f4       	brne	.+14     	; 0x13e4 <__fp_cmp+0x38>
    13d6:	0a 26       	eor	r0, r26
    13d8:	61 f0       	breq	.+24     	; 0x13f2 <__fp_cmp+0x46>
    13da:	23 2b       	or	r18, r19
    13dc:	24 2b       	or	r18, r20
    13de:	25 2b       	or	r18, r21
    13e0:	21 f4       	brne	.+8      	; 0x13ea <__fp_cmp+0x3e>
    13e2:	08 95       	ret
    13e4:	0a 26       	eor	r0, r26
    13e6:	09 f4       	brne	.+2      	; 0x13ea <__fp_cmp+0x3e>
    13e8:	a1 40       	sbci	r26, 0x01	; 1
    13ea:	a6 95       	lsr	r26
    13ec:	8f ef       	ldi	r24, 0xFF	; 255
    13ee:	81 1d       	adc	r24, r1
    13f0:	81 1d       	adc	r24, r1
    13f2:	08 95       	ret

000013f4 <__fp_inf>:
    13f4:	97 f9       	bld	r25, 7
    13f6:	9f 67       	ori	r25, 0x7F	; 127
    13f8:	80 e8       	ldi	r24, 0x80	; 128
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	08 95       	ret

00001400 <__fp_nan>:
    1400:	9f ef       	ldi	r25, 0xFF	; 255
    1402:	80 ec       	ldi	r24, 0xC0	; 192
    1404:	08 95       	ret

00001406 <__fp_pscA>:
    1406:	00 24       	eor	r0, r0
    1408:	0a 94       	dec	r0
    140a:	16 16       	cp	r1, r22
    140c:	17 06       	cpc	r1, r23
    140e:	18 06       	cpc	r1, r24
    1410:	09 06       	cpc	r0, r25
    1412:	08 95       	ret

00001414 <__fp_pscB>:
    1414:	00 24       	eor	r0, r0
    1416:	0a 94       	dec	r0
    1418:	12 16       	cp	r1, r18
    141a:	13 06       	cpc	r1, r19
    141c:	14 06       	cpc	r1, r20
    141e:	05 06       	cpc	r0, r21
    1420:	08 95       	ret

00001422 <__fp_round>:
    1422:	09 2e       	mov	r0, r25
    1424:	03 94       	inc	r0
    1426:	00 0c       	add	r0, r0
    1428:	11 f4       	brne	.+4      	; 0x142e <__fp_round+0xc>
    142a:	88 23       	and	r24, r24
    142c:	52 f0       	brmi	.+20     	; 0x1442 <__fp_round+0x20>
    142e:	bb 0f       	add	r27, r27
    1430:	40 f4       	brcc	.+16     	; 0x1442 <__fp_round+0x20>
    1432:	bf 2b       	or	r27, r31
    1434:	11 f4       	brne	.+4      	; 0x143a <__fp_round+0x18>
    1436:	60 ff       	sbrs	r22, 0
    1438:	04 c0       	rjmp	.+8      	; 0x1442 <__fp_round+0x20>
    143a:	6f 5f       	subi	r22, 0xFF	; 255
    143c:	7f 4f       	sbci	r23, 0xFF	; 255
    143e:	8f 4f       	sbci	r24, 0xFF	; 255
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	08 95       	ret

00001444 <__fp_split3>:
    1444:	57 fd       	sbrc	r21, 7
    1446:	90 58       	subi	r25, 0x80	; 128
    1448:	44 0f       	add	r20, r20
    144a:	55 1f       	adc	r21, r21
    144c:	59 f0       	breq	.+22     	; 0x1464 <__fp_splitA+0x10>
    144e:	5f 3f       	cpi	r21, 0xFF	; 255
    1450:	71 f0       	breq	.+28     	; 0x146e <__fp_splitA+0x1a>
    1452:	47 95       	ror	r20

00001454 <__fp_splitA>:
    1454:	88 0f       	add	r24, r24
    1456:	97 fb       	bst	r25, 7
    1458:	99 1f       	adc	r25, r25
    145a:	61 f0       	breq	.+24     	; 0x1474 <__fp_splitA+0x20>
    145c:	9f 3f       	cpi	r25, 0xFF	; 255
    145e:	79 f0       	breq	.+30     	; 0x147e <__fp_splitA+0x2a>
    1460:	87 95       	ror	r24
    1462:	08 95       	ret
    1464:	12 16       	cp	r1, r18
    1466:	13 06       	cpc	r1, r19
    1468:	14 06       	cpc	r1, r20
    146a:	55 1f       	adc	r21, r21
    146c:	f2 cf       	rjmp	.-28     	; 0x1452 <__fp_split3+0xe>
    146e:	46 95       	lsr	r20
    1470:	f1 df       	rcall	.-30     	; 0x1454 <__fp_splitA>
    1472:	08 c0       	rjmp	.+16     	; 0x1484 <__fp_splitA+0x30>
    1474:	16 16       	cp	r1, r22
    1476:	17 06       	cpc	r1, r23
    1478:	18 06       	cpc	r1, r24
    147a:	99 1f       	adc	r25, r25
    147c:	f1 cf       	rjmp	.-30     	; 0x1460 <__fp_splitA+0xc>
    147e:	86 95       	lsr	r24
    1480:	71 05       	cpc	r23, r1
    1482:	61 05       	cpc	r22, r1
    1484:	08 94       	sec
    1486:	08 95       	ret

00001488 <__fp_zero>:
    1488:	e8 94       	clt

0000148a <__fp_szero>:
    148a:	bb 27       	eor	r27, r27
    148c:	66 27       	eor	r22, r22
    148e:	77 27       	eor	r23, r23
    1490:	cb 01       	movw	r24, r22
    1492:	97 f9       	bld	r25, 7
    1494:	08 95       	ret

00001496 <__gesf2>:
    1496:	8a df       	rcall	.-236    	; 0x13ac <__fp_cmp>
    1498:	08 f4       	brcc	.+2      	; 0x149c <__gesf2+0x6>
    149a:	8f ef       	ldi	r24, 0xFF	; 255
    149c:	08 95       	ret

0000149e <__mulsf3>:
    149e:	0b d0       	rcall	.+22     	; 0x14b6 <__mulsf3x>
    14a0:	c0 cf       	rjmp	.-128    	; 0x1422 <__fp_round>
    14a2:	b1 df       	rcall	.-158    	; 0x1406 <__fp_pscA>
    14a4:	28 f0       	brcs	.+10     	; 0x14b0 <__mulsf3+0x12>
    14a6:	b6 df       	rcall	.-148    	; 0x1414 <__fp_pscB>
    14a8:	18 f0       	brcs	.+6      	; 0x14b0 <__mulsf3+0x12>
    14aa:	95 23       	and	r25, r21
    14ac:	09 f0       	breq	.+2      	; 0x14b0 <__mulsf3+0x12>
    14ae:	a2 cf       	rjmp	.-188    	; 0x13f4 <__fp_inf>
    14b0:	a7 cf       	rjmp	.-178    	; 0x1400 <__fp_nan>
    14b2:	11 24       	eor	r1, r1
    14b4:	ea cf       	rjmp	.-44     	; 0x148a <__fp_szero>

000014b6 <__mulsf3x>:
    14b6:	c6 df       	rcall	.-116    	; 0x1444 <__fp_split3>
    14b8:	a0 f3       	brcs	.-24     	; 0x14a2 <__mulsf3+0x4>

000014ba <__mulsf3_pse>:
    14ba:	95 9f       	mul	r25, r21
    14bc:	d1 f3       	breq	.-12     	; 0x14b2 <__mulsf3+0x14>
    14be:	95 0f       	add	r25, r21
    14c0:	50 e0       	ldi	r21, 0x00	; 0
    14c2:	55 1f       	adc	r21, r21
    14c4:	62 9f       	mul	r22, r18
    14c6:	f0 01       	movw	r30, r0
    14c8:	72 9f       	mul	r23, r18
    14ca:	bb 27       	eor	r27, r27
    14cc:	f0 0d       	add	r31, r0
    14ce:	b1 1d       	adc	r27, r1
    14d0:	63 9f       	mul	r22, r19
    14d2:	aa 27       	eor	r26, r26
    14d4:	f0 0d       	add	r31, r0
    14d6:	b1 1d       	adc	r27, r1
    14d8:	aa 1f       	adc	r26, r26
    14da:	64 9f       	mul	r22, r20
    14dc:	66 27       	eor	r22, r22
    14de:	b0 0d       	add	r27, r0
    14e0:	a1 1d       	adc	r26, r1
    14e2:	66 1f       	adc	r22, r22
    14e4:	82 9f       	mul	r24, r18
    14e6:	22 27       	eor	r18, r18
    14e8:	b0 0d       	add	r27, r0
    14ea:	a1 1d       	adc	r26, r1
    14ec:	62 1f       	adc	r22, r18
    14ee:	73 9f       	mul	r23, r19
    14f0:	b0 0d       	add	r27, r0
    14f2:	a1 1d       	adc	r26, r1
    14f4:	62 1f       	adc	r22, r18
    14f6:	83 9f       	mul	r24, r19
    14f8:	a0 0d       	add	r26, r0
    14fa:	61 1d       	adc	r22, r1
    14fc:	22 1f       	adc	r18, r18
    14fe:	74 9f       	mul	r23, r20
    1500:	33 27       	eor	r19, r19
    1502:	a0 0d       	add	r26, r0
    1504:	61 1d       	adc	r22, r1
    1506:	23 1f       	adc	r18, r19
    1508:	84 9f       	mul	r24, r20
    150a:	60 0d       	add	r22, r0
    150c:	21 1d       	adc	r18, r1
    150e:	82 2f       	mov	r24, r18
    1510:	76 2f       	mov	r23, r22
    1512:	6a 2f       	mov	r22, r26
    1514:	11 24       	eor	r1, r1
    1516:	9f 57       	subi	r25, 0x7F	; 127
    1518:	50 40       	sbci	r21, 0x00	; 0
    151a:	8a f0       	brmi	.+34     	; 0x153e <__mulsf3_pse+0x84>
    151c:	e1 f0       	breq	.+56     	; 0x1556 <__mulsf3_pse+0x9c>
    151e:	88 23       	and	r24, r24
    1520:	4a f0       	brmi	.+18     	; 0x1534 <__mulsf3_pse+0x7a>
    1522:	ee 0f       	add	r30, r30
    1524:	ff 1f       	adc	r31, r31
    1526:	bb 1f       	adc	r27, r27
    1528:	66 1f       	adc	r22, r22
    152a:	77 1f       	adc	r23, r23
    152c:	88 1f       	adc	r24, r24
    152e:	91 50       	subi	r25, 0x01	; 1
    1530:	50 40       	sbci	r21, 0x00	; 0
    1532:	a9 f7       	brne	.-22     	; 0x151e <__mulsf3_pse+0x64>
    1534:	9e 3f       	cpi	r25, 0xFE	; 254
    1536:	51 05       	cpc	r21, r1
    1538:	70 f0       	brcs	.+28     	; 0x1556 <__mulsf3_pse+0x9c>
    153a:	5c cf       	rjmp	.-328    	; 0x13f4 <__fp_inf>
    153c:	a6 cf       	rjmp	.-180    	; 0x148a <__fp_szero>
    153e:	5f 3f       	cpi	r21, 0xFF	; 255
    1540:	ec f3       	brlt	.-6      	; 0x153c <__mulsf3_pse+0x82>
    1542:	98 3e       	cpi	r25, 0xE8	; 232
    1544:	dc f3       	brlt	.-10     	; 0x153c <__mulsf3_pse+0x82>
    1546:	86 95       	lsr	r24
    1548:	77 95       	ror	r23
    154a:	67 95       	ror	r22
    154c:	b7 95       	ror	r27
    154e:	f7 95       	ror	r31
    1550:	e7 95       	ror	r30
    1552:	9f 5f       	subi	r25, 0xFF	; 255
    1554:	c1 f7       	brne	.-16     	; 0x1546 <__mulsf3_pse+0x8c>
    1556:	fe 2b       	or	r31, r30
    1558:	88 0f       	add	r24, r24
    155a:	91 1d       	adc	r25, r1
    155c:	96 95       	lsr	r25
    155e:	87 95       	ror	r24
    1560:	97 f9       	bld	r25, 7
    1562:	08 95       	ret

00001564 <__divmodhi4>:
    1564:	97 fb       	bst	r25, 7
    1566:	07 2e       	mov	r0, r23
    1568:	16 f4       	brtc	.+4      	; 0x156e <__divmodhi4+0xa>
    156a:	00 94       	com	r0
    156c:	06 d0       	rcall	.+12     	; 0x157a <__divmodhi4_neg1>
    156e:	77 fd       	sbrc	r23, 7
    1570:	08 d0       	rcall	.+16     	; 0x1582 <__divmodhi4_neg2>
    1572:	49 d0       	rcall	.+146    	; 0x1606 <__udivmodhi4>
    1574:	07 fc       	sbrc	r0, 7
    1576:	05 d0       	rcall	.+10     	; 0x1582 <__divmodhi4_neg2>
    1578:	3e f4       	brtc	.+14     	; 0x1588 <__divmodhi4_exit>

0000157a <__divmodhi4_neg1>:
    157a:	90 95       	com	r25
    157c:	81 95       	neg	r24
    157e:	9f 4f       	sbci	r25, 0xFF	; 255
    1580:	08 95       	ret

00001582 <__divmodhi4_neg2>:
    1582:	70 95       	com	r23
    1584:	61 95       	neg	r22
    1586:	7f 4f       	sbci	r23, 0xFF	; 255

00001588 <__divmodhi4_exit>:
    1588:	08 95       	ret

0000158a <__udivmodsi4>:
    158a:	a1 e2       	ldi	r26, 0x21	; 33
    158c:	1a 2e       	mov	r1, r26
    158e:	aa 1b       	sub	r26, r26
    1590:	bb 1b       	sub	r27, r27
    1592:	fd 01       	movw	r30, r26
    1594:	0d c0       	rjmp	.+26     	; 0x15b0 <__udivmodsi4_ep>

00001596 <__udivmodsi4_loop>:
    1596:	aa 1f       	adc	r26, r26
    1598:	bb 1f       	adc	r27, r27
    159a:	ee 1f       	adc	r30, r30
    159c:	ff 1f       	adc	r31, r31
    159e:	a2 17       	cp	r26, r18
    15a0:	b3 07       	cpc	r27, r19
    15a2:	e4 07       	cpc	r30, r20
    15a4:	f5 07       	cpc	r31, r21
    15a6:	20 f0       	brcs	.+8      	; 0x15b0 <__udivmodsi4_ep>
    15a8:	a2 1b       	sub	r26, r18
    15aa:	b3 0b       	sbc	r27, r19
    15ac:	e4 0b       	sbc	r30, r20
    15ae:	f5 0b       	sbc	r31, r21

000015b0 <__udivmodsi4_ep>:
    15b0:	66 1f       	adc	r22, r22
    15b2:	77 1f       	adc	r23, r23
    15b4:	88 1f       	adc	r24, r24
    15b6:	99 1f       	adc	r25, r25
    15b8:	1a 94       	dec	r1
    15ba:	69 f7       	brne	.-38     	; 0x1596 <__udivmodsi4_loop>
    15bc:	60 95       	com	r22
    15be:	70 95       	com	r23
    15c0:	80 95       	com	r24
    15c2:	90 95       	com	r25
    15c4:	9b 01       	movw	r18, r22
    15c6:	ac 01       	movw	r20, r24
    15c8:	bd 01       	movw	r22, r26
    15ca:	cf 01       	movw	r24, r30
    15cc:	08 95       	ret

000015ce <__divmodsi4>:
    15ce:	05 2e       	mov	r0, r21
    15d0:	97 fb       	bst	r25, 7
    15d2:	16 f4       	brtc	.+4      	; 0x15d8 <__divmodsi4+0xa>
    15d4:	00 94       	com	r0
    15d6:	0f d0       	rcall	.+30     	; 0x15f6 <__negsi2>
    15d8:	57 fd       	sbrc	r21, 7
    15da:	05 d0       	rcall	.+10     	; 0x15e6 <__divmodsi4_neg2>
    15dc:	d6 df       	rcall	.-84     	; 0x158a <__udivmodsi4>
    15de:	07 fc       	sbrc	r0, 7
    15e0:	02 d0       	rcall	.+4      	; 0x15e6 <__divmodsi4_neg2>
    15e2:	46 f4       	brtc	.+16     	; 0x15f4 <__divmodsi4_exit>
    15e4:	08 c0       	rjmp	.+16     	; 0x15f6 <__negsi2>

000015e6 <__divmodsi4_neg2>:
    15e6:	50 95       	com	r21
    15e8:	40 95       	com	r20
    15ea:	30 95       	com	r19
    15ec:	21 95       	neg	r18
    15ee:	3f 4f       	sbci	r19, 0xFF	; 255
    15f0:	4f 4f       	sbci	r20, 0xFF	; 255
    15f2:	5f 4f       	sbci	r21, 0xFF	; 255

000015f4 <__divmodsi4_exit>:
    15f4:	08 95       	ret

000015f6 <__negsi2>:
    15f6:	90 95       	com	r25
    15f8:	80 95       	com	r24
    15fa:	70 95       	com	r23
    15fc:	61 95       	neg	r22
    15fe:	7f 4f       	sbci	r23, 0xFF	; 255
    1600:	8f 4f       	sbci	r24, 0xFF	; 255
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	08 95       	ret

00001606 <__udivmodhi4>:
    1606:	aa 1b       	sub	r26, r26
    1608:	bb 1b       	sub	r27, r27
    160a:	51 e1       	ldi	r21, 0x11	; 17
    160c:	07 c0       	rjmp	.+14     	; 0x161c <__udivmodhi4_ep>

0000160e <__udivmodhi4_loop>:
    160e:	aa 1f       	adc	r26, r26
    1610:	bb 1f       	adc	r27, r27
    1612:	a6 17       	cp	r26, r22
    1614:	b7 07       	cpc	r27, r23
    1616:	10 f0       	brcs	.+4      	; 0x161c <__udivmodhi4_ep>
    1618:	a6 1b       	sub	r26, r22
    161a:	b7 0b       	sbc	r27, r23

0000161c <__udivmodhi4_ep>:
    161c:	88 1f       	adc	r24, r24
    161e:	99 1f       	adc	r25, r25
    1620:	5a 95       	dec	r21
    1622:	a9 f7       	brne	.-22     	; 0x160e <__udivmodhi4_loop>
    1624:	80 95       	com	r24
    1626:	90 95       	com	r25
    1628:	bc 01       	movw	r22, r24
    162a:	cd 01       	movw	r24, r26
    162c:	08 95       	ret

0000162e <snprintf>:
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	cd b7       	in	r28, 0x3d	; 61
    1638:	de b7       	in	r29, 0x3e	; 62
    163a:	2e 97       	sbiw	r28, 0x0e	; 14
    163c:	0f b6       	in	r0, 0x3f	; 63
    163e:	f8 94       	cli
    1640:	de bf       	out	0x3e, r29	; 62
    1642:	0f be       	out	0x3f, r0	; 63
    1644:	cd bf       	out	0x3d, r28	; 61
    1646:	0e 89       	ldd	r16, Y+22	; 0x16
    1648:	1f 89       	ldd	r17, Y+23	; 0x17
    164a:	88 8d       	ldd	r24, Y+24	; 0x18
    164c:	99 8d       	ldd	r25, Y+25	; 0x19
    164e:	26 e0       	ldi	r18, 0x06	; 6
    1650:	2c 83       	std	Y+4, r18	; 0x04
    1652:	1a 83       	std	Y+2, r17	; 0x02
    1654:	09 83       	std	Y+1, r16	; 0x01
    1656:	97 ff       	sbrs	r25, 7
    1658:	02 c0       	rjmp	.+4      	; 0x165e <snprintf+0x30>
    165a:	80 e0       	ldi	r24, 0x00	; 0
    165c:	90 e8       	ldi	r25, 0x80	; 128
    165e:	01 97       	sbiw	r24, 0x01	; 1
    1660:	9e 83       	std	Y+6, r25	; 0x06
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	ae 01       	movw	r20, r28
    1666:	44 5e       	subi	r20, 0xE4	; 228
    1668:	5f 4f       	sbci	r21, 0xFF	; 255
    166a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    166c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    166e:	ce 01       	movw	r24, r28
    1670:	01 96       	adiw	r24, 0x01	; 1
    1672:	47 d0       	rcall	.+142    	; 0x1702 <vfprintf>
    1674:	4d 81       	ldd	r20, Y+5	; 0x05
    1676:	5e 81       	ldd	r21, Y+6	; 0x06
    1678:	57 fd       	sbrc	r21, 7
    167a:	0a c0       	rjmp	.+20     	; 0x1690 <snprintf+0x62>
    167c:	2f 81       	ldd	r18, Y+7	; 0x07
    167e:	38 85       	ldd	r19, Y+8	; 0x08
    1680:	42 17       	cp	r20, r18
    1682:	53 07       	cpc	r21, r19
    1684:	0c f4       	brge	.+2      	; 0x1688 <snprintf+0x5a>
    1686:	9a 01       	movw	r18, r20
    1688:	f8 01       	movw	r30, r16
    168a:	e2 0f       	add	r30, r18
    168c:	f3 1f       	adc	r31, r19
    168e:	10 82       	st	Z, r1
    1690:	2e 96       	adiw	r28, 0x0e	; 14
    1692:	0f b6       	in	r0, 0x3f	; 63
    1694:	f8 94       	cli
    1696:	de bf       	out	0x3e, r29	; 62
    1698:	0f be       	out	0x3f, r0	; 63
    169a:	cd bf       	out	0x3d, r28	; 61
    169c:	df 91       	pop	r29
    169e:	cf 91       	pop	r28
    16a0:	1f 91       	pop	r17
    16a2:	0f 91       	pop	r16
    16a4:	08 95       	ret

000016a6 <sprintf>:
    16a6:	0f 93       	push	r16
    16a8:	1f 93       	push	r17
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	cd b7       	in	r28, 0x3d	; 61
    16b0:	de b7       	in	r29, 0x3e	; 62
    16b2:	2e 97       	sbiw	r28, 0x0e	; 14
    16b4:	0f b6       	in	r0, 0x3f	; 63
    16b6:	f8 94       	cli
    16b8:	de bf       	out	0x3e, r29	; 62
    16ba:	0f be       	out	0x3f, r0	; 63
    16bc:	cd bf       	out	0x3d, r28	; 61
    16be:	0e 89       	ldd	r16, Y+22	; 0x16
    16c0:	1f 89       	ldd	r17, Y+23	; 0x17
    16c2:	86 e0       	ldi	r24, 0x06	; 6
    16c4:	8c 83       	std	Y+4, r24	; 0x04
    16c6:	1a 83       	std	Y+2, r17	; 0x02
    16c8:	09 83       	std	Y+1, r16	; 0x01
    16ca:	8f ef       	ldi	r24, 0xFF	; 255
    16cc:	9f e7       	ldi	r25, 0x7F	; 127
    16ce:	9e 83       	std	Y+6, r25	; 0x06
    16d0:	8d 83       	std	Y+5, r24	; 0x05
    16d2:	ae 01       	movw	r20, r28
    16d4:	46 5e       	subi	r20, 0xE6	; 230
    16d6:	5f 4f       	sbci	r21, 0xFF	; 255
    16d8:	68 8d       	ldd	r22, Y+24	; 0x18
    16da:	79 8d       	ldd	r23, Y+25	; 0x19
    16dc:	ce 01       	movw	r24, r28
    16de:	01 96       	adiw	r24, 0x01	; 1
    16e0:	10 d0       	rcall	.+32     	; 0x1702 <vfprintf>
    16e2:	ef 81       	ldd	r30, Y+7	; 0x07
    16e4:	f8 85       	ldd	r31, Y+8	; 0x08
    16e6:	e0 0f       	add	r30, r16
    16e8:	f1 1f       	adc	r31, r17
    16ea:	10 82       	st	Z, r1
    16ec:	2e 96       	adiw	r28, 0x0e	; 14
    16ee:	0f b6       	in	r0, 0x3f	; 63
    16f0:	f8 94       	cli
    16f2:	de bf       	out	0x3e, r29	; 62
    16f4:	0f be       	out	0x3f, r0	; 63
    16f6:	cd bf       	out	0x3d, r28	; 61
    16f8:	df 91       	pop	r29
    16fa:	cf 91       	pop	r28
    16fc:	1f 91       	pop	r17
    16fe:	0f 91       	pop	r16
    1700:	08 95       	ret

00001702 <vfprintf>:
    1702:	2f 92       	push	r2
    1704:	3f 92       	push	r3
    1706:	4f 92       	push	r4
    1708:	5f 92       	push	r5
    170a:	6f 92       	push	r6
    170c:	7f 92       	push	r7
    170e:	8f 92       	push	r8
    1710:	9f 92       	push	r9
    1712:	af 92       	push	r10
    1714:	bf 92       	push	r11
    1716:	cf 92       	push	r12
    1718:	df 92       	push	r13
    171a:	ef 92       	push	r14
    171c:	ff 92       	push	r15
    171e:	0f 93       	push	r16
    1720:	1f 93       	push	r17
    1722:	cf 93       	push	r28
    1724:	df 93       	push	r29
    1726:	cd b7       	in	r28, 0x3d	; 61
    1728:	de b7       	in	r29, 0x3e	; 62
    172a:	2b 97       	sbiw	r28, 0x0b	; 11
    172c:	0f b6       	in	r0, 0x3f	; 63
    172e:	f8 94       	cli
    1730:	de bf       	out	0x3e, r29	; 62
    1732:	0f be       	out	0x3f, r0	; 63
    1734:	cd bf       	out	0x3d, r28	; 61
    1736:	6c 01       	movw	r12, r24
    1738:	7b 01       	movw	r14, r22
    173a:	8a 01       	movw	r16, r20
    173c:	fc 01       	movw	r30, r24
    173e:	17 82       	std	Z+7, r1	; 0x07
    1740:	16 82       	std	Z+6, r1	; 0x06
    1742:	83 81       	ldd	r24, Z+3	; 0x03
    1744:	81 ff       	sbrs	r24, 1
    1746:	bf c1       	rjmp	.+894    	; 0x1ac6 <vfprintf+0x3c4>
    1748:	ce 01       	movw	r24, r28
    174a:	01 96       	adiw	r24, 0x01	; 1
    174c:	3c 01       	movw	r6, r24
    174e:	f6 01       	movw	r30, r12
    1750:	93 81       	ldd	r25, Z+3	; 0x03
    1752:	f7 01       	movw	r30, r14
    1754:	93 fd       	sbrc	r25, 3
    1756:	85 91       	lpm	r24, Z+
    1758:	93 ff       	sbrs	r25, 3
    175a:	81 91       	ld	r24, Z+
    175c:	7f 01       	movw	r14, r30
    175e:	88 23       	and	r24, r24
    1760:	09 f4       	brne	.+2      	; 0x1764 <vfprintf+0x62>
    1762:	ad c1       	rjmp	.+858    	; 0x1abe <vfprintf+0x3bc>
    1764:	85 32       	cpi	r24, 0x25	; 37
    1766:	39 f4       	brne	.+14     	; 0x1776 <vfprintf+0x74>
    1768:	93 fd       	sbrc	r25, 3
    176a:	85 91       	lpm	r24, Z+
    176c:	93 ff       	sbrs	r25, 3
    176e:	81 91       	ld	r24, Z+
    1770:	7f 01       	movw	r14, r30
    1772:	85 32       	cpi	r24, 0x25	; 37
    1774:	21 f4       	brne	.+8      	; 0x177e <vfprintf+0x7c>
    1776:	b6 01       	movw	r22, r12
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	d6 d1       	rcall	.+940    	; 0x1b28 <fputc>
    177c:	e8 cf       	rjmp	.-48     	; 0x174e <vfprintf+0x4c>
    177e:	91 2c       	mov	r9, r1
    1780:	21 2c       	mov	r2, r1
    1782:	31 2c       	mov	r3, r1
    1784:	ff e1       	ldi	r31, 0x1F	; 31
    1786:	f3 15       	cp	r31, r3
    1788:	d8 f0       	brcs	.+54     	; 0x17c0 <vfprintf+0xbe>
    178a:	8b 32       	cpi	r24, 0x2B	; 43
    178c:	79 f0       	breq	.+30     	; 0x17ac <vfprintf+0xaa>
    178e:	38 f4       	brcc	.+14     	; 0x179e <vfprintf+0x9c>
    1790:	80 32       	cpi	r24, 0x20	; 32
    1792:	79 f0       	breq	.+30     	; 0x17b2 <vfprintf+0xb0>
    1794:	83 32       	cpi	r24, 0x23	; 35
    1796:	a1 f4       	brne	.+40     	; 0x17c0 <vfprintf+0xbe>
    1798:	23 2d       	mov	r18, r3
    179a:	20 61       	ori	r18, 0x10	; 16
    179c:	1d c0       	rjmp	.+58     	; 0x17d8 <vfprintf+0xd6>
    179e:	8d 32       	cpi	r24, 0x2D	; 45
    17a0:	61 f0       	breq	.+24     	; 0x17ba <vfprintf+0xb8>
    17a2:	80 33       	cpi	r24, 0x30	; 48
    17a4:	69 f4       	brne	.+26     	; 0x17c0 <vfprintf+0xbe>
    17a6:	23 2d       	mov	r18, r3
    17a8:	21 60       	ori	r18, 0x01	; 1
    17aa:	16 c0       	rjmp	.+44     	; 0x17d8 <vfprintf+0xd6>
    17ac:	83 2d       	mov	r24, r3
    17ae:	82 60       	ori	r24, 0x02	; 2
    17b0:	38 2e       	mov	r3, r24
    17b2:	e3 2d       	mov	r30, r3
    17b4:	e4 60       	ori	r30, 0x04	; 4
    17b6:	3e 2e       	mov	r3, r30
    17b8:	2a c0       	rjmp	.+84     	; 0x180e <vfprintf+0x10c>
    17ba:	f3 2d       	mov	r31, r3
    17bc:	f8 60       	ori	r31, 0x08	; 8
    17be:	1d c0       	rjmp	.+58     	; 0x17fa <vfprintf+0xf8>
    17c0:	37 fc       	sbrc	r3, 7
    17c2:	2d c0       	rjmp	.+90     	; 0x181e <vfprintf+0x11c>
    17c4:	20 ed       	ldi	r18, 0xD0	; 208
    17c6:	28 0f       	add	r18, r24
    17c8:	2a 30       	cpi	r18, 0x0A	; 10
    17ca:	40 f0       	brcs	.+16     	; 0x17dc <vfprintf+0xda>
    17cc:	8e 32       	cpi	r24, 0x2E	; 46
    17ce:	b9 f4       	brne	.+46     	; 0x17fe <vfprintf+0xfc>
    17d0:	36 fc       	sbrc	r3, 6
    17d2:	75 c1       	rjmp	.+746    	; 0x1abe <vfprintf+0x3bc>
    17d4:	23 2d       	mov	r18, r3
    17d6:	20 64       	ori	r18, 0x40	; 64
    17d8:	32 2e       	mov	r3, r18
    17da:	19 c0       	rjmp	.+50     	; 0x180e <vfprintf+0x10c>
    17dc:	36 fe       	sbrs	r3, 6
    17de:	06 c0       	rjmp	.+12     	; 0x17ec <vfprintf+0xea>
    17e0:	8a e0       	ldi	r24, 0x0A	; 10
    17e2:	98 9e       	mul	r9, r24
    17e4:	20 0d       	add	r18, r0
    17e6:	11 24       	eor	r1, r1
    17e8:	92 2e       	mov	r9, r18
    17ea:	11 c0       	rjmp	.+34     	; 0x180e <vfprintf+0x10c>
    17ec:	ea e0       	ldi	r30, 0x0A	; 10
    17ee:	2e 9e       	mul	r2, r30
    17f0:	20 0d       	add	r18, r0
    17f2:	11 24       	eor	r1, r1
    17f4:	22 2e       	mov	r2, r18
    17f6:	f3 2d       	mov	r31, r3
    17f8:	f0 62       	ori	r31, 0x20	; 32
    17fa:	3f 2e       	mov	r3, r31
    17fc:	08 c0       	rjmp	.+16     	; 0x180e <vfprintf+0x10c>
    17fe:	8c 36       	cpi	r24, 0x6C	; 108
    1800:	21 f4       	brne	.+8      	; 0x180a <vfprintf+0x108>
    1802:	83 2d       	mov	r24, r3
    1804:	80 68       	ori	r24, 0x80	; 128
    1806:	38 2e       	mov	r3, r24
    1808:	02 c0       	rjmp	.+4      	; 0x180e <vfprintf+0x10c>
    180a:	88 36       	cpi	r24, 0x68	; 104
    180c:	41 f4       	brne	.+16     	; 0x181e <vfprintf+0x11c>
    180e:	f7 01       	movw	r30, r14
    1810:	93 fd       	sbrc	r25, 3
    1812:	85 91       	lpm	r24, Z+
    1814:	93 ff       	sbrs	r25, 3
    1816:	81 91       	ld	r24, Z+
    1818:	7f 01       	movw	r14, r30
    181a:	81 11       	cpse	r24, r1
    181c:	b3 cf       	rjmp	.-154    	; 0x1784 <vfprintf+0x82>
    181e:	98 2f       	mov	r25, r24
    1820:	9f 7d       	andi	r25, 0xDF	; 223
    1822:	95 54       	subi	r25, 0x45	; 69
    1824:	93 30       	cpi	r25, 0x03	; 3
    1826:	28 f4       	brcc	.+10     	; 0x1832 <vfprintf+0x130>
    1828:	0c 5f       	subi	r16, 0xFC	; 252
    182a:	1f 4f       	sbci	r17, 0xFF	; 255
    182c:	9f e3       	ldi	r25, 0x3F	; 63
    182e:	99 83       	std	Y+1, r25	; 0x01
    1830:	0d c0       	rjmp	.+26     	; 0x184c <vfprintf+0x14a>
    1832:	83 36       	cpi	r24, 0x63	; 99
    1834:	31 f0       	breq	.+12     	; 0x1842 <vfprintf+0x140>
    1836:	83 37       	cpi	r24, 0x73	; 115
    1838:	71 f0       	breq	.+28     	; 0x1856 <vfprintf+0x154>
    183a:	83 35       	cpi	r24, 0x53	; 83
    183c:	09 f0       	breq	.+2      	; 0x1840 <vfprintf+0x13e>
    183e:	55 c0       	rjmp	.+170    	; 0x18ea <vfprintf+0x1e8>
    1840:	20 c0       	rjmp	.+64     	; 0x1882 <vfprintf+0x180>
    1842:	f8 01       	movw	r30, r16
    1844:	80 81       	ld	r24, Z
    1846:	89 83       	std	Y+1, r24	; 0x01
    1848:	0e 5f       	subi	r16, 0xFE	; 254
    184a:	1f 4f       	sbci	r17, 0xFF	; 255
    184c:	88 24       	eor	r8, r8
    184e:	83 94       	inc	r8
    1850:	91 2c       	mov	r9, r1
    1852:	53 01       	movw	r10, r6
    1854:	12 c0       	rjmp	.+36     	; 0x187a <vfprintf+0x178>
    1856:	28 01       	movw	r4, r16
    1858:	f2 e0       	ldi	r31, 0x02	; 2
    185a:	4f 0e       	add	r4, r31
    185c:	51 1c       	adc	r5, r1
    185e:	f8 01       	movw	r30, r16
    1860:	a0 80       	ld	r10, Z
    1862:	b1 80       	ldd	r11, Z+1	; 0x01
    1864:	36 fe       	sbrs	r3, 6
    1866:	03 c0       	rjmp	.+6      	; 0x186e <vfprintf+0x16c>
    1868:	69 2d       	mov	r22, r9
    186a:	70 e0       	ldi	r23, 0x00	; 0
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <vfprintf+0x170>
    186e:	6f ef       	ldi	r22, 0xFF	; 255
    1870:	7f ef       	ldi	r23, 0xFF	; 255
    1872:	c5 01       	movw	r24, r10
    1874:	4e d1       	rcall	.+668    	; 0x1b12 <strnlen>
    1876:	4c 01       	movw	r8, r24
    1878:	82 01       	movw	r16, r4
    187a:	f3 2d       	mov	r31, r3
    187c:	ff 77       	andi	r31, 0x7F	; 127
    187e:	3f 2e       	mov	r3, r31
    1880:	15 c0       	rjmp	.+42     	; 0x18ac <vfprintf+0x1aa>
    1882:	28 01       	movw	r4, r16
    1884:	22 e0       	ldi	r18, 0x02	; 2
    1886:	42 0e       	add	r4, r18
    1888:	51 1c       	adc	r5, r1
    188a:	f8 01       	movw	r30, r16
    188c:	a0 80       	ld	r10, Z
    188e:	b1 80       	ldd	r11, Z+1	; 0x01
    1890:	36 fe       	sbrs	r3, 6
    1892:	03 c0       	rjmp	.+6      	; 0x189a <vfprintf+0x198>
    1894:	69 2d       	mov	r22, r9
    1896:	70 e0       	ldi	r23, 0x00	; 0
    1898:	02 c0       	rjmp	.+4      	; 0x189e <vfprintf+0x19c>
    189a:	6f ef       	ldi	r22, 0xFF	; 255
    189c:	7f ef       	ldi	r23, 0xFF	; 255
    189e:	c5 01       	movw	r24, r10
    18a0:	2d d1       	rcall	.+602    	; 0x1afc <strnlen_P>
    18a2:	4c 01       	movw	r8, r24
    18a4:	f3 2d       	mov	r31, r3
    18a6:	f0 68       	ori	r31, 0x80	; 128
    18a8:	3f 2e       	mov	r3, r31
    18aa:	82 01       	movw	r16, r4
    18ac:	33 fc       	sbrc	r3, 3
    18ae:	19 c0       	rjmp	.+50     	; 0x18e2 <vfprintf+0x1e0>
    18b0:	82 2d       	mov	r24, r2
    18b2:	90 e0       	ldi	r25, 0x00	; 0
    18b4:	88 16       	cp	r8, r24
    18b6:	99 06       	cpc	r9, r25
    18b8:	a0 f4       	brcc	.+40     	; 0x18e2 <vfprintf+0x1e0>
    18ba:	b6 01       	movw	r22, r12
    18bc:	80 e2       	ldi	r24, 0x20	; 32
    18be:	90 e0       	ldi	r25, 0x00	; 0
    18c0:	33 d1       	rcall	.+614    	; 0x1b28 <fputc>
    18c2:	2a 94       	dec	r2
    18c4:	f5 cf       	rjmp	.-22     	; 0x18b0 <vfprintf+0x1ae>
    18c6:	f5 01       	movw	r30, r10
    18c8:	37 fc       	sbrc	r3, 7
    18ca:	85 91       	lpm	r24, Z+
    18cc:	37 fe       	sbrs	r3, 7
    18ce:	81 91       	ld	r24, Z+
    18d0:	5f 01       	movw	r10, r30
    18d2:	b6 01       	movw	r22, r12
    18d4:	90 e0       	ldi	r25, 0x00	; 0
    18d6:	28 d1       	rcall	.+592    	; 0x1b28 <fputc>
    18d8:	21 10       	cpse	r2, r1
    18da:	2a 94       	dec	r2
    18dc:	21 e0       	ldi	r18, 0x01	; 1
    18de:	82 1a       	sub	r8, r18
    18e0:	91 08       	sbc	r9, r1
    18e2:	81 14       	cp	r8, r1
    18e4:	91 04       	cpc	r9, r1
    18e6:	79 f7       	brne	.-34     	; 0x18c6 <vfprintf+0x1c4>
    18e8:	e1 c0       	rjmp	.+450    	; 0x1aac <vfprintf+0x3aa>
    18ea:	84 36       	cpi	r24, 0x64	; 100
    18ec:	11 f0       	breq	.+4      	; 0x18f2 <vfprintf+0x1f0>
    18ee:	89 36       	cpi	r24, 0x69	; 105
    18f0:	39 f5       	brne	.+78     	; 0x1940 <vfprintf+0x23e>
    18f2:	f8 01       	movw	r30, r16
    18f4:	37 fe       	sbrs	r3, 7
    18f6:	07 c0       	rjmp	.+14     	; 0x1906 <vfprintf+0x204>
    18f8:	60 81       	ld	r22, Z
    18fa:	71 81       	ldd	r23, Z+1	; 0x01
    18fc:	82 81       	ldd	r24, Z+2	; 0x02
    18fe:	93 81       	ldd	r25, Z+3	; 0x03
    1900:	0c 5f       	subi	r16, 0xFC	; 252
    1902:	1f 4f       	sbci	r17, 0xFF	; 255
    1904:	08 c0       	rjmp	.+16     	; 0x1916 <vfprintf+0x214>
    1906:	60 81       	ld	r22, Z
    1908:	71 81       	ldd	r23, Z+1	; 0x01
    190a:	07 2e       	mov	r0, r23
    190c:	00 0c       	add	r0, r0
    190e:	88 0b       	sbc	r24, r24
    1910:	99 0b       	sbc	r25, r25
    1912:	0e 5f       	subi	r16, 0xFE	; 254
    1914:	1f 4f       	sbci	r17, 0xFF	; 255
    1916:	f3 2d       	mov	r31, r3
    1918:	ff 76       	andi	r31, 0x6F	; 111
    191a:	3f 2e       	mov	r3, r31
    191c:	97 ff       	sbrs	r25, 7
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <vfprintf+0x230>
    1920:	90 95       	com	r25
    1922:	80 95       	com	r24
    1924:	70 95       	com	r23
    1926:	61 95       	neg	r22
    1928:	7f 4f       	sbci	r23, 0xFF	; 255
    192a:	8f 4f       	sbci	r24, 0xFF	; 255
    192c:	9f 4f       	sbci	r25, 0xFF	; 255
    192e:	f0 68       	ori	r31, 0x80	; 128
    1930:	3f 2e       	mov	r3, r31
    1932:	2a e0       	ldi	r18, 0x0A	; 10
    1934:	30 e0       	ldi	r19, 0x00	; 0
    1936:	a3 01       	movw	r20, r6
    1938:	33 d1       	rcall	.+614    	; 0x1ba0 <__ultoa_invert>
    193a:	88 2e       	mov	r8, r24
    193c:	86 18       	sub	r8, r6
    193e:	44 c0       	rjmp	.+136    	; 0x19c8 <vfprintf+0x2c6>
    1940:	85 37       	cpi	r24, 0x75	; 117
    1942:	31 f4       	brne	.+12     	; 0x1950 <vfprintf+0x24e>
    1944:	23 2d       	mov	r18, r3
    1946:	2f 7e       	andi	r18, 0xEF	; 239
    1948:	b2 2e       	mov	r11, r18
    194a:	2a e0       	ldi	r18, 0x0A	; 10
    194c:	30 e0       	ldi	r19, 0x00	; 0
    194e:	25 c0       	rjmp	.+74     	; 0x199a <vfprintf+0x298>
    1950:	93 2d       	mov	r25, r3
    1952:	99 7f       	andi	r25, 0xF9	; 249
    1954:	b9 2e       	mov	r11, r25
    1956:	8f 36       	cpi	r24, 0x6F	; 111
    1958:	c1 f0       	breq	.+48     	; 0x198a <vfprintf+0x288>
    195a:	18 f4       	brcc	.+6      	; 0x1962 <vfprintf+0x260>
    195c:	88 35       	cpi	r24, 0x58	; 88
    195e:	79 f0       	breq	.+30     	; 0x197e <vfprintf+0x27c>
    1960:	ae c0       	rjmp	.+348    	; 0x1abe <vfprintf+0x3bc>
    1962:	80 37       	cpi	r24, 0x70	; 112
    1964:	19 f0       	breq	.+6      	; 0x196c <vfprintf+0x26a>
    1966:	88 37       	cpi	r24, 0x78	; 120
    1968:	21 f0       	breq	.+8      	; 0x1972 <vfprintf+0x270>
    196a:	a9 c0       	rjmp	.+338    	; 0x1abe <vfprintf+0x3bc>
    196c:	e9 2f       	mov	r30, r25
    196e:	e0 61       	ori	r30, 0x10	; 16
    1970:	be 2e       	mov	r11, r30
    1972:	b4 fe       	sbrs	r11, 4
    1974:	0d c0       	rjmp	.+26     	; 0x1990 <vfprintf+0x28e>
    1976:	fb 2d       	mov	r31, r11
    1978:	f4 60       	ori	r31, 0x04	; 4
    197a:	bf 2e       	mov	r11, r31
    197c:	09 c0       	rjmp	.+18     	; 0x1990 <vfprintf+0x28e>
    197e:	34 fe       	sbrs	r3, 4
    1980:	0a c0       	rjmp	.+20     	; 0x1996 <vfprintf+0x294>
    1982:	29 2f       	mov	r18, r25
    1984:	26 60       	ori	r18, 0x06	; 6
    1986:	b2 2e       	mov	r11, r18
    1988:	06 c0       	rjmp	.+12     	; 0x1996 <vfprintf+0x294>
    198a:	28 e0       	ldi	r18, 0x08	; 8
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	05 c0       	rjmp	.+10     	; 0x199a <vfprintf+0x298>
    1990:	20 e1       	ldi	r18, 0x10	; 16
    1992:	30 e0       	ldi	r19, 0x00	; 0
    1994:	02 c0       	rjmp	.+4      	; 0x199a <vfprintf+0x298>
    1996:	20 e1       	ldi	r18, 0x10	; 16
    1998:	32 e0       	ldi	r19, 0x02	; 2
    199a:	f8 01       	movw	r30, r16
    199c:	b7 fe       	sbrs	r11, 7
    199e:	07 c0       	rjmp	.+14     	; 0x19ae <vfprintf+0x2ac>
    19a0:	60 81       	ld	r22, Z
    19a2:	71 81       	ldd	r23, Z+1	; 0x01
    19a4:	82 81       	ldd	r24, Z+2	; 0x02
    19a6:	93 81       	ldd	r25, Z+3	; 0x03
    19a8:	0c 5f       	subi	r16, 0xFC	; 252
    19aa:	1f 4f       	sbci	r17, 0xFF	; 255
    19ac:	06 c0       	rjmp	.+12     	; 0x19ba <vfprintf+0x2b8>
    19ae:	60 81       	ld	r22, Z
    19b0:	71 81       	ldd	r23, Z+1	; 0x01
    19b2:	80 e0       	ldi	r24, 0x00	; 0
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	0e 5f       	subi	r16, 0xFE	; 254
    19b8:	1f 4f       	sbci	r17, 0xFF	; 255
    19ba:	a3 01       	movw	r20, r6
    19bc:	f1 d0       	rcall	.+482    	; 0x1ba0 <__ultoa_invert>
    19be:	88 2e       	mov	r8, r24
    19c0:	86 18       	sub	r8, r6
    19c2:	fb 2d       	mov	r31, r11
    19c4:	ff 77       	andi	r31, 0x7F	; 127
    19c6:	3f 2e       	mov	r3, r31
    19c8:	36 fe       	sbrs	r3, 6
    19ca:	0d c0       	rjmp	.+26     	; 0x19e6 <vfprintf+0x2e4>
    19cc:	23 2d       	mov	r18, r3
    19ce:	2e 7f       	andi	r18, 0xFE	; 254
    19d0:	a2 2e       	mov	r10, r18
    19d2:	89 14       	cp	r8, r9
    19d4:	58 f4       	brcc	.+22     	; 0x19ec <vfprintf+0x2ea>
    19d6:	34 fe       	sbrs	r3, 4
    19d8:	0b c0       	rjmp	.+22     	; 0x19f0 <vfprintf+0x2ee>
    19da:	32 fc       	sbrc	r3, 2
    19dc:	09 c0       	rjmp	.+18     	; 0x19f0 <vfprintf+0x2ee>
    19de:	83 2d       	mov	r24, r3
    19e0:	8e 7e       	andi	r24, 0xEE	; 238
    19e2:	a8 2e       	mov	r10, r24
    19e4:	05 c0       	rjmp	.+10     	; 0x19f0 <vfprintf+0x2ee>
    19e6:	b8 2c       	mov	r11, r8
    19e8:	a3 2c       	mov	r10, r3
    19ea:	03 c0       	rjmp	.+6      	; 0x19f2 <vfprintf+0x2f0>
    19ec:	b8 2c       	mov	r11, r8
    19ee:	01 c0       	rjmp	.+2      	; 0x19f2 <vfprintf+0x2f0>
    19f0:	b9 2c       	mov	r11, r9
    19f2:	a4 fe       	sbrs	r10, 4
    19f4:	0f c0       	rjmp	.+30     	; 0x1a14 <vfprintf+0x312>
    19f6:	fe 01       	movw	r30, r28
    19f8:	e8 0d       	add	r30, r8
    19fa:	f1 1d       	adc	r31, r1
    19fc:	80 81       	ld	r24, Z
    19fe:	80 33       	cpi	r24, 0x30	; 48
    1a00:	21 f4       	brne	.+8      	; 0x1a0a <vfprintf+0x308>
    1a02:	9a 2d       	mov	r25, r10
    1a04:	99 7e       	andi	r25, 0xE9	; 233
    1a06:	a9 2e       	mov	r10, r25
    1a08:	09 c0       	rjmp	.+18     	; 0x1a1c <vfprintf+0x31a>
    1a0a:	a2 fe       	sbrs	r10, 2
    1a0c:	06 c0       	rjmp	.+12     	; 0x1a1a <vfprintf+0x318>
    1a0e:	b3 94       	inc	r11
    1a10:	b3 94       	inc	r11
    1a12:	04 c0       	rjmp	.+8      	; 0x1a1c <vfprintf+0x31a>
    1a14:	8a 2d       	mov	r24, r10
    1a16:	86 78       	andi	r24, 0x86	; 134
    1a18:	09 f0       	breq	.+2      	; 0x1a1c <vfprintf+0x31a>
    1a1a:	b3 94       	inc	r11
    1a1c:	a3 fc       	sbrc	r10, 3
    1a1e:	10 c0       	rjmp	.+32     	; 0x1a40 <vfprintf+0x33e>
    1a20:	a0 fe       	sbrs	r10, 0
    1a22:	06 c0       	rjmp	.+12     	; 0x1a30 <vfprintf+0x32e>
    1a24:	b2 14       	cp	r11, r2
    1a26:	80 f4       	brcc	.+32     	; 0x1a48 <vfprintf+0x346>
    1a28:	28 0c       	add	r2, r8
    1a2a:	92 2c       	mov	r9, r2
    1a2c:	9b 18       	sub	r9, r11
    1a2e:	0d c0       	rjmp	.+26     	; 0x1a4a <vfprintf+0x348>
    1a30:	b2 14       	cp	r11, r2
    1a32:	58 f4       	brcc	.+22     	; 0x1a4a <vfprintf+0x348>
    1a34:	b6 01       	movw	r22, r12
    1a36:	80 e2       	ldi	r24, 0x20	; 32
    1a38:	90 e0       	ldi	r25, 0x00	; 0
    1a3a:	76 d0       	rcall	.+236    	; 0x1b28 <fputc>
    1a3c:	b3 94       	inc	r11
    1a3e:	f8 cf       	rjmp	.-16     	; 0x1a30 <vfprintf+0x32e>
    1a40:	b2 14       	cp	r11, r2
    1a42:	18 f4       	brcc	.+6      	; 0x1a4a <vfprintf+0x348>
    1a44:	2b 18       	sub	r2, r11
    1a46:	02 c0       	rjmp	.+4      	; 0x1a4c <vfprintf+0x34a>
    1a48:	98 2c       	mov	r9, r8
    1a4a:	21 2c       	mov	r2, r1
    1a4c:	a4 fe       	sbrs	r10, 4
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <vfprintf+0x36c>
    1a50:	b6 01       	movw	r22, r12
    1a52:	80 e3       	ldi	r24, 0x30	; 48
    1a54:	90 e0       	ldi	r25, 0x00	; 0
    1a56:	68 d0       	rcall	.+208    	; 0x1b28 <fputc>
    1a58:	a2 fe       	sbrs	r10, 2
    1a5a:	16 c0       	rjmp	.+44     	; 0x1a88 <vfprintf+0x386>
    1a5c:	a1 fc       	sbrc	r10, 1
    1a5e:	03 c0       	rjmp	.+6      	; 0x1a66 <vfprintf+0x364>
    1a60:	88 e7       	ldi	r24, 0x78	; 120
    1a62:	90 e0       	ldi	r25, 0x00	; 0
    1a64:	02 c0       	rjmp	.+4      	; 0x1a6a <vfprintf+0x368>
    1a66:	88 e5       	ldi	r24, 0x58	; 88
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	b6 01       	movw	r22, r12
    1a6c:	0c c0       	rjmp	.+24     	; 0x1a86 <vfprintf+0x384>
    1a6e:	8a 2d       	mov	r24, r10
    1a70:	86 78       	andi	r24, 0x86	; 134
    1a72:	51 f0       	breq	.+20     	; 0x1a88 <vfprintf+0x386>
    1a74:	a1 fe       	sbrs	r10, 1
    1a76:	02 c0       	rjmp	.+4      	; 0x1a7c <vfprintf+0x37a>
    1a78:	8b e2       	ldi	r24, 0x2B	; 43
    1a7a:	01 c0       	rjmp	.+2      	; 0x1a7e <vfprintf+0x37c>
    1a7c:	80 e2       	ldi	r24, 0x20	; 32
    1a7e:	a7 fc       	sbrc	r10, 7
    1a80:	8d e2       	ldi	r24, 0x2D	; 45
    1a82:	b6 01       	movw	r22, r12
    1a84:	90 e0       	ldi	r25, 0x00	; 0
    1a86:	50 d0       	rcall	.+160    	; 0x1b28 <fputc>
    1a88:	89 14       	cp	r8, r9
    1a8a:	30 f4       	brcc	.+12     	; 0x1a98 <vfprintf+0x396>
    1a8c:	b6 01       	movw	r22, r12
    1a8e:	80 e3       	ldi	r24, 0x30	; 48
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	4a d0       	rcall	.+148    	; 0x1b28 <fputc>
    1a94:	9a 94       	dec	r9
    1a96:	f8 cf       	rjmp	.-16     	; 0x1a88 <vfprintf+0x386>
    1a98:	8a 94       	dec	r8
    1a9a:	f3 01       	movw	r30, r6
    1a9c:	e8 0d       	add	r30, r8
    1a9e:	f1 1d       	adc	r31, r1
    1aa0:	80 81       	ld	r24, Z
    1aa2:	b6 01       	movw	r22, r12
    1aa4:	90 e0       	ldi	r25, 0x00	; 0
    1aa6:	40 d0       	rcall	.+128    	; 0x1b28 <fputc>
    1aa8:	81 10       	cpse	r8, r1
    1aaa:	f6 cf       	rjmp	.-20     	; 0x1a98 <vfprintf+0x396>
    1aac:	22 20       	and	r2, r2
    1aae:	09 f4       	brne	.+2      	; 0x1ab2 <vfprintf+0x3b0>
    1ab0:	4e ce       	rjmp	.-868    	; 0x174e <vfprintf+0x4c>
    1ab2:	b6 01       	movw	r22, r12
    1ab4:	80 e2       	ldi	r24, 0x20	; 32
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	37 d0       	rcall	.+110    	; 0x1b28 <fputc>
    1aba:	2a 94       	dec	r2
    1abc:	f7 cf       	rjmp	.-18     	; 0x1aac <vfprintf+0x3aa>
    1abe:	f6 01       	movw	r30, r12
    1ac0:	86 81       	ldd	r24, Z+6	; 0x06
    1ac2:	97 81       	ldd	r25, Z+7	; 0x07
    1ac4:	02 c0       	rjmp	.+4      	; 0x1aca <vfprintf+0x3c8>
    1ac6:	8f ef       	ldi	r24, 0xFF	; 255
    1ac8:	9f ef       	ldi	r25, 0xFF	; 255
    1aca:	2b 96       	adiw	r28, 0x0b	; 11
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	df 90       	pop	r13
    1ae4:	cf 90       	pop	r12
    1ae6:	bf 90       	pop	r11
    1ae8:	af 90       	pop	r10
    1aea:	9f 90       	pop	r9
    1aec:	8f 90       	pop	r8
    1aee:	7f 90       	pop	r7
    1af0:	6f 90       	pop	r6
    1af2:	5f 90       	pop	r5
    1af4:	4f 90       	pop	r4
    1af6:	3f 90       	pop	r3
    1af8:	2f 90       	pop	r2
    1afa:	08 95       	ret

00001afc <strnlen_P>:
    1afc:	fc 01       	movw	r30, r24
    1afe:	05 90       	lpm	r0, Z+
    1b00:	61 50       	subi	r22, 0x01	; 1
    1b02:	70 40       	sbci	r23, 0x00	; 0
    1b04:	01 10       	cpse	r0, r1
    1b06:	d8 f7       	brcc	.-10     	; 0x1afe <strnlen_P+0x2>
    1b08:	80 95       	com	r24
    1b0a:	90 95       	com	r25
    1b0c:	8e 0f       	add	r24, r30
    1b0e:	9f 1f       	adc	r25, r31
    1b10:	08 95       	ret

00001b12 <strnlen>:
    1b12:	fc 01       	movw	r30, r24
    1b14:	61 50       	subi	r22, 0x01	; 1
    1b16:	70 40       	sbci	r23, 0x00	; 0
    1b18:	01 90       	ld	r0, Z+
    1b1a:	01 10       	cpse	r0, r1
    1b1c:	d8 f7       	brcc	.-10     	; 0x1b14 <strnlen+0x2>
    1b1e:	80 95       	com	r24
    1b20:	90 95       	com	r25
    1b22:	8e 0f       	add	r24, r30
    1b24:	9f 1f       	adc	r25, r31
    1b26:	08 95       	ret

00001b28 <fputc>:
    1b28:	0f 93       	push	r16
    1b2a:	1f 93       	push	r17
    1b2c:	cf 93       	push	r28
    1b2e:	df 93       	push	r29
    1b30:	fb 01       	movw	r30, r22
    1b32:	23 81       	ldd	r18, Z+3	; 0x03
    1b34:	21 fd       	sbrc	r18, 1
    1b36:	03 c0       	rjmp	.+6      	; 0x1b3e <fputc+0x16>
    1b38:	8f ef       	ldi	r24, 0xFF	; 255
    1b3a:	9f ef       	ldi	r25, 0xFF	; 255
    1b3c:	2c c0       	rjmp	.+88     	; 0x1b96 <fputc+0x6e>
    1b3e:	22 ff       	sbrs	r18, 2
    1b40:	16 c0       	rjmp	.+44     	; 0x1b6e <fputc+0x46>
    1b42:	46 81       	ldd	r20, Z+6	; 0x06
    1b44:	57 81       	ldd	r21, Z+7	; 0x07
    1b46:	24 81       	ldd	r18, Z+4	; 0x04
    1b48:	35 81       	ldd	r19, Z+5	; 0x05
    1b4a:	42 17       	cp	r20, r18
    1b4c:	53 07       	cpc	r21, r19
    1b4e:	44 f4       	brge	.+16     	; 0x1b60 <fputc+0x38>
    1b50:	a0 81       	ld	r26, Z
    1b52:	b1 81       	ldd	r27, Z+1	; 0x01
    1b54:	9d 01       	movw	r18, r26
    1b56:	2f 5f       	subi	r18, 0xFF	; 255
    1b58:	3f 4f       	sbci	r19, 0xFF	; 255
    1b5a:	31 83       	std	Z+1, r19	; 0x01
    1b5c:	20 83       	st	Z, r18
    1b5e:	8c 93       	st	X, r24
    1b60:	26 81       	ldd	r18, Z+6	; 0x06
    1b62:	37 81       	ldd	r19, Z+7	; 0x07
    1b64:	2f 5f       	subi	r18, 0xFF	; 255
    1b66:	3f 4f       	sbci	r19, 0xFF	; 255
    1b68:	37 83       	std	Z+7, r19	; 0x07
    1b6a:	26 83       	std	Z+6, r18	; 0x06
    1b6c:	14 c0       	rjmp	.+40     	; 0x1b96 <fputc+0x6e>
    1b6e:	8b 01       	movw	r16, r22
    1b70:	ec 01       	movw	r28, r24
    1b72:	fb 01       	movw	r30, r22
    1b74:	00 84       	ldd	r0, Z+8	; 0x08
    1b76:	f1 85       	ldd	r31, Z+9	; 0x09
    1b78:	e0 2d       	mov	r30, r0
    1b7a:	19 95       	eicall
    1b7c:	89 2b       	or	r24, r25
    1b7e:	e1 f6       	brne	.-72     	; 0x1b38 <fputc+0x10>
    1b80:	d8 01       	movw	r26, r16
    1b82:	16 96       	adiw	r26, 0x06	; 6
    1b84:	8d 91       	ld	r24, X+
    1b86:	9c 91       	ld	r25, X
    1b88:	17 97       	sbiw	r26, 0x07	; 7
    1b8a:	01 96       	adiw	r24, 0x01	; 1
    1b8c:	17 96       	adiw	r26, 0x07	; 7
    1b8e:	9c 93       	st	X, r25
    1b90:	8e 93       	st	-X, r24
    1b92:	16 97       	sbiw	r26, 0x06	; 6
    1b94:	ce 01       	movw	r24, r28
    1b96:	df 91       	pop	r29
    1b98:	cf 91       	pop	r28
    1b9a:	1f 91       	pop	r17
    1b9c:	0f 91       	pop	r16
    1b9e:	08 95       	ret

00001ba0 <__ultoa_invert>:
    1ba0:	fa 01       	movw	r30, r20
    1ba2:	aa 27       	eor	r26, r26
    1ba4:	28 30       	cpi	r18, 0x08	; 8
    1ba6:	51 f1       	breq	.+84     	; 0x1bfc <__ultoa_invert+0x5c>
    1ba8:	20 31       	cpi	r18, 0x10	; 16
    1baa:	81 f1       	breq	.+96     	; 0x1c0c <__ultoa_invert+0x6c>
    1bac:	e8 94       	clt
    1bae:	6f 93       	push	r22
    1bb0:	6e 7f       	andi	r22, 0xFE	; 254
    1bb2:	6e 5f       	subi	r22, 0xFE	; 254
    1bb4:	7f 4f       	sbci	r23, 0xFF	; 255
    1bb6:	8f 4f       	sbci	r24, 0xFF	; 255
    1bb8:	9f 4f       	sbci	r25, 0xFF	; 255
    1bba:	af 4f       	sbci	r26, 0xFF	; 255
    1bbc:	b1 e0       	ldi	r27, 0x01	; 1
    1bbe:	3e d0       	rcall	.+124    	; 0x1c3c <__ultoa_invert+0x9c>
    1bc0:	b4 e0       	ldi	r27, 0x04	; 4
    1bc2:	3c d0       	rcall	.+120    	; 0x1c3c <__ultoa_invert+0x9c>
    1bc4:	67 0f       	add	r22, r23
    1bc6:	78 1f       	adc	r23, r24
    1bc8:	89 1f       	adc	r24, r25
    1bca:	9a 1f       	adc	r25, r26
    1bcc:	a1 1d       	adc	r26, r1
    1bce:	68 0f       	add	r22, r24
    1bd0:	79 1f       	adc	r23, r25
    1bd2:	8a 1f       	adc	r24, r26
    1bd4:	91 1d       	adc	r25, r1
    1bd6:	a1 1d       	adc	r26, r1
    1bd8:	6a 0f       	add	r22, r26
    1bda:	71 1d       	adc	r23, r1
    1bdc:	81 1d       	adc	r24, r1
    1bde:	91 1d       	adc	r25, r1
    1be0:	a1 1d       	adc	r26, r1
    1be2:	20 d0       	rcall	.+64     	; 0x1c24 <__ultoa_invert+0x84>
    1be4:	09 f4       	brne	.+2      	; 0x1be8 <__ultoa_invert+0x48>
    1be6:	68 94       	set
    1be8:	3f 91       	pop	r19
    1bea:	2a e0       	ldi	r18, 0x0A	; 10
    1bec:	26 9f       	mul	r18, r22
    1bee:	11 24       	eor	r1, r1
    1bf0:	30 19       	sub	r19, r0
    1bf2:	30 5d       	subi	r19, 0xD0	; 208
    1bf4:	31 93       	st	Z+, r19
    1bf6:	de f6       	brtc	.-74     	; 0x1bae <__ultoa_invert+0xe>
    1bf8:	cf 01       	movw	r24, r30
    1bfa:	08 95       	ret
    1bfc:	46 2f       	mov	r20, r22
    1bfe:	47 70       	andi	r20, 0x07	; 7
    1c00:	40 5d       	subi	r20, 0xD0	; 208
    1c02:	41 93       	st	Z+, r20
    1c04:	b3 e0       	ldi	r27, 0x03	; 3
    1c06:	0f d0       	rcall	.+30     	; 0x1c26 <__ultoa_invert+0x86>
    1c08:	c9 f7       	brne	.-14     	; 0x1bfc <__ultoa_invert+0x5c>
    1c0a:	f6 cf       	rjmp	.-20     	; 0x1bf8 <__ultoa_invert+0x58>
    1c0c:	46 2f       	mov	r20, r22
    1c0e:	4f 70       	andi	r20, 0x0F	; 15
    1c10:	40 5d       	subi	r20, 0xD0	; 208
    1c12:	4a 33       	cpi	r20, 0x3A	; 58
    1c14:	18 f0       	brcs	.+6      	; 0x1c1c <__ultoa_invert+0x7c>
    1c16:	49 5d       	subi	r20, 0xD9	; 217
    1c18:	31 fd       	sbrc	r19, 1
    1c1a:	40 52       	subi	r20, 0x20	; 32
    1c1c:	41 93       	st	Z+, r20
    1c1e:	02 d0       	rcall	.+4      	; 0x1c24 <__ultoa_invert+0x84>
    1c20:	a9 f7       	brne	.-22     	; 0x1c0c <__ultoa_invert+0x6c>
    1c22:	ea cf       	rjmp	.-44     	; 0x1bf8 <__ultoa_invert+0x58>
    1c24:	b4 e0       	ldi	r27, 0x04	; 4
    1c26:	a6 95       	lsr	r26
    1c28:	97 95       	ror	r25
    1c2a:	87 95       	ror	r24
    1c2c:	77 95       	ror	r23
    1c2e:	67 95       	ror	r22
    1c30:	ba 95       	dec	r27
    1c32:	c9 f7       	brne	.-14     	; 0x1c26 <__ultoa_invert+0x86>
    1c34:	00 97       	sbiw	r24, 0x00	; 0
    1c36:	61 05       	cpc	r22, r1
    1c38:	71 05       	cpc	r23, r1
    1c3a:	08 95       	ret
    1c3c:	9b 01       	movw	r18, r22
    1c3e:	ac 01       	movw	r20, r24
    1c40:	0a 2e       	mov	r0, r26
    1c42:	06 94       	lsr	r0
    1c44:	57 95       	ror	r21
    1c46:	47 95       	ror	r20
    1c48:	37 95       	ror	r19
    1c4a:	27 95       	ror	r18
    1c4c:	ba 95       	dec	r27
    1c4e:	c9 f7       	brne	.-14     	; 0x1c42 <__ultoa_invert+0xa2>
    1c50:	62 0f       	add	r22, r18
    1c52:	73 1f       	adc	r23, r19
    1c54:	84 1f       	adc	r24, r20
    1c56:	95 1f       	adc	r25, r21
    1c58:	a0 1d       	adc	r26, r0
    1c5a:	08 95       	ret

00001c5c <_exit>:
    1c5c:	f8 94       	cli

00001c5e <__stop_program>:
    1c5e:	ff cf       	rjmp	.-2      	; 0x1c5e <__stop_program>
